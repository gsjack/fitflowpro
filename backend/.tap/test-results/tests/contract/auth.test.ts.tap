TAP version 14
# Subtest: Authentication Endpoints Contract Tests
{"level":30,"time":1759600070410,"pid":215057,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-1","req":{"method":"POST","url":"/api/auth/register","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
    # Subtest: POST /api/auth/register
        # Subtest: should register new user with valid data and return 201
            not ok 1 - should return 201 Created
              ---
              compare: ===
              at:
                fileName: tests/contract/auth.test.ts
                lineNumber: 32
                columnNumber: 9
                typeName: Test
              stack: |
                Test.<anonymous> (tests/contract/auth.test.ts:32:9)
              source: |2
              
                      // Expect 201 Created status
                      t.equal(response.statusCode, 201, 'should return 201 Created');
                --------^
              
                      const body = JSON.parse(response.body);
              diff: |
                --- expected
                +++ actual
                @@ -1,1 +1,1 @@
                -201
                +409
              ...
            
            not ok 2 - response should contain user_id
              ---
              at:
                fileName: tests/contract/auth.test.ts
                lineNumber: 37
                columnNumber: 9
                typeName: Test
              stack: |
                Test.<anonymous> (tests/contract/auth.test.ts:37:9)
              source: |2
              
                      // Validate response schema
                      t.ok(body.user_id, 'response should contain user_id');
                --------^
                      t.type(body.user_id, 'number', 'user_id should be a number');
              ...
            
            not ok 3 - user_id should be a number
              ---
              compare: ===
              at:
                fileName: tests/contract/auth.test.ts
                lineNumber: 38
                columnNumber: 9
                typeName: Test
              stack: |
                Test.<anonymous> (tests/contract/auth.test.ts:38:9)
              source: |2
                      // Validate response schema
                      t.ok(body.user_id, 'response should contain user_id');
                      t.type(body.user_id, 'number', 'user_id should be a number');
                --------^
              
                      t.ok(body.token, 'response should contain token');
              diff: |
                --- expected
                +++ actual
                @@ -1,1 +1,1 @@
                -number
                +undefined
              ...
            
            not ok 4 - response should contain token
              ---
              at:
                fileName: tests/contract/auth.test.ts
                lineNumber: 40
                columnNumber: 9
                typeName: Test
              stack: |
                Test.<anonymous> (tests/contract/auth.test.ts:40:9)
              source: >2
                      t.type(body.user_id, 'number', 'user_id should be a number');
              
                      t.ok(body.token, 'response should contain token');
                --------^
                      t.type(body.token, 'string', 'token should be a string');
                      t.match(body.token, /^[A-Za-z0-9\-_]+\.[A-Za-z0-9\-_]+\.[A-Za-z0-9\-_]+$/, 'token should be a valid JWT');
              ...
            
            not ok 5 - token should be a string
              ---
              compare: ===
              at:
                fileName: tests/contract/auth.test.ts
                lineNumber: 41
                columnNumber: 9
                typeName: Test
              stack: |
                Test.<anonymous> (tests/contract/auth.test.ts:41:9)
              source: >2
              
                      t.ok(body.token, 'response should contain token');
                      t.type(body.token, 'string', 'token should be a string');
                --------^
                      t.match(body.token, /^[A-Za-z0-9\-_]+\.[A-Za-z0-9\-_]+\.[A-Za-z0-9\-_]+$/, 'token should be a valid JWT');
                    });
              diff: |
                --- expected
                +++ actual
                @@ -1,1 +1,1 @@
                -string
                +undefined
              ...
            
            not ok 6 - token should be a valid JWT
              ---
              diff: |
                --- expected
                +++ actual
                @@ -1,1 +1,1 @@
                -/^[A-Za-z0-9\-_]+\.[A-Za-z0-9\-_]+\.[A-Za-z0-9\-_]+$/
                +undefined
              at:
                fileName: tests/contract/auth.test.ts
                lineNumber: 42
                columnNumber: 9
                typeName: Test
              stack: |
                Test.<anonymous> (tests/contract/auth.test.ts:42:9)
              source: >2
                      t.ok(body.token, 'response should contain token');
                      t.type(body.token, 'string', 'token should be a string');
                      t.match(body.token, /^[A-Za-z0-9\-_]+\.[A-Za-z0-9\-_]+\.[A-Za-z0-9\-_]+$/, 'token should be a valid JWT');
                --------^
                    });
              ...
            
            1..6
        not ok 1 - should register new user with valid data and return 201 # time=324.335ms
          ---
          at:
            fileName: tests/contract/auth.test.ts
            lineNumber: 16
            columnNumber: 13
            typeName: Test
          source: >2
          
              await t.test('POST /api/auth/register', async (t) => {
                await t.test('should register new user with valid data and return 201', async (t) => {
            ------------^
                  const validRegistration = {
                    username: 'test@example.com',
          ...
        
{"level":30,"time":1759600070422,"pid":215057,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-1","res":{"statusCode":409},"responseTime":10.057206999510527,"msg":"request completed"}
{"level":30,"time":1759600070490,"pid":215057,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-2","req":{"method":"POST","url":"/api/auth/register","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
        # Subtest: should validate username is email format
            ok 1 - should return 400 for invalid email format
            ok 2 - response should contain error field
            ok 3 - error should be a string
            1..3
        ok 2 - should validate username is email format # time=5.576ms
        
{"level":30,"time":1759600070492,"pid":215057,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-2","res":{"statusCode":400},"err":{"type":"Error","message":"body/username must match format \"email\"","stack":"Error: body/username must match format \"email\"\n    at defaultSchemaErrorFormatter (/home/asigator/fitness2025/backend/node_modules/fastify/lib/context.js:114:10)\n    at wrapValidationError (/home/asigator/fitness2025/backend/node_modules/fastify/lib/validation.js:249:17)\n    at validate (/home/asigator/fitness2025/backend/node_modules/fastify/lib/validation.js:167:16)\n    at preValidationCallback (/home/asigator/fitness2025/backend/node_modules/fastify/lib/handleRequest.js:93:25)\n    at handler (/home/asigator/fitness2025/backend/node_modules/fastify/lib/handleRequest.js:77:7)\n    at /home/asigator/fitness2025/backend/node_modules/fastify/lib/contentTypeParser.js:199:9\n    at AsyncResource.runInAsyncScope (node:async_hooks:206:9)\n    at done (/home/asigator/fitness2025/backend/node_modules/fastify/lib/contentTypeParser.js:192:14)\n    at Parser.defaultJsonParser [as fn] (/home/asigator/fitness2025/backend/node_modules/fastify/lib/contentTypeParser.js:304:5)\n    at Request.onEnd (/home/asigator/fitness2025/backend/node_modules/fastify/lib/contentTypeParser.js:283:27)","statusCode":400,"code":"FST_ERR_VALIDATION","validation":[{"instancePath":"/username","schemaPath":"#/properties/username/format","keyword":"format","params":{"format":"email"},"message":"must match format \"email\""}],"validationContext":"body"},"msg":"body/username must match format \"email\""}
{"level":30,"time":1759600070493,"pid":215057,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-2","res":{"statusCode":400},"responseTime":3.2395849991589785,"msg":"request completed"}
{"level":30,"time":1759600070497,"pid":215057,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-3","req":{"method":"POST","url":"/api/auth/register","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
        # Subtest: should validate password minimum length (8 characters)
            ok 1 - should return 400 for password < 8 chars
            ok 2 - response should contain error field
            1..2
        ok 3 - should validate password minimum length (8 characters) # time=2.574ms
        
{"level":30,"time":1759600070497,"pid":215057,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-3","res":{"statusCode":400},"err":{"type":"Error","message":"body/password must NOT have fewer than 8 characters","stack":"Error: body/password must NOT have fewer than 8 characters\n    at defaultSchemaErrorFormatter (/home/asigator/fitness2025/backend/node_modules/fastify/lib/context.js:114:10)\n    at wrapValidationError (/home/asigator/fitness2025/backend/node_modules/fastify/lib/validation.js:249:17)\n    at validate (/home/asigator/fitness2025/backend/node_modules/fastify/lib/validation.js:167:16)\n    at preValidationCallback (/home/asigator/fitness2025/backend/node_modules/fastify/lib/handleRequest.js:93:25)\n    at handler (/home/asigator/fitness2025/backend/node_modules/fastify/lib/handleRequest.js:77:7)\n    at /home/asigator/fitness2025/backend/node_modules/fastify/lib/contentTypeParser.js:199:9\n    at AsyncResource.runInAsyncScope (node:async_hooks:206:9)\n    at done (/home/asigator/fitness2025/backend/node_modules/fastify/lib/contentTypeParser.js:192:14)\n    at Parser.defaultJsonParser [as fn] (/home/asigator/fitness2025/backend/node_modules/fastify/lib/contentTypeParser.js:304:5)\n    at Request.onEnd (/home/asigator/fitness2025/backend/node_modules/fastify/lib/contentTypeParser.js:283:27)","statusCode":400,"code":"FST_ERR_VALIDATION","validation":[{"instancePath":"/password","schemaPath":"#/properties/password/minLength","keyword":"minLength","params":{"limit":8},"message":"must NOT have fewer than 8 characters"}],"validationContext":"body"},"msg":"body/password must NOT have fewer than 8 characters"}
{"level":30,"time":1759600070498,"pid":215057,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-3","res":{"statusCode":400},"responseTime":0.9703739993274212,"msg":"request completed"}
{"level":30,"time":1759600070500,"pid":215057,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-4","req":{"method":"POST","url":"/api/auth/register","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
        # Subtest: should validate age range (13-100)
            ok 1 - should return 400 for age < 13
            ok 2 - response should contain error field
            1..2
        ok 4 - should validate age range (13-100) # time=2.349ms
        
{"level":30,"time":1759600070501,"pid":215057,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-4","res":{"statusCode":400},"err":{"type":"Error","message":"body/age must be >= 13","stack":"Error: body/age must be >= 13\n    at defaultSchemaErrorFormatter (/home/asigator/fitness2025/backend/node_modules/fastify/lib/context.js:114:10)\n    at wrapValidationError (/home/asigator/fitness2025/backend/node_modules/fastify/lib/validation.js:249:17)\n    at validate (/home/asigator/fitness2025/backend/node_modules/fastify/lib/validation.js:167:16)\n    at preValidationCallback (/home/asigator/fitness2025/backend/node_modules/fastify/lib/handleRequest.js:93:25)\n    at handler (/home/asigator/fitness2025/backend/node_modules/fastify/lib/handleRequest.js:77:7)\n    at /home/asigator/fitness2025/backend/node_modules/fastify/lib/contentTypeParser.js:199:9\n    at AsyncResource.runInAsyncScope (node:async_hooks:206:9)\n    at done (/home/asigator/fitness2025/backend/node_modules/fastify/lib/contentTypeParser.js:192:14)\n    at Parser.defaultJsonParser [as fn] (/home/asigator/fitness2025/backend/node_modules/fastify/lib/contentTypeParser.js:304:5)\n    at Request.onEnd (/home/asigator/fitness2025/backend/node_modules/fastify/lib/contentTypeParser.js:283:27)","statusCode":400,"code":"FST_ERR_VALIDATION","validation":[{"instancePath":"/age","schemaPath":"#/properties/age/minimum","keyword":"minimum","params":{"comparison":">=","limit":13},"message":"must be >= 13"}],"validationContext":"body"},"msg":"body/age must be >= 13"}
{"level":30,"time":1759600070501,"pid":215057,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-4","res":{"statusCode":400},"responseTime":0.7570789996534586,"msg":"request completed"}
{"level":30,"time":1759600070504,"pid":215057,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-5","req":{"method":"POST","url":"/api/auth/register","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
        # Subtest: should validate weight_kg range (30-300)
            ok 1 - should return 400 for weight_kg < 30
            ok 2 - response should contain error field
            1..2
        ok 5 - should validate weight_kg range (30-300) # time=1.791ms
        
{"level":30,"time":1759600070504,"pid":215057,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-5","res":{"statusCode":400},"err":{"type":"Error","message":"body/weight_kg must be >= 30","stack":"Error: body/weight_kg must be >= 30\n    at defaultSchemaErrorFormatter (/home/asigator/fitness2025/backend/node_modules/fastify/lib/context.js:114:10)\n    at wrapValidationError (/home/asigator/fitness2025/backend/node_modules/fastify/lib/validation.js:249:17)\n    at validate (/home/asigator/fitness2025/backend/node_modules/fastify/lib/validation.js:167:16)\n    at preValidationCallback (/home/asigator/fitness2025/backend/node_modules/fastify/lib/handleRequest.js:93:25)\n    at handler (/home/asigator/fitness2025/backend/node_modules/fastify/lib/handleRequest.js:77:7)\n    at /home/asigator/fitness2025/backend/node_modules/fastify/lib/contentTypeParser.js:199:9\n    at AsyncResource.runInAsyncScope (node:async_hooks:206:9)\n    at done (/home/asigator/fitness2025/backend/node_modules/fastify/lib/contentTypeParser.js:192:14)\n    at Parser.defaultJsonParser [as fn] (/home/asigator/fitness2025/backend/node_modules/fastify/lib/contentTypeParser.js:304:5)\n    at Request.onEnd (/home/asigator/fitness2025/backend/node_modules/fastify/lib/contentTypeParser.js:283:27)","statusCode":400,"code":"FST_ERR_VALIDATION","validation":[{"instancePath":"/weight_kg","schemaPath":"#/properties/weight_kg/minimum","keyword":"minimum","params":{"comparison":">=","limit":30},"message":"must be >= 30"}],"validationContext":"body"},"msg":"body/weight_kg must be >= 30"}
{"level":30,"time":1759600070504,"pid":215057,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-5","res":{"statusCode":400},"responseTime":0.621238000690937,"msg":"request completed"}
{"level":30,"time":1759600070507,"pid":215057,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-6","req":{"method":"POST","url":"/api/auth/register","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
        # Subtest: should validate experience_level enum
            ok 1 - should return 400 for invalid experience_level
            ok 2 - response should contain error field
            1..2
        ok 6 - should validate experience_level enum # time=2.404ms
        
{"level":30,"time":1759600070508,"pid":215057,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-6","res":{"statusCode":400},"err":{"type":"Error","message":"body/experience_level must be equal to one of the allowed values","stack":"Error: body/experience_level must be equal to one of the allowed values\n    at defaultSchemaErrorFormatter (/home/asigator/fitness2025/backend/node_modules/fastify/lib/context.js:114:10)\n    at wrapValidationError (/home/asigator/fitness2025/backend/node_modules/fastify/lib/validation.js:249:17)\n    at validate (/home/asigator/fitness2025/backend/node_modules/fastify/lib/validation.js:167:16)\n    at preValidationCallback (/home/asigator/fitness2025/backend/node_modules/fastify/lib/handleRequest.js:93:25)\n    at handler (/home/asigator/fitness2025/backend/node_modules/fastify/lib/handleRequest.js:77:7)\n    at /home/asigator/fitness2025/backend/node_modules/fastify/lib/contentTypeParser.js:199:9\n    at AsyncResource.runInAsyncScope (node:async_hooks:206:9)\n    at done (/home/asigator/fitness2025/backend/node_modules/fastify/lib/contentTypeParser.js:192:14)\n    at Parser.defaultJsonParser [as fn] (/home/asigator/fitness2025/backend/node_modules/fastify/lib/contentTypeParser.js:304:5)\n    at Request.onEnd (/home/asigator/fitness2025/backend/node_modules/fastify/lib/contentTypeParser.js:283:27)","statusCode":400,"code":"FST_ERR_VALIDATION","validation":[{"instancePath":"/experience_level","schemaPath":"#/properties/experience_level/enum","keyword":"enum","params":{"allowedValues":["beginner","intermediate","advanced"]},"message":"must be equal to one of the allowed values"}],"validationContext":"body"},"msg":"body/experience_level must be equal to one of the allowed values"}
{"level":30,"time":1759600070508,"pid":215057,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-6","res":{"statusCode":400},"responseTime":0.6972949989140034,"msg":"request completed"}
{"level":30,"time":1759600070511,"pid":215057,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-7","req":{"method":"POST","url":"/api/auth/register","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
{"level":30,"time":1759600070511,"pid":215057,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-7","res":{"statusCode":409},"responseTime":0.6186529994010925,"msg":"request completed"}
{"level":30,"time":1759600070512,"pid":215057,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-8","req":{"method":"POST","url":"/api/auth/register","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
        # Subtest: should return 409 for duplicate username
            ok 1 - should return 409 for duplicate username
            ok 2 - response should contain error field
            ok 3 - error should be a string
            1..3
        ok 7 - should return 409 for duplicate username # time=2.404ms
        
{"level":30,"time":1759600070512,"pid":215057,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-8","res":{"statusCode":409},"responseTime":0.40333300083875656,"msg":"request completed"}
{"level":30,"time":1759600070514,"pid":215057,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-9","req":{"method":"POST","url":"/api/auth/register","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
        # Subtest: should allow registration without optional fields
            not ok 1 - should return 201 with only required fields
              ---
              compare: ===
              at:
                fileName: tests/contract/auth.test.ts
                lineNumber: 200
                columnNumber: 9
                typeName: Test
              stack: |
                Test.<anonymous> (tests/contract/auth.test.ts:200:9)
              source: >2
              
                      // Should still succeed with 201
                      t.equal(response.statusCode, 201, 'should return 201 with only required fields');
                --------^
              
                      const body = JSON.parse(response.body);
              diff: |
                --- expected
                +++ actual
                @@ -1,1 +1,1 @@
                -201
                +409
              ...
            
            not ok 2 - response should contain user_id
              ---
              at:
                fileName: tests/contract/auth.test.ts
                lineNumber: 203
                columnNumber: 9
                typeName: Test
              stack: |
                Test.<anonymous> (tests/contract/auth.test.ts:203:9)
              source: |2
              
                      const body = JSON.parse(response.body);
                      t.ok(body.user_id, 'response should contain user_id');
                --------^
                      t.ok(body.token, 'response should contain token');
                    });
              ...
            
            not ok 3 - response should contain token
              ---
              at:
                fileName: tests/contract/auth.test.ts
                lineNumber: 204
                columnNumber: 9
                typeName: Test
              stack: |
                Test.<anonymous> (tests/contract/auth.test.ts:204:9)
              source: |2
                      const body = JSON.parse(response.body);
                      t.ok(body.user_id, 'response should contain user_id');
                      t.ok(body.token, 'response should contain token');
                --------^
                    });
                  });
              ...
            
            1..3
        not ok 8 - should allow registration without optional fields # time=13.292ms
          ---
          at:
            fileName: tests/contract/auth.test.ts
            lineNumber: 187
            columnNumber: 13
            typeName: Test
          source: >2
                });
          
                await t.test('should allow registration without optional fields', async (t) => {
            ------------^
                  const minimalRegistration = {
                    username: 'minimal@example.com',
          ...
        
        1..8
    not ok 1 - POST /api/auth/register # time=373.911ms
      ---
      at:
        fileName: tests/contract/auth.test.ts
        lineNumber: 15
        columnNumber: 11
        typeName: Test
      source: >2
          const app = await buildApp();
      
          await t.test('POST /api/auth/register', async (t) => {
        ----------^
            await t.test('should register new user with valid data and return 201', async (t) => {
              const validRegistration = {
      ...
    
{"level":30,"time":1759600070514,"pid":215057,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-9","res":{"statusCode":409},"responseTime":0.4255420006811619,"msg":"request completed"}
{"level":30,"time":1759600070536,"pid":215057,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-a","req":{"method":"POST","url":"/api/auth/register","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
{"level":30,"time":1759600070537,"pid":215057,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-a","res":{"statusCode":409},"responseTime":0.7034410014748573,"msg":"request completed"}
{"level":30,"time":1759600070537,"pid":215057,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-b","req":{"method":"POST","url":"/api/auth/login","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
{"level":30,"time":1759600070754,"pid":215057,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-b","res":{"statusCode":200},"responseTime":216.89444500021636,"msg":"request completed"}
    # Subtest: POST /api/auth/login
        # Subtest: should login with valid credentials and return 200
            ok 1 - should return 200 OK
            ok 2 - response should contain token
            ok 3 - token should be a string
            ok 4 - token should be a valid JWT
            ok 5 - response should contain user object
            ok 6 - user should be an object
            ok 7 - user should have id
            ok 8 - user.id should be a number
            ok 9 - user should have correct username
            ok 10 - user.username should be a string
            ok 11 - user should have created_at timestamp
            ok 12 - user.created_at should be a number (Unix timestamp)
            1..12
        ok 1 - should login with valid credentials and return 200 # time=222.694ms
        
        # Subtest: should return 401 for invalid username
            ok 1 - should return 401 for invalid username
            ok 2 - response should contain error field
            ok 3 - error should be a string
            1..3
        ok 2 - should return 401 for invalid username # time=2.089ms
        
{"level":30,"time":1759600070760,"pid":215057,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-c","req":{"method":"POST","url":"/api/auth/login","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
{"level":30,"time":1759600070760,"pid":215057,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-c","res":{"statusCode":401},"responseTime":0.6335990000516176,"msg":"request completed"}
{"level":30,"time":1759600070762,"pid":215057,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-d","req":{"method":"POST","url":"/api/auth/register","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
{"level":30,"time":1759600070769,"pid":215057,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-d","res":{"statusCode":409},"responseTime":6.450675999745727,"msg":"request completed"}
{"level":30,"time":1759600070769,"pid":215057,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-e","req":{"method":"POST","url":"/api/auth/login","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
        # Subtest: should return 401 for invalid password
            ok 1 - should return 401 for invalid password
            ok 2 - response should contain error field
            ok 3 - error should be a string
            1..3
        ok 3 - should return 401 for invalid password # time=237.516ms
        
{"level":30,"time":1759600070998,"pid":215057,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-e","res":{"statusCode":401},"responseTime":228.70473700016737,"msg":"request completed"}
        # Subtest: should require both username and password
            ok 1 - should return 400 for missing password
            ok 2 - response should contain error field
            1..2
        ok 4 - should require both username and password # time=2.337ms
        
        1..4
    ok 2 - POST /api/auth/login # time=469.214ms
    
    1..2
not ok 1 - Authentication Endpoints Contract Tests # time=927.57ms
  ---
  at:
    fileName: tests/contract/auth.test.ts
    lineNumber: 12
    columnNumber: 5
    isToplevel: true
  source: |2
     */
  
    tap.test('Authentication Endpoints Contract Tests', async (t) => {
    ----^
      const app = await buildApp();
  ...

{"level":30,"time":1759600071001,"pid":215057,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-f","req":{"method":"POST","url":"/api/auth/login","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
{"level":30,"time":1759600071002,"pid":215057,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-f","res":{"statusCode":400},"err":{"type":"Error","message":"body must have required property 'password'","stack":"Error: body must have required property 'password'\n    at defaultSchemaErrorFormatter (/home/asigator/fitness2025/backend/node_modules/fastify/lib/context.js:114:10)\n    at wrapValidationError (/home/asigator/fitness2025/backend/node_modules/fastify/lib/validation.js:249:17)\n    at validate (/home/asigator/fitness2025/backend/node_modules/fastify/lib/validation.js:167:16)\n    at preValidationCallback (/home/asigator/fitness2025/backend/node_modules/fastify/lib/handleRequest.js:93:25)\n    at handler (/home/asigator/fitness2025/backend/node_modules/fastify/lib/handleRequest.js:77:7)\n    at /home/asigator/fitness2025/backend/node_modules/fastify/lib/contentTypeParser.js:199:9\n    at AsyncResource.runInAsyncScope (node:async_hooks:206:9)\n    at done (/home/asigator/fitness2025/backend/node_modules/fastify/lib/contentTypeParser.js:192:14)\n    at Parser.defaultJsonParser [as fn] (/home/asigator/fitness2025/backend/node_modules/fastify/lib/contentTypeParser.js:304:5)\n    at Request.onEnd (/home/asigator/fitness2025/backend/node_modules/fastify/lib/contentTypeParser.js:283:27)","statusCode":400,"code":"FST_ERR_VALIDATION","validation":[{"instancePath":"","schemaPath":"#/required","keyword":"required","params":{"missingProperty":"password"},"message":"must have required property 'password'"}],"validationContext":"body"},"msg":"body must have required property 'password'"}
{"level":30,"time":1759600071002,"pid":215057,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-f","res":{"statusCode":400},"responseTime":0.8839100003242493,"msg":"request completed"}
1..1
Database connection closed
