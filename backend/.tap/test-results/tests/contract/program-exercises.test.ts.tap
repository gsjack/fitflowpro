TAP version 14
# Subtest: Program Exercise Editor Endpoints Contract Tests
{"level":30,"time":1759552531281,"pid":46128,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-1","req":{"method":"POST","url":"/api/auth/register","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
{"level":30,"time":1759552531514,"pid":46128,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-1","res":{"statusCode":201},"responseTime":231.2321270001121,"msg":"request completed"}
{"level":30,"time":1759552531515,"pid":46128,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-2","req":{"method":"POST","url":"/api/auth/login","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
{"level":30,"time":1759552531741,"pid":46128,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-2","res":{"statusCode":200},"responseTime":225.436863000039,"msg":"request completed"}
{"level":30,"time":1759552531741,"pid":46128,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-3","req":{"method":"GET","url":"/api/exercises?muscle_group=chest&equipment=barbell","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
{"level":30,"time":1759552531745,"pid":46128,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-3","res":{"statusCode":200},"responseTime":3.8727279999293387,"msg":"request completed"}
{"level":30,"time":1759552531746,"pid":46128,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-4","req":{"method":"GET","url":"/api/exercises?muscle_group=chest&equipment=dumbbell","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
{"level":30,"time":1759552531746,"pid":46128,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-4","res":{"statusCode":200},"responseTime":0.7707739998586476,"msg":"request completed"}
{"level":30,"time":1759552531747,"pid":46128,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-5","req":{"method":"GET","url":"/api/exercises?muscle_group=back","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
{"level":30,"time":1759552531748,"pid":46128,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-5","res":{"statusCode":200},"responseTime":1.065506000071764,"msg":"request completed"}
{"level":30,"time":1759552531749,"pid":46128,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-6","req":{"method":"POST","url":"/api/programs","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
{"level":30,"time":1759552531750,"pid":46128,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-6","msg":"Route POST:/api/programs not found"}
{"level":30,"time":1759552531750,"pid":46128,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-6","res":{"statusCode":404},"responseTime":0.789282999932766,"msg":"request completed"}
{"level":30,"time":1759552531751,"pid":46128,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-7","req":{"method":"POST","url":"/api/program-days","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
{"level":30,"time":1759552531751,"pid":46128,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-7","msg":"Route POST:/api/program-days not found"}
{"level":30,"time":1759552531751,"pid":46128,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-7","res":{"statusCode":404},"responseTime":0.5482580000534654,"msg":"request completed"}
{"level":30,"time":1759552531754,"pid":46128,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-8","req":{"method":"POST","url":"/api/program-exercises","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
    # Subtest: T009: POST /api/program-exercises
        # Subtest: should add exercise to program day (201)
            not ok 1 - Returns 201 Created
              ---
              compare: ===
              at:
                fileName: tests/contract/program-exercises.test.ts
                lineNumber: 145
                columnNumber: 9
                typeName: Test
              stack: |
                Test.<anonymous> (tests/contract/program-exercises.test.ts:145:9)
              source: >2
                      });
              
                      t.equal(response.statusCode, 201, 'Returns 201 Created');
                --------^
                      const body = response.json();
                      t.type(body.program_exercise_id, 'number', 'Returns program_exercise_id');
              diff: |
                --- expected
                +++ actual
                @@ -1,1 +1,1 @@
                -201
                +404
              ...
            
            not ok 2 - Returns program_exercise_id
              ---
              compare: ===
              at:
                fileName: tests/contract/program-exercises.test.ts
                lineNumber: 147
                columnNumber: 9
                typeName: Test
              stack: |
                Test.<anonymous> (tests/contract/program-exercises.test.ts:147:9)
              source: >2
                      t.equal(response.statusCode, 201, 'Returns 201 Created');
                      const body = response.json();
                      t.type(body.program_exercise_id, 'number', 'Returns program_exercise_id');
                --------^
                      t.ok(body.volume_warning === null || typeof body.volume_warning === 'string', 'Returns volume_warning (nullable)');
              diff: |
                --- expected
                +++ actual
                @@ -1,1 +1,1 @@
                -number
                +undefined
              ...
            
            not ok 3 - Returns volume_warning (nullable)
              ---
              at:
                fileName: tests/contract/program-exercises.test.ts
                lineNumber: 148
                columnNumber: 9
                typeName: Test
              stack: |
                Test.<anonymous> (tests/contract/program-exercises.test.ts:148:9)
              source: >2
                      const body = response.json();
                      t.type(body.program_exercise_id, 'number', 'Returns program_exercise_id');
                      t.ok(body.volume_warning === null || typeof body.volume_warning === 'string', 'Returns volume_warning (nullable)');
                --------^
              
                      // Store for later tests
              ...
            
            1..3
        not ok 1 - should add exercise to program day (201) # time=45.645ms
          ---
          at:
            fileName: tests/contract/program-exercises.test.ts
            lineNumber: 129
            columnNumber: 13
            typeName: Test
          source: |2
              // T009: Contract test POST /api/program-exercises
              await t.test('T009: POST /api/program-exercises', async (t) => {
                await t.test('should add exercise to program day (201)', async (t) => {
            ------------^
                  const response = await app.inject({
                    method: 'POST',
          ...
        
{"level":30,"time":1759552531756,"pid":46128,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-8","res":{"statusCode":404},"responseTime":1.4804370002821088,"msg":"request completed"}
{"level":30,"time":1759552531805,"pid":46128,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-9","req":{"method":"POST","url":"/api/program-exercises","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
        # Subtest: should allow duplicate exercises for drop sets (201)
            not ok 1 - Returns 201 Created (allows duplicates)
              ---
              compare: ===
              at:
                fileName: tests/contract/program-exercises.test.ts
                lineNumber: 170
                columnNumber: 9
                typeName: Test
              stack: |
                Test.<anonymous> (tests/contract/program-exercises.test.ts:170:9)
              source: >2
                      });
              
                      t.equal(response.statusCode, 201, 'Returns 201 Created (allows duplicates)');
                --------^
                      const body = response.json();
                      t.type(body.program_exercise_id, 'number', 'Returns program_exercise_id');
              diff: |
                --- expected
                +++ actual
                @@ -1,1 +1,1 @@
                -201
                +404
              ...
            
            not ok 2 - Returns program_exercise_id
              ---
              compare: ===
              at:
                fileName: tests/contract/program-exercises.test.ts
                lineNumber: 172
                columnNumber: 9
                typeName: Test
              stack: |
                Test.<anonymous> (tests/contract/program-exercises.test.ts:172:9)
              source: >2
                      t.equal(response.statusCode, 201, 'Returns 201 Created (allows duplicates)');
                      const body = response.json();
                      t.type(body.program_exercise_id, 'number', 'Returns program_exercise_id');
                --------^
                    });
              diff: |
                --- expected
                +++ actual
                @@ -1,1 +1,1 @@
                -number
                +undefined
              ...
            
            1..2
        not ok 2 - should allow duplicate exercises for drop sets (201) # time=13.24ms
          ---
          at:
            fileName: tests/contract/program-exercises.test.ts
            lineNumber: 154
            columnNumber: 13
            typeName: Test
          source: >2
                });
          
                await t.test('should allow duplicate exercises for drop sets (201)', async (t) => {
            ------------^
                  const response = await app.inject({
                    method: 'POST',
          ...
        
{"level":30,"time":1759552531806,"pid":46128,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-9","res":{"statusCode":404},"responseTime":0.9001210001297295,"msg":"request completed"}
{"level":30,"time":1759552531830,"pid":46128,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-a","req":{"method":"POST","url":"/api/program-exercises","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
{"level":30,"time":1759552531830,"pid":46128,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-b","req":{"method":"POST","url":"/api/program-exercises","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
{"level":30,"time":1759552531831,"pid":46128,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-c","req":{"method":"POST","url":"/api/program-exercises","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
{"level":30,"time":1759552531831,"pid":46128,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-d","req":{"method":"POST","url":"/api/program-exercises","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
{"level":30,"time":1759552531831,"pid":46128,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-e","req":{"method":"POST","url":"/api/program-exercises","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
{"level":30,"time":1759552531832,"pid":46128,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-f","req":{"method":"POST","url":"/api/program-exercises","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
        # Subtest: should return volume warning when exceeding MRV (201)
            not ok 1 - Returns volume warning for MRV
              ---
              at:
                fileName: tests/contract/program-exercises.test.ts
                lineNumber: 200
                columnNumber: 9
                typeName: Test
              stack: |
                Test.<anonymous> (tests/contract/program-exercises.test.ts:200:9)
              source: >2
              
                      // Should warn about exceeding MRV (Chest MRV ~22 sets, we've added 4+2+6*4=30 sets)
                      t.ok(body.volume_warning?.includes('MRV') || body.volume_warning?.includes('exceeds'), 'Returns volume warning for MRV');
                --------^
                    });
              ...
            
            1..1
        not ok 3 - should return volume warning when exceeding MRV (201) # time=12.243ms
          ---
          at:
            fileName: tests/contract/program-exercises.test.ts
            lineNumber: 175
            columnNumber: 13
            typeName: Test
          source: >2
                });
          
                await t.test('should return volume warning when exceeding MRV (201)', async (t) => {
            ------------^
                  // Add many exercises to push volume over MRV
                  const promises = [];
          ...
        
{"level":30,"time":1759552531833,"pid":46128,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-a","res":{"statusCode":404},"responseTime":3.0140230003744364,"msg":"request completed"}
{"level":30,"time":1759552531834,"pid":46128,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-b","res":{"statusCode":404},"responseTime":3.2839620001614094,"msg":"request completed"}
{"level":30,"time":1759552531834,"pid":46128,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-c","res":{"statusCode":404},"responseTime":3.650491999927908,"msg":"request completed"}
{"level":30,"time":1759552531835,"pid":46128,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-d","res":{"statusCode":404},"responseTime":4.030989999882877,"msg":"request completed"}
{"level":30,"time":1759552531835,"pid":46128,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-e","res":{"statusCode":404},"responseTime":4.535526999738067,"msg":"request completed"}
{"level":30,"time":1759552531836,"pid":46128,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-f","res":{"statusCode":404},"responseTime":4.058088999707252,"msg":"request completed"}
{"level":30,"time":1759552531846,"pid":46128,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-g","req":{"method":"POST","url":"/api/program-exercises","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
        # Subtest: should accept optional order_index (201)
            not ok 1 - Returns 201 Created
              ---
              compare: ===
              at:
                fileName: tests/contract/program-exercises.test.ts
                lineNumber: 220
                columnNumber: 9
                typeName: Test
              stack: |
                Test.<anonymous> (tests/contract/program-exercises.test.ts:220:9)
              source: >2
                      });
              
                      t.equal(response.statusCode, 201, 'Returns 201 Created');
                --------^
                      const body = response.json();
                      t.type(body.program_exercise_id, 'number', 'Returns program_exercise_id');
              diff: |
                --- expected
                +++ actual
                @@ -1,1 +1,1 @@
                -201
                +404
              ...
            
            not ok 2 - Returns program_exercise_id
              ---
              compare: ===
              at:
                fileName: tests/contract/program-exercises.test.ts
                lineNumber: 222
                columnNumber: 9
                typeName: Test
              stack: |
                Test.<anonymous> (tests/contract/program-exercises.test.ts:222:9)
              source: >2
                      t.equal(response.statusCode, 201, 'Returns 201 Created');
                      const body = response.json();
                      t.type(body.program_exercise_id, 'number', 'Returns program_exercise_id');
                --------^
                    });
              diff: |
                --- expected
                +++ actual
                @@ -1,1 +1,1 @@
                -number
                +undefined
              ...
            
            1..2
        not ok 4 - should accept optional order_index (201) # time=14.426ms
          ---
          at:
            fileName: tests/contract/program-exercises.test.ts
            lineNumber: 203
            columnNumber: 13
            typeName: Test
          source: |2
                });
          
                await t.test('should accept optional order_index (201)', async (t) => {
            ------------^
                  const response = await app.inject({
                    method: 'POST',
          ...
        
{"level":30,"time":1759552531847,"pid":46128,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-g","res":{"statusCode":404},"responseTime":1.0813609999604523,"msg":"request completed"}
{"level":30,"time":1759552531863,"pid":46128,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-h","req":{"method":"POST","url":"/api/program-exercises","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
        # Subtest: should return 400 for invalid target_sets (< 1)
            ok 1 - Returns 400 Bad Request
            ok 2 - Returns error message
            1..2
        ok 5 - should return 400 for invalid target_sets (< 1) # time=1.997ms
        
{"level":30,"time":1759552531864,"pid":46128,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-h","res":{"statusCode":400},"responseTime":0.6941569996997714,"msg":"request completed"}
{"level":30,"time":1759552531866,"pid":46128,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-i","req":{"method":"POST","url":"/api/program-exercises","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
        # Subtest: should return 400 for invalid target_sets (> 10)
            ok 1 - Returns 400 Bad Request
            ok 2 - Returns error message
            1..2
        ok 6 - should return 400 for invalid target_sets (> 10) # time=1.791ms
        
{"level":30,"time":1759552531867,"pid":46128,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-i","res":{"statusCode":400},"responseTime":0.5994529998861253,"msg":"request completed"}
{"level":30,"time":1759552531869,"pid":46128,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-j","req":{"method":"POST","url":"/api/program-exercises","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
        # Subtest: should return 400 for invalid target_rep_range format
            ok 1 - Returns 400 Bad Request
            ok 2 - Returns error message
            1..2
        ok 7 - should return 400 for invalid target_rep_range format # time=1.641ms
        
{"level":30,"time":1759552531869,"pid":46128,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-j","res":{"statusCode":400},"responseTime":0.683332999702543,"msg":"request completed"}
{"level":30,"time":1759552531871,"pid":46128,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-k","req":{"method":"POST","url":"/api/program-exercises","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
        # Subtest: should return 400 for invalid target_rir (< 0)
            ok 1 - Returns 400 Bad Request
            ok 2 - Returns error message
            1..2
        ok 8 - should return 400 for invalid target_rir (< 0) # time=4.221ms
        
{"level":30,"time":1759552531874,"pid":46128,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-k","res":{"statusCode":400},"responseTime":3.1426019999198616,"msg":"request completed"}
{"level":30,"time":1759552531876,"pid":46128,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-l","req":{"method":"POST","url":"/api/program-exercises","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
        # Subtest: should return 400 for invalid target_rir (> 4)
            ok 1 - Returns 400 Bad Request
            ok 2 - Returns error message
            1..2
        ok 9 - should return 400 for invalid target_rir (> 4) # time=1.82ms
        
        # Subtest: should return 400 for missing required fields
            ok 1 - Returns 400 Bad Request
            ok 2 - Returns error message
{"level":30,"time":1759552531877,"pid":46128,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-l","res":{"statusCode":400},"responseTime":0.6971609997563064,"msg":"request completed"}
{"level":30,"time":1759552531879,"pid":46128,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-m","req":{"method":"POST","url":"/api/program-exercises","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
            1..2
        ok 10 - should return 400 for missing required fields # time=1.677ms
        
{"level":30,"time":1759552531880,"pid":46128,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-m","res":{"statusCode":400},"responseTime":0.5727719999849796,"msg":"request completed"}
{"level":30,"time":1759552531881,"pid":46128,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-n","req":{"method":"POST","url":"/api/program-exercises","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
        # Subtest: should return 404 for non-existent program_day_id
            ok 1 - Returns 404 Not Found
            ok 2 - Returns error message
            1..2
        ok 11 - should return 404 for non-existent program_day_id # time=1.959ms
        
{"level":30,"time":1759552531882,"pid":46128,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-n","res":{"statusCode":404},"responseTime":0.8540260000154376,"msg":"request completed"}
{"level":30,"time":1759552531884,"pid":46128,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-o","req":{"method":"POST","url":"/api/program-exercises","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
        # Subtest: should return 404 for non-existent exercise_id
            ok 1 - Returns 404 Not Found
            ok 2 - Returns error message
            1..2
        ok 12 - should return 404 for non-existent exercise_id # time=1.565ms
        
{"level":30,"time":1759552531885,"pid":46128,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-o","res":{"statusCode":404},"responseTime":0.5995220001786947,"msg":"request completed"}
{"level":30,"time":1759552531886,"pid":46128,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-p","req":{"method":"POST","url":"/api/program-exercises","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
        # Subtest: should return 401 without authentication
            ok 1 - Returns 401 Unauthorized
            1..1
        ok 13 - should return 401 without authentication # time=1.503ms
        
        1..13
    not ok 1 - T009: POST /api/program-exercises # time=135.912ms
      ---
      at:
        fileName: tests/contract/program-exercises.test.ts
        lineNumber: 128
        columnNumber: 11
        typeName: Test
      source: |2
      
          // T009: Contract test POST /api/program-exercises
          await t.test('T009: POST /api/program-exercises', async (t) => {
        ----------^
            await t.test('should add exercise to program day (201)', async (t) => {
              const response = await app.inject({
      ...
    
    # Subtest: T010: PATCH /api/program-exercises/:id
        # Subtest: should update target_sets (200)
            not ok 1 - Returns 200 OK
              ---
              compare: ===
              at:
                fileName: tests/contract/program-exercises.test.ts
                lineNumber: 421
                columnNumber: 9
                typeName: Test
              stack: |
                Test.<anonymous> (tests/contract/program-exercises.test.ts:421:9)
              source: |2
                      });
              
                      t.equal(response.statusCode, 200, 'Returns 200 OK');
                --------^
                      const body = response.json();
                      t.equal(body.updated, true, 'Returns updated=true');
{"level":30,"time":1759552531887,"pid":46128,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-p","res":{"statusCode":401},"responseTime":0.8628960000351071,"msg":"request completed"}
{"level":30,"time":1759552531891,"pid":46128,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-q","req":{"method":"PATCH","url":"/api/program-exercises/undefined","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
              diff: |
                --- expected
                +++ actual
                @@ -1,1 +1,1 @@
                -200
                +404
              ...
            
            not ok 2 - Returns updated=true
              ---
              compare: ===
              at:
                fileName: tests/contract/program-exercises.test.ts
                lineNumber: 423
                columnNumber: 9
                typeName: Test
              stack: |
                Test.<anonymous> (tests/contract/program-exercises.test.ts:423:9)
              source: >2
                      t.equal(response.statusCode, 200, 'Returns 200 OK');
                      const body = response.json();
                      t.equal(body.updated, true, 'Returns updated=true');
                --------^
                      t.ok(body.volume_warning === null || typeof body.volume_warning === 'string', 'Returns volume_warning (nullable)');
                    });
              diff: |
                --- expected
                +++ actual
                @@ -1,1 +1,1 @@
                -true
                +undefined
              ...
            
            not ok 3 - Returns volume_warning (nullable)
              ---
              at:
                fileName: tests/contract/program-exercises.test.ts
                lineNumber: 424
                columnNumber: 9
                typeName: Test
              stack: |
                Test.<anonymous> (tests/contract/program-exercises.test.ts:424:9)
              source: >2
                      const body = response.json();
                      t.equal(body.updated, true, 'Returns updated=true');
                      t.ok(body.volume_warning === null || typeof body.volume_warning === 'string', 'Returns volume_warning (nullable)');
                --------^
                    });
              ...
            
            1..3
        not ok 1 - should update target_sets (200) # time=14.467ms
          ---
          at:
            fileName: tests/contract/program-exercises.test.ts
            lineNumber: 409
            columnNumber: 13
            typeName: Test
          source: |2
              // T010: Contract test PATCH /api/program-exercises/:id
              await t.test('T010: PATCH /api/program-exercises/:id', async (t) => {
                await t.test('should update target_sets (200)', async (t) => {
            ------------^
                  const response = await app.inject({
                    method: 'PATCH',
          ...
        
{"level":30,"time":1759552531892,"pid":46128,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-q","res":{"statusCode":404},"responseTime":1.03233200032264,"msg":"request completed"}
{"level":30,"time":1759552531909,"pid":46128,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-r","req":{"method":"PATCH","url":"/api/program-exercises/undefined","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
        # Subtest: should update target_rep_range (200)
            not ok 1 - Returns 200 OK
              ---
              compare: ===
              at:
                fileName: tests/contract/program-exercises.test.ts
                lineNumber: 439
                columnNumber: 9
                typeName: Test
              stack: |
                Test.<anonymous> (tests/contract/program-exercises.test.ts:439:9)
              source: |2
                      });
              
                      t.equal(response.statusCode, 200, 'Returns 200 OK');
                --------^
                      const body = response.json();
                      t.equal(body.updated, true, 'Returns updated=true');
              diff: |
                --- expected
                +++ actual
                @@ -1,1 +1,1 @@
                -200
                +404
              ...
            
            not ok 2 - Returns updated=true
              ---
              compare: ===
              at:
                fileName: tests/contract/program-exercises.test.ts
                lineNumber: 441
                columnNumber: 9
                typeName: Test
              stack: |
                Test.<anonymous> (tests/contract/program-exercises.test.ts:441:9)
              source: |2
                      t.equal(response.statusCode, 200, 'Returns 200 OK');
                      const body = response.json();
                      t.equal(body.updated, true, 'Returns updated=true');
                --------^
                    });
              diff: |
                --- expected
                +++ actual
                @@ -1,1 +1,1 @@
                -true
                +undefined
              ...
            
            1..2
        not ok 2 - should update target_rep_range (200) # time=10.217ms
          ---
          at:
            fileName: tests/contract/program-exercises.test.ts
            lineNumber: 427
            columnNumber: 13
            typeName: Test
          source: |2
                });
          
                await t.test('should update target_rep_range (200)', async (t) => {
            ------------^
                  const response = await app.inject({
                    method: 'PATCH',
          ...
        
{"level":30,"time":1759552531910,"pid":46128,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-r","res":{"statusCode":404},"responseTime":0.7957080001942813,"msg":"request completed"}
{"level":30,"time":1759552531922,"pid":46128,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-s","req":{"method":"PATCH","url":"/api/program-exercises/undefined","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
        # Subtest: should update target_rir (200)
            not ok 1 - Returns 200 OK
              ---
              compare: ===
              at:
                fileName: tests/contract/program-exercises.test.ts
                lineNumber: 456
                columnNumber: 9
                typeName: Test
              stack: |
                Test.<anonymous> (tests/contract/program-exercises.test.ts:456:9)
              source: |2
                      });
              
                      t.equal(response.statusCode, 200, 'Returns 200 OK');
                --------^
                      const body = response.json();
                      t.equal(body.updated, true, 'Returns updated=true');
              diff: |
                --- expected
                +++ actual
                @@ -1,1 +1,1 @@
                -200
                +404
              ...
            
            not ok 2 - Returns updated=true
              ---
              compare: ===
              at:
                fileName: tests/contract/program-exercises.test.ts
                lineNumber: 458
                columnNumber: 9
                typeName: Test
              stack: |
                Test.<anonymous> (tests/contract/program-exercises.test.ts:458:9)
              source: |2
                      t.equal(response.statusCode, 200, 'Returns 200 OK');
                      const body = response.json();
                      t.equal(body.updated, true, 'Returns updated=true');
                --------^
                    });
              diff: |
                --- expected
                +++ actual
                @@ -1,1 +1,1 @@
                -true
                +undefined
              ...
            
            1..2
        not ok 3 - should update target_rir (200) # time=8.942ms
          ---
          at:
            fileName: tests/contract/program-exercises.test.ts
            lineNumber: 444
            columnNumber: 13
            typeName: Test
          source: |2
                });
          
                await t.test('should update target_rir (200)', async (t) => {
            ------------^
                  const response = await app.inject({
                    method: 'PATCH',
          ...
        
{"level":30,"time":1759552531923,"pid":46128,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-s","res":{"statusCode":404},"responseTime":0.6582590001635253,"msg":"request completed"}
{"level":30,"time":1759552531933,"pid":46128,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-t","req":{"method":"PATCH","url":"/api/program-exercises/undefined","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
        # Subtest: should update multiple fields at once (200)
            not ok 1 - Returns 200 OK
              ---
              compare: ===
              at:
                fileName: tests/contract/program-exercises.test.ts
                lineNumber: 475
                columnNumber: 9
                typeName: Test
              stack: |
                Test.<anonymous> (tests/contract/program-exercises.test.ts:475:9)
              source: |2
                      });
              
                      t.equal(response.statusCode, 200, 'Returns 200 OK');
                --------^
                      const body = response.json();
                      t.equal(body.updated, true, 'Returns updated=true');
              diff: |
                --- expected
                +++ actual
                @@ -1,1 +1,1 @@
                -200
                +404
              ...
            
            not ok 2 - Returns updated=true
              ---
              compare: ===
              at:
                fileName: tests/contract/program-exercises.test.ts
                lineNumber: 477
                columnNumber: 9
                typeName: Test
              stack: |
                Test.<anonymous> (tests/contract/program-exercises.test.ts:477:9)
              source: |2
                      t.equal(response.statusCode, 200, 'Returns 200 OK');
                      const body = response.json();
                      t.equal(body.updated, true, 'Returns updated=true');
                --------^
                    });
              diff: |
                --- expected
                +++ actual
                @@ -1,1 +1,1 @@
                -true
                +undefined
              ...
            
            1..2
        not ok 4 - should update multiple fields at once (200) # time=9.036ms
          ---
          at:
            fileName: tests/contract/program-exercises.test.ts
            lineNumber: 461
            columnNumber: 13
            typeName: Test
          source: |2
                });
          
                await t.test('should update multiple fields at once (200)', async (t) => {
            ------------^
                  const response = await app.inject({
                    method: 'PATCH',
          ...
        
{"level":30,"time":1759552531934,"pid":46128,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-t","res":{"statusCode":404},"responseTime":0.6864049998112023,"msg":"request completed"}
{"level":30,"time":1759552531946,"pid":46128,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-u","req":{"method":"PATCH","url":"/api/program-exercises/undefined","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
        # Subtest: should return 400 for invalid target_sets
            not ok 1 - Returns 400 Bad Request
              ---
              compare: ===
              at:
                fileName: tests/contract/program-exercises.test.ts
                lineNumber: 492
                columnNumber: 9
                typeName: Test
              stack: |
                Test.<anonymous> (tests/contract/program-exercises.test.ts:492:9)
              source: |2
                      });
              
                      t.equal(response.statusCode, 400, 'Returns 400 Bad Request');
                --------^
                      const body = response.json();
                      t.ok(body.error, 'Returns error message');
              diff: |
                --- expected
                +++ actual
                @@ -1,1 +1,1 @@
                -400
                +404
              ...
            
            ok 2 - Returns error message
            1..2
        not ok 5 - should return 400 for invalid target_sets # time=5.891ms
          ---
          at:
            fileName: tests/contract/program-exercises.test.ts
            lineNumber: 480
            columnNumber: 13
            typeName: Test
          source: |2
                });
          
                await t.test('should return 400 for invalid target_sets', async (t) => {
            ------------^
                  const response = await app.inject({
                    method: 'PATCH',
          ...
        
{"level":30,"time":1759552531946,"pid":46128,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-u","res":{"statusCode":404},"responseTime":0.7146909995935857,"msg":"request completed"}
{"level":30,"time":1759552531955,"pid":46128,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-v","req":{"method":"PATCH","url":"/api/program-exercises/undefined","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
        # Subtest: should return 400 for invalid target_rep_range format
            not ok 1 - Returns 400 Bad Request
              ---
              compare: ===
              at:
                fileName: tests/contract/program-exercises.test.ts
                lineNumber: 509
                columnNumber: 9
                typeName: Test
              stack: |
                Test.<anonymous> (tests/contract/program-exercises.test.ts:509:9)
              source: |2
                      });
              
                      t.equal(response.statusCode, 400, 'Returns 400 Bad Request');
                --------^
                      const body = response.json();
                      t.ok(body.error, 'Returns error message');
              diff: |
                --- expected
                +++ actual
                @@ -1,1 +1,1 @@
                -400
                +404
              ...
            
            ok 2 - Returns error message
            1..2
        not ok 6 - should return 400 for invalid target_rep_range format # time=9.603ms
          ---
          at:
            fileName: tests/contract/program-exercises.test.ts
            lineNumber: 497
            columnNumber: 13
            typeName: Test
          source: >2
                });
          
                await t.test('should return 400 for invalid target_rep_range format', async (t) => {
            ------------^
                  const response = await app.inject({
                    method: 'PATCH',
          ...
        
{"level":30,"time":1759552531955,"pid":46128,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-v","res":{"statusCode":404},"responseTime":0.8654799996875226,"msg":"request completed"}
{"level":30,"time":1759552531967,"pid":46128,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-w","req":{"method":"PATCH","url":"/api/program-exercises/undefined","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
        # Subtest: should return 400 for invalid target_rir
            not ok 1 - Returns 400 Bad Request
              ---
              compare: ===
              at:
                fileName: tests/contract/program-exercises.test.ts
                lineNumber: 526
                columnNumber: 9
                typeName: Test
              stack: |
                Test.<anonymous> (tests/contract/program-exercises.test.ts:526:9)
              source: |2
                      });
              
                      t.equal(response.statusCode, 400, 'Returns 400 Bad Request');
                --------^
                      const body = response.json();
                      t.ok(body.error, 'Returns error message');
              diff: |
                --- expected
                +++ actual
                @@ -1,1 +1,1 @@
                -400
                +404
              ...
            
            ok 2 - Returns error message
            1..2
        not ok 7 - should return 400 for invalid target_rir # time=6.149ms
          ---
          at:
            fileName: tests/contract/program-exercises.test.ts
            lineNumber: 514
            columnNumber: 13
            typeName: Test
          source: |2
                });
          
                await t.test('should return 400 for invalid target_rir', async (t) => {
            ------------^
                  const response = await app.inject({
                    method: 'PATCH',
          ...
        
{"level":30,"time":1759552531967,"pid":46128,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-w","res":{"statusCode":404},"responseTime":0.8165910001844168,"msg":"request completed"}
{"level":30,"time":1759552531975,"pid":46128,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-x","req":{"method":"PATCH","url":"/api/program-exercises/99999","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
        # Subtest: should return 404 for non-existent program_exercise_id
            ok 1 - Returns 404 Not Found
            ok 2 - Returns error message
            1..2
        ok 8 - should return 404 for non-existent program_exercise_id # time=2.198ms
        
{"level":30,"time":1759552531976,"pid":46128,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-x","res":{"statusCode":404},"responseTime":0.8863620003685355,"msg":"request completed"}
{"level":30,"time":1759552531978,"pid":46128,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-y","req":{"method":"PATCH","url":"/api/program-exercises/undefined","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
        # Subtest: should return 401 without authentication
            ok 1 - Returns 401 Unauthorized
            1..1
        ok 9 - should return 401 without authentication # time=1.423ms
        
        1..9
    not ok 2 - T010: PATCH /api/program-exercises/:id # time=89.857ms
      ---
      at:
        fileName: tests/contract/program-exercises.test.ts
        lineNumber: 408
        columnNumber: 11
        typeName: Test
      source: |2
      
          // T010: Contract test PATCH /api/program-exercises/:id
          await t.test('T010: PATCH /api/program-exercises/:id', async (t) => {
        ----------^
            await t.test('should update target_sets (200)', async (t) => {
              const response = await app.inject({
      ...
    
{"level":30,"time":1759552531979,"pid":46128,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-y","res":{"statusCode":401},"responseTime":0.4840040002018213,"msg":"request completed"}
{"level":30,"time":1759552531983,"pid":46128,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-z","req":{"method":"PUT","url":"/api/program-exercises/undefined/swap","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
    # Subtest: T012: PUT /api/program-exercises/:id/swap
        # Subtest: should swap exercise with compatible alternative (200)
            not ok 1 - Returns 200 OK
              ---
              compare: ===
              at:
                fileName: tests/contract/program-exercises.test.ts
                lineNumber: 575
                columnNumber: 9
                typeName: Test
              stack: |
                Test.<anonymous> (tests/contract/program-exercises.test.ts:575:9)
              source: |2
                      });
              
                      t.equal(response.statusCode, 200, 'Returns 200 OK');
                --------^
                      const body = response.json();
                      t.equal(body.swapped, true, 'Returns swapped=true');
              diff: |
                --- expected
                +++ actual
                @@ -1,1 +1,1 @@
                -200
                +404
              ...
            
            not ok 2 - Returns swapped=true
              ---
              compare: ===
              at:
                fileName: tests/contract/program-exercises.test.ts
                lineNumber: 577
                columnNumber: 9
                typeName: Test
              stack: |
                Test.<anonymous> (tests/contract/program-exercises.test.ts:577:9)
              source: |2
                      t.equal(response.statusCode, 200, 'Returns 200 OK');
                      const body = response.json();
                      t.equal(body.swapped, true, 'Returns swapped=true');
                --------^
                      t.type(body.old_exercise_name, 'string', 'Returns old_exercise_name');
                      t.type(body.new_exercise_name, 'string', 'Returns new_exercise_name');
              diff: |
                --- expected
                +++ actual
                @@ -1,1 +1,1 @@
                -true
                +undefined
              ...
            
            not ok 3 - Returns old_exercise_name
              ---
              compare: ===
              at:
                fileName: tests/contract/program-exercises.test.ts
                lineNumber: 578
                columnNumber: 9
                typeName: Test
              stack: |
                Test.<anonymous> (tests/contract/program-exercises.test.ts:578:9)
              source: >2
                      const body = response.json();
                      t.equal(body.swapped, true, 'Returns swapped=true');
                      t.type(body.old_exercise_name, 'string', 'Returns old_exercise_name');
                --------^
                      t.type(body.new_exercise_name, 'string', 'Returns new_exercise_name');
                      t.not(body.old_exercise_name, body.new_exercise_name, 'Exercise names are different');
              diff: |
                --- expected
                +++ actual
                @@ -1,1 +1,1 @@
                -string
                +undefined
              ...
            
            not ok 4 - Returns new_exercise_name
              ---
              compare: ===
              at:
                fileName: tests/contract/program-exercises.test.ts
                lineNumber: 579
                columnNumber: 9
                typeName: Test
              stack: |
                Test.<anonymous> (tests/contract/program-exercises.test.ts:579:9)
              source: >2
                      t.equal(body.swapped, true, 'Returns swapped=true');
                      t.type(body.old_exercise_name, 'string', 'Returns old_exercise_name');
                      t.type(body.new_exercise_name, 'string', 'Returns new_exercise_name');
                --------^
                      t.not(body.old_exercise_name, body.new_exercise_name, 'Exercise names are different');
                    });
              diff: |
                --- expected
                +++ actual
                @@ -1,1 +1,1 @@
                -string
                +undefined
              ...
            
            not ok 5 - Exercise names are different
              ---
              compare: "!=="
              at:
                fileName: tests/contract/program-exercises.test.ts
                lineNumber: 580
                columnNumber: 9
                typeName: Test
              stack: |
                Test.<anonymous> (tests/contract/program-exercises.test.ts:580:9)
              source: >2
                      t.type(body.old_exercise_name, 'string', 'Returns old_exercise_name');
                      t.type(body.new_exercise_name, 'string', 'Returns new_exercise_name');
                      t.not(body.old_exercise_name, body.new_exercise_name, 'Exercise names are different');
                --------^
                    });
              ...
            
            1..5
        not ok 1 - should swap exercise with compatible alternative (200) # time=15.937ms
          ---
          at:
            fileName: tests/contract/program-exercises.test.ts
            lineNumber: 563
            columnNumber: 13
            typeName: Test
          source: >2
              // T012: Contract test PUT /api/program-exercises/:id/swap
              await t.test('T012: PUT /api/program-exercises/:id/swap', async (t) => {
                await t.test('should swap exercise with compatible alternative (200)', async (t) => {
            ------------^
                  const response = await app.inject({
                    method: 'PUT',
          ...
        
{"level":30,"time":1759552531984,"pid":46128,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-z","res":{"statusCode":404},"responseTime":0.8187549998983741,"msg":"request completed"}
{"level":30,"time":1759552532002,"pid":46128,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-10","req":{"method":"PUT","url":"/api/program-exercises/undefined/swap","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
        # Subtest: should return 400 for incompatible muscle groups
            not ok 1 - Returns 400 Bad Request
              ---
              compare: ===
              at:
                fileName: tests/contract/program-exercises.test.ts
                lineNumber: 595
                columnNumber: 9
                typeName: Test
              stack: |
                Test.<anonymous> (tests/contract/program-exercises.test.ts:595:9)
              source: |2
                      });
              
                      t.equal(response.statusCode, 400, 'Returns 400 Bad Request');
                --------^
                      const body = response.json();
                      t.ok(body.error, 'Returns error message');
              diff: |
                --- expected
                +++ actual
                @@ -1,1 +1,1 @@
                -400
                +404
              ...
            
            ok 2 - Returns error message
            not ok 3 - Error mentions incompatibility
              ---
              at:
                fileName: tests/contract/program-exercises.test.ts
                lineNumber: 598
                columnNumber: 9
                typeName: Test
              stack: |
                Test.<anonymous> (tests/contract/program-exercises.test.ts:598:9)
              source: >2
                      const body = response.json();
                      t.ok(body.error, 'Returns error message');
                      t.ok(body.error.includes('incompatible') || body.error.includes('muscle'), 'Error mentions incompatibility');
                --------^
                    });
              ...
            
            1..3
        not ok 2 - should return 400 for incompatible muscle groups # time=7.179ms
          ---
          at:
            fileName: tests/contract/program-exercises.test.ts
            lineNumber: 583
            columnNumber: 13
            typeName: Test
          source: >2
                });
          
                await t.test('should return 400 for incompatible muscle groups', async (t) => {
            ------------^
                  const response = await app.inject({
                    method: 'PUT',
          ...
        
{"level":30,"time":1759552532003,"pid":46128,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-10","res":{"statusCode":404},"responseTime":1.2476540002971888,"msg":"request completed"}
{"level":30,"time":1759552532012,"pid":46128,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-11","req":{"method":"PUT","url":"/api/program-exercises/undefined/swap","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
        # Subtest: should return 400 for missing new_exercise_id
            ok 1 - Returns 400 Bad Request
            ok 2 - Returns error message
            1..2
        ok 3 - should return 400 for missing new_exercise_id # time=1.798ms
        
{"level":30,"time":1759552532012,"pid":46128,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-11","res":{"statusCode":400},"responseTime":0.6825639996677637,"msg":"request completed"}
{"level":30,"time":1759552532014,"pid":46128,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-12","req":{"method":"PUT","url":"/api/program-exercises/99999/swap","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
        # Subtest: should return 404 for non-existent program_exercise_id
            ok 1 - Returns 404 Not Found
            ok 2 - Returns error message
            1..2
        ok 4 - should return 404 for non-existent program_exercise_id # time=2.059ms
        
{"level":30,"time":1759552532015,"pid":46128,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-12","res":{"statusCode":404},"responseTime":0.8721839999780059,"msg":"request completed"}
{"level":30,"time":1759552532017,"pid":46128,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-13","req":{"method":"PUT","url":"/api/program-exercises/undefined/swap","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
        # Subtest: should return 404 for non-existent new_exercise_id
            ok 1 - Returns 404 Not Found
            ok 2 - Returns error message
            1..2
        ok 5 - should return 404 for non-existent new_exercise_id # time=1.686ms
        
{"level":30,"time":1759552532018,"pid":46128,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-13","res":{"statusCode":404},"responseTime":0.7020499999634922,"msg":"request completed"}
{"level":30,"time":1759552532019,"pid":46128,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-14","req":{"method":"PUT","url":"/api/program-exercises/undefined/swap","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
        # Subtest: should return 401 without authentication
            ok 1 - Returns 401 Unauthorized
            1..1
        ok 6 - should return 401 without authentication # time=1.26ms
        
        1..6
    not ok 3 - T012: PUT /api/program-exercises/:id/swap # time=38.366ms
      ---
      at:
        fileName: tests/contract/program-exercises.test.ts
        lineNumber: 562
        columnNumber: 11
        typeName: Test
      source: >2
      
          // T012: Contract test PUT /api/program-exercises/:id/swap
          await t.test('T012: PUT /api/program-exercises/:id/swap', async (t) => {
        ----------^
            await t.test('should swap exercise with compatible alternative (200)', async (t) => {
              const response = await app.inject({
      ...
    
{"level":30,"time":1759552532020,"pid":46128,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-14","res":{"statusCode":401},"responseTime":0.48581899981945753,"msg":"request completed"}
{"level":30,"time":1759552532024,"pid":46128,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-15","req":{"method":"POST","url":"/api/program-exercises","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
{"level":30,"time":1759552532025,"pid":46128,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-15","res":{"statusCode":404},"responseTime":1.562780000269413,"msg":"request completed"}
{"level":30,"time":1759552532026,"pid":46128,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-16","req":{"method":"POST","url":"/api/program-exercises","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
{"level":30,"time":1759552532027,"pid":46128,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-16","res":{"statusCode":404},"responseTime":0.7587609998881817,"msg":"request completed"}
{"level":30,"time":1759552532027,"pid":46128,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-17","req":{"method":"POST","url":"/api/program-exercises","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
{"level":30,"time":1759552532028,"pid":46128,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-17","res":{"statusCode":404},"responseTime":0.7253069998696446,"msg":"request completed"}
{"level":30,"time":1759552532029,"pid":46128,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-18","req":{"method":"PATCH","url":"/api/program-exercises/batch-reorder","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
    # Subtest: T013: PATCH /api/program-exercises/batch-reorder
        # Subtest: should reorder exercises (200)
            not ok 1 - Returns 200 OK
              ---
              compare: ===
              at:
                fileName: tests/contract/program-exercises.test.ts
                lineNumber: 737
                columnNumber: 9
                typeName: Test
              stack: |
                Test.<anonymous> (tests/contract/program-exercises.test.ts:737:9)
              source: >2
                      });
              
                      t.equal(response.statusCode, 200, 'Returns 200 OK');
                --------^
                      const body = response.json();
                      t.ok(body.reordered === true || body.success === true, 'Returns success indicator');
              diff: |
                --- expected
                +++ actual
                @@ -1,1 +1,1 @@
                -200
                +404
              ...
            
            not ok 2 - Returns success indicator
              ---
              at:
                fileName: tests/contract/program-exercises.test.ts
                lineNumber: 739
                columnNumber: 9
                typeName: Test
              stack: |
                Test.<anonymous> (tests/contract/program-exercises.test.ts:739:9)
              source: >2
                      t.equal(response.statusCode, 200, 'Returns 200 OK');
                      const body = response.json();
                      t.ok(body.reordered === true || body.success === true, 'Returns success indicator');
                --------^
                    });
              ...
            
            1..2
        not ok 1 - should reorder exercises (200) # time=7.45ms
          ---
          at:
            fileName: tests/contract/program-exercises.test.ts
            lineNumber: 720
            columnNumber: 13
            typeName: Test
          source: |2
                });
          
                await t.test('should reorder exercises (200)', async (t) => {
            ------------^
                  const response = await app.inject({
                    method: 'PATCH',
          ...
        
{"level":30,"time":1759552532030,"pid":46128,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-18","res":{"statusCode":404},"responseTime":0.9916840000078082,"msg":"request completed"}
{"level":30,"time":1759552532038,"pid":46128,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-19","req":{"method":"PATCH","url":"/api/program-exercises/batch-reorder","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
        # Subtest: should handle partial reordering (200)
            not ok 1 - Returns 200 OK
              ---
              compare: ===
              at:
                fileName: tests/contract/program-exercises.test.ts
                lineNumber: 758
                columnNumber: 9
                typeName: Test
              stack: |
                Test.<anonymous> (tests/contract/program-exercises.test.ts:758:9)
              source: |2
                      });
              
                      t.equal(response.statusCode, 200, 'Returns 200 OK');
                --------^
                    });
              diff: |
                --- expected
                +++ actual
                @@ -1,1 +1,1 @@
                -200
                +404
              ...
            
            1..1
        not ok 2 - should handle partial reordering (200) # time=6.13ms
          ---
          at:
            fileName: tests/contract/program-exercises.test.ts
            lineNumber: 742
            columnNumber: 13
            typeName: Test
          source: |2
                });
          
                await t.test('should handle partial reordering (200)', async (t) => {
            ------------^
                  const response = await app.inject({
                    method: 'PATCH',
          ...
        
{"level":30,"time":1759552532040,"pid":46128,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-19","res":{"statusCode":404},"responseTime":2.187235999852419,"msg":"request completed"}
{"level":30,"time":1759552532047,"pid":46128,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-1a","req":{"method":"PATCH","url":"/api/program-exercises/batch-reorder","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
        # Subtest: should return 400 for missing program_day_id
            ok 1 - Returns 400 Bad Request
            ok 2 - Returns error message
            1..2
        ok 3 - should return 400 for missing program_day_id # time=1.651ms
        
{"level":30,"time":1759552532047,"pid":46128,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-1a","res":{"statusCode":400},"responseTime":0.6486210003495216,"msg":"request completed"}
{"level":30,"time":1759552532049,"pid":46128,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-1b","req":{"method":"PATCH","url":"/api/program-exercises/batch-reorder","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
        # Subtest: should return 400 for missing exercise_order
            ok 1 - Returns 400 Bad Request
            ok 2 - Returns error message
            1..2
        ok 4 - should return 400 for missing exercise_order # time=1.313ms
        
{"level":30,"time":1759552532049,"pid":46128,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-1b","res":{"statusCode":400},"responseTime":0.5048859999515116,"msg":"request completed"}
{"level":30,"time":1759552532051,"pid":46128,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-1c","req":{"method":"PATCH","url":"/api/program-exercises/batch-reorder","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
        # Subtest: should return 400 for invalid exercise_order format
            ok 1 - Returns 400 Bad Request
            ok 2 - Returns error message
            1..2
        ok 5 - should return 400 for invalid exercise_order format # time=1.083ms
        
{"level":30,"time":1759552532051,"pid":46128,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-1c","res":{"statusCode":400},"responseTime":0.446148999966681,"msg":"request completed"}
{"level":30,"time":1759552532052,"pid":46128,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-1d","req":{"method":"PATCH","url":"/api/program-exercises/batch-reorder","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
        # Subtest: should return 400 for negative order_index
            not ok 1 - Returns 400 Bad Request
              ---
              compare: ===
              at:
                fileName: tests/contract/program-exercises.test.ts
                lineNumber: 830
                columnNumber: 9
                typeName: Test
              stack: |
                Test.<anonymous> (tests/contract/program-exercises.test.ts:830:9)
              source: |2
                      });
              
                      t.equal(response.statusCode, 400, 'Returns 400 Bad Request');
                --------^
                      const body = response.json();
                      t.ok(body.error, 'Returns error message');
              diff: |
                --- expected
                +++ actual
                @@ -1,1 +1,1 @@
                -400
                +404
              ...
            
            ok 2 - Returns error message
            1..2
        not ok 6 - should return 400 for negative order_index # time=3.604ms
          ---
          at:
            fileName: tests/contract/program-exercises.test.ts
            lineNumber: 815
            columnNumber: 13
            typeName: Test
          source: |2
                });
          
                await t.test('should return 400 for negative order_index', async (t) => {
            ------------^
                  const response = await app.inject({
                    method: 'PATCH',
          ...
        
{"level":30,"time":1759552532053,"pid":46128,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-1d","res":{"statusCode":404},"responseTime":0.5975659997202456,"msg":"request completed"}
{"level":30,"time":1759552532057,"pid":46128,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-1e","req":{"method":"PATCH","url":"/api/program-exercises/batch-reorder","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
        # Subtest: should return 401 without authentication
            ok 1 - Returns 401 Unauthorized
            1..1
        ok 7 - should return 401 without authentication # time=0.971ms
        
        1..7
    not ok 4 - T013: PATCH /api/program-exercises/batch-reorder # time=35.308ms
      ---
      at:
        fileName: tests/contract/program-exercises.test.ts
        lineNumber: 664
        columnNumber: 11
        typeName: Test
      source: >2
      
          // T013: Contract test PATCH /api/program-exercises/batch-reorder
          await t.test('T013: PATCH /api/program-exercises/batch-reorder', async (t) => {
        ----------^
            // Create additional program exercises for reordering tests
            let exerciseId1: number;
      ...
    
{"level":30,"time":1759552532058,"pid":46128,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-1e","res":{"statusCode":401},"responseTime":0.35640200041234493,"msg":"request completed"}
{"level":30,"time":1759552532061,"pid":46128,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-1f","req":{"method":"POST","url":"/api/program-exercises","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
    # Subtest: T011: DELETE /api/program-exercises/:id
        # Subtest: should delete program exercise (200)
            not ok 1 - Returns 200 OK
              ---
              compare: ===
              at:
                fileName: tests/contract/program-exercises.test.ts
                lineNumber: 884
                columnNumber: 9
                typeName: Test
              stack: |
                Test.<anonymous> (tests/contract/program-exercises.test.ts:884:9)
              source: |2
                      });
              
                      t.equal(response.statusCode, 200, 'Returns 200 OK');
                --------^
                      const body = response.json();
                      t.equal(body.deleted, true, 'Returns deleted=true');
              diff: |
                --- expected
                +++ actual
                @@ -1,1 +1,1 @@
                -200
                +404
              ...
            
            not ok 2 - Returns deleted=true
              ---
              compare: ===
              at:
                fileName: tests/contract/program-exercises.test.ts
                lineNumber: 886
                columnNumber: 9
                typeName: Test
              stack: |
                Test.<anonymous> (tests/contract/program-exercises.test.ts:886:9)
              source: >2
                      t.equal(response.statusCode, 200, 'Returns 200 OK');
                      const body = response.json();
                      t.equal(body.deleted, true, 'Returns deleted=true');
                --------^
                      t.ok(body.volume_warning === null || typeof body.volume_warning === 'string', 'Returns volume_warning (nullable)');
                    });
              diff: |
                --- expected
                +++ actual
                @@ -1,1 +1,1 @@
                -true
                +undefined
              ...
            
            not ok 3 - Returns volume_warning (nullable)
              ---
              at:
                fileName: tests/contract/program-exercises.test.ts
                lineNumber: 887
                columnNumber: 9
                typeName: Test
              stack: |
                Test.<anonymous> (tests/contract/program-exercises.test.ts:887:9)
              source: >2
                      const body = response.json();
                      t.equal(body.deleted, true, 'Returns deleted=true');
                      t.ok(body.volume_warning === null || typeof body.volume_warning === 'string', 'Returns volume_warning (nullable)');
                --------^
                    });
              ...
            
            1..3
        not ok 1 - should delete program exercise (200) # time=9.47ms
          ---
          at:
            fileName: tests/contract/program-exercises.test.ts
            lineNumber: 875
            columnNumber: 13
            typeName: Test
          source: |2
                });
          
                await t.test('should delete program exercise (200)', async (t) => {
            ------------^
                  const response = await app.inject({
                    method: 'DELETE',
          ...
        
{"level":30,"time":1759552532062,"pid":46128,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-1f","res":{"statusCode":404},"responseTime":1.1336019998416305,"msg":"request completed"}
{"level":30,"time":1759552532062,"pid":46128,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-1g","req":{"method":"DELETE","url":"/api/program-exercises/undefined","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
{"level":30,"time":1759552532063,"pid":46128,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-1g","res":{"statusCode":404},"responseTime":0.4974830001592636,"msg":"request completed"}
{"level":30,"time":1759552532074,"pid":46128,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-1h","req":{"method":"POST","url":"/api/program-days","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
{"level":30,"time":1759552532074,"pid":46128,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-1h","msg":"Route POST:/api/program-days not found"}
{"level":30,"time":1759552532075,"pid":46128,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-1h","res":{"statusCode":404},"responseTime":0.384269000031054,"msg":"request completed"}
{"level":30,"time":1759552532075,"pid":46128,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-1i","req":{"method":"POST","url":"/api/program-exercises","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
{"level":30,"time":1759552532075,"pid":46128,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-1i","res":{"statusCode":400},"responseTime":0.46493700006976724,"msg":"request completed"}
{"level":30,"time":1759552532075,"pid":46128,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-1j","req":{"method":"POST","url":"/api/program-exercises","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
        # Subtest: should return volume warning when dropping below MEV (200)
            not ok 1 - Returns 200 OK
              ---
              compare: ===
              at:
                fileName: tests/contract/program-exercises.test.ts
                lineNumber: 947
                columnNumber: 9
                typeName: Test
              stack: |
                Test.<anonymous> (tests/contract/program-exercises.test.ts:947:9)
              source: >2
                      });
              
                      t.equal(deleteResponse.statusCode, 200, 'Returns 200 OK');
                --------^
                      const body = deleteResponse.json();
                      t.ok(body.volume_warning?.includes('MEV') || body.volume_warning?.includes('below'), 'Returns volume warning for MEV');
              diff: |
                --- expected
                +++ actual
                @@ -1,1 +1,1 @@
                -200
                +404
              ...
            
            not ok 2 - Returns volume warning for MEV
              ---
              at:
                fileName: tests/contract/program-exercises.test.ts
                lineNumber: 949
                columnNumber: 9
                typeName: Test
              stack: |
                Test.<anonymous> (tests/contract/program-exercises.test.ts:949:9)
              source: >2
                      t.equal(deleteResponse.statusCode, 200, 'Returns 200 OK');
                      const body = deleteResponse.json();
                      t.ok(body.volume_warning?.includes('MEV') || body.volume_warning?.includes('below'), 'Returns volume warning for MEV');
                --------^
                    });
              ...
            
            1..2
        not ok 2 - should return volume warning when dropping below MEV (200) # time=8.796ms
          ---
          at:
            fileName: tests/contract/program-exercises.test.ts
            lineNumber: 890
            columnNumber: 13
            typeName: Test
          source: >2
                });
          
                await t.test('should return volume warning when dropping below MEV (200)', async (t) => {
            ------------^
                  // First, create a minimal program day with only MEV volume
                  const minimalDayResponse = await app.inject({
          ...
        
        # Subtest: should return 404 for non-existent program_exercise_id
            ok 1 - Returns 404 Not Found
            ok 2 - Returns error message
            1..2
        ok 3 - should return 404 for non-existent program_exercise_id # time=1.947ms
        
        # Subtest: should return 404 when deleting already deleted exercise
            ok 1 - Returns 404 Not Found
            ok 2 - Returns error message
            1..2
        ok 4 - should return 404 when deleting already deleted exercise # time=1.698ms
        
        # Subtest: should return 401 without authentication
            ok 1 - Returns 401 Unauthorized
            1..1
        ok 5 - should return 401 without authentication # time=1.06ms
        
        1..5
    not ok 5 - T011: DELETE /api/program-exercises/:id # time=31.814ms
      ---
      at:
        fileName: tests/contract/program-exercises.test.ts
        lineNumber: 853
        columnNumber: 11
        typeName: Test
      source: |2
          // T011: Contract test DELETE /api/program-exercises/:id
          // (Placed last to avoid deleting test data needed by other tests)
          await t.test('T011: DELETE /api/program-exercises/:id', async (t) => {
        ----------^
            let deletableExerciseId: number;
      ...
    
    1..5
not ok 1 - Program Exercise Editor Endpoints Contract Tests # time=1095.005ms
  ---
  at:
    fileName: tests/contract/program-exercises.test.ts
    lineNumber: 20
    columnNumber: 5
    isToplevel: true
  source: |2
     */
  
    tap.test('Program Exercise Editor Endpoints Contract Tests', async (t) => {
    ----^
      const app = await buildApp();
  ...

{"level":30,"time":1759552532076,"pid":46128,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-1j","res":{"statusCode":400},"responseTime":0.39900599978864193,"msg":"request completed"}
{"level":30,"time":1759552532076,"pid":46128,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-1k","req":{"method":"DELETE","url":"/api/program-exercises/undefined","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
{"level":30,"time":1759552532076,"pid":46128,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-1k","res":{"statusCode":404},"responseTime":0.34725299989804626,"msg":"request completed"}
{"level":30,"time":1759552532085,"pid":46128,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-1l","req":{"method":"DELETE","url":"/api/program-exercises/99999","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
{"level":30,"time":1759552532086,"pid":46128,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-1l","res":{"statusCode":404},"responseTime":0.6879420001059771,"msg":"request completed"}
{"level":30,"time":1759552532088,"pid":46128,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-1m","req":{"method":"DELETE","url":"/api/program-exercises/undefined","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
{"level":30,"time":1759552532089,"pid":46128,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-1m","res":{"statusCode":404},"responseTime":0.6106970002874732,"msg":"request completed"}
{"level":30,"time":1759552532091,"pid":46128,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-1n","req":{"method":"DELETE","url":"/api/program-exercises/1","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
{"level":30,"time":1759552532091,"pid":46128,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-1n","res":{"statusCode":401},"responseTime":0.2975259996019304,"msg":"request completed"}
1..1
Database connection closed
