TAP version 14
# Subtest: Program Exercise Editor Endpoints Contract Tests
{"level":30,"time":1759599556529,"pid":209993,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-1","req":{"method":"POST","url":"/api/auth/register","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
{"level":30,"time":1759599556766,"pid":209993,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-1","res":{"statusCode":201},"responseTime":236.33975700102746,"msg":"request completed"}
{"level":30,"time":1759599556767,"pid":209993,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-2","req":{"method":"POST","url":"/api/auth/login","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
{"level":30,"time":1759599556984,"pid":209993,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-2","res":{"statusCode":200},"responseTime":216.86787899956107,"msg":"request completed"}
{"level":30,"time":1759599556985,"pid":209993,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-3","req":{"method":"GET","url":"/api/exercises?muscle_group=chest&equipment=barbell","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
{"level":30,"time":1759599556989,"pid":209993,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-3","res":{"statusCode":200},"responseTime":4.2157569993287325,"msg":"request completed"}
{"level":30,"time":1759599556990,"pid":209993,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-4","req":{"method":"GET","url":"/api/exercises?muscle_group=chest&equipment=dumbbell","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
{"level":30,"time":1759599556991,"pid":209993,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-4","res":{"statusCode":200},"responseTime":0.8653330001980066,"msg":"request completed"}
{"level":30,"time":1759599556991,"pid":209993,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-5","req":{"method":"GET","url":"/api/exercises?muscle_group=back","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
{"level":30,"time":1759599556992,"pid":209993,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-5","res":{"statusCode":200},"responseTime":0.8089009989053011,"msg":"request completed"}
{"level":30,"time":1759599556992,"pid":209993,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-6","req":{"method":"POST","url":"/api/programs","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
{"level":30,"time":1759599556993,"pid":209993,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-6","res":{"statusCode":409},"responseTime":1.186532000079751,"msg":"request completed"}
{"level":30,"time":1759599556994,"pid":209993,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-7","req":{"method":"POST","url":"/api/program-days","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
{"level":30,"time":1759599556994,"pid":209993,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-7","msg":"Route POST:/api/program-days not found"}
{"level":30,"time":1759599556995,"pid":209993,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-7","res":{"statusCode":404},"responseTime":0.6976450011134148,"msg":"request completed"}
{"level":30,"time":1759599556997,"pid":209993,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-8","req":{"method":"POST","url":"/api/program-exercises","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
    # Subtest: T009: POST /api/program-exercises
        # Subtest: should add exercise to program day (201)
            not ok 1 - Returns 201 Created
              ---
              compare: ===
              at:
                fileName: tests/contract/program-exercises.test.ts
                lineNumber: 145
                columnNumber: 9
                typeName: Test
              stack: |
                Test.<anonymous> (tests/contract/program-exercises.test.ts:145:9)
              source: >2
                      });
              
                      t.equal(response.statusCode, 201, 'Returns 201 Created');
                --------^
                      const body = response.json();
                      t.type(body.program_exercise_id, 'number', 'Returns program_exercise_id');
              diff: |
                --- expected
                +++ actual
                @@ -1,1 +1,1 @@
                -201
                +404
              ...
            
            not ok 2 - Returns program_exercise_id
              ---
              compare: ===
              at:
                fileName: tests/contract/program-exercises.test.ts
                lineNumber: 147
                columnNumber: 9
                typeName: Test
              stack: |
                Test.<anonymous> (tests/contract/program-exercises.test.ts:147:9)
              source: >2
                      t.equal(response.statusCode, 201, 'Returns 201 Created');
                      const body = response.json();
                      t.type(body.program_exercise_id, 'number', 'Returns program_exercise_id');
                --------^
                      t.ok(body.volume_warning === null || typeof body.volume_warning === 'string', 'Returns volume_warning (nullable)');
              diff: |
                --- expected
                +++ actual
                @@ -1,1 +1,1 @@
                -number
                +undefined
              ...
            
            not ok 3 - Returns volume_warning (nullable)
              ---
              at:
                fileName: tests/contract/program-exercises.test.ts
                lineNumber: 148
                columnNumber: 9
                typeName: Test
              stack: |
                Test.<anonymous> (tests/contract/program-exercises.test.ts:148:9)
              source: >2
                      const body = response.json();
                      t.type(body.program_exercise_id, 'number', 'Returns program_exercise_id');
                      t.ok(body.volume_warning === null || typeof body.volume_warning === 'string', 'Returns volume_warning (nullable)');
                --------^
              
                      // Store for later tests
              ...
            
            1..3
        not ok 1 - should add exercise to program day (201) # time=46.788ms
          ---
          at:
            fileName: tests/contract/program-exercises.test.ts
            lineNumber: 129
            columnNumber: 13
            typeName: Test
          source: |2
              // T009: Contract test POST /api/program-exercises
              await t.test('T009: POST /api/program-exercises', async (t) => {
                await t.test('should add exercise to program day (201)', async (t) => {
            ------------^
                  const response = await app.inject({
                    method: 'POST',
          ...
        
{"level":30,"time":1759599556999,"pid":209993,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-8","res":{"statusCode":404},"responseTime":1.6149390004575253,"msg":"request completed"}
{"level":30,"time":1759599557049,"pid":209993,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-9","req":{"method":"POST","url":"/api/program-exercises","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
        # Subtest: should allow duplicate exercises for drop sets (201)
            not ok 1 - Returns 201 Created (allows duplicates)
              ---
              compare: ===
              at:
                fileName: tests/contract/program-exercises.test.ts
                lineNumber: 170
                columnNumber: 9
                typeName: Test
              stack: |
                Test.<anonymous> (tests/contract/program-exercises.test.ts:170:9)
              source: >2
                      });
              
                      t.equal(response.statusCode, 201, 'Returns 201 Created (allows duplicates)');
                --------^
                      const body = response.json();
                      t.type(body.program_exercise_id, 'number', 'Returns program_exercise_id');
              diff: |
                --- expected
                +++ actual
                @@ -1,1 +1,1 @@
                -201
                +404
              ...
            
            not ok 2 - Returns program_exercise_id
              ---
              compare: ===
              at:
                fileName: tests/contract/program-exercises.test.ts
                lineNumber: 172
                columnNumber: 9
                typeName: Test
              stack: |
                Test.<anonymous> (tests/contract/program-exercises.test.ts:172:9)
              source: >2
                      t.equal(response.statusCode, 201, 'Returns 201 Created (allows duplicates)');
                      const body = response.json();
                      t.type(body.program_exercise_id, 'number', 'Returns program_exercise_id');
                --------^
                    });
              diff: |
                --- expected
                +++ actual
                @@ -1,1 +1,1 @@
                -number
                +undefined
              ...
            
            1..2
        not ok 2 - should allow duplicate exercises for drop sets (201) # time=14.865ms
          ---
          at:
            fileName: tests/contract/program-exercises.test.ts
            lineNumber: 154
            columnNumber: 13
            typeName: Test
          source: >2
                });
          
                await t.test('should allow duplicate exercises for drop sets (201)', async (t) => {
            ------------^
                  const response = await app.inject({
                    method: 'POST',
          ...
        
{"level":30,"time":1759599557050,"pid":209993,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-9","res":{"statusCode":404},"responseTime":1.3117580004036427,"msg":"request completed"}
{"level":30,"time":1759599557069,"pid":209993,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-a","req":{"method":"POST","url":"/api/program-exercises","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
{"level":30,"time":1759599557069,"pid":209993,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-b","req":{"method":"POST","url":"/api/program-exercises","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
{"level":30,"time":1759599557069,"pid":209993,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-c","req":{"method":"POST","url":"/api/program-exercises","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
{"level":30,"time":1759599557069,"pid":209993,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-d","req":{"method":"POST","url":"/api/program-exercises","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
{"level":30,"time":1759599557069,"pid":209993,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-e","req":{"method":"POST","url":"/api/program-exercises","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
{"level":30,"time":1759599557069,"pid":209993,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-f","req":{"method":"POST","url":"/api/program-exercises","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
        # Subtest: should return volume warning when exceeding MRV (201)
            not ok 1 - Returns volume warning for MRV
              ---
              at:
                fileName: tests/contract/program-exercises.test.ts
                lineNumber: 200
                columnNumber: 9
                typeName: Test
              stack: |
                Test.<anonymous> (tests/contract/program-exercises.test.ts:200:9)
              source: >2
              
                      // Should warn about exceeding MRV (Chest MRV ~22 sets, we've added 4+2+6*4=30 sets)
                      t.ok(body.volume_warning?.includes('MRV') || body.volume_warning?.includes('exceeds'), 'Returns volume warning for MRV');
                --------^
                    });
              ...
            
            1..1
        not ok 3 - should return volume warning when exceeding MRV (201) # time=11.417ms
          ---
          at:
            fileName: tests/contract/program-exercises.test.ts
            lineNumber: 175
            columnNumber: 13
            typeName: Test
          source: >2
                });
          
                await t.test('should return volume warning when exceeding MRV (201)', async (t) => {
            ------------^
                  // Add many exercises to push volume over MRV
                  const promises = [];
          ...
        
{"level":30,"time":1759599557071,"pid":209993,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-a","res":{"statusCode":404},"responseTime":2.0682779997587204,"msg":"request completed"}
{"level":30,"time":1759599557071,"pid":209993,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-b","res":{"statusCode":404},"responseTime":2.423979999497533,"msg":"request completed"}
{"level":30,"time":1759599557072,"pid":209993,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-c","res":{"statusCode":404},"responseTime":2.8490340001881123,"msg":"request completed"}
{"level":30,"time":1759599557072,"pid":209993,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-d","res":{"statusCode":404},"responseTime":3.110310001298785,"msg":"request completed"}
{"level":30,"time":1759599557073,"pid":209993,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-e","res":{"statusCode":404},"responseTime":3.3823419995605946,"msg":"request completed"}
{"level":30,"time":1759599557073,"pid":209993,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-f","res":{"statusCode":404},"responseTime":3.6413829997181892,"msg":"request completed"}
{"level":30,"time":1759599557088,"pid":209993,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-g","req":{"method":"POST","url":"/api/program-exercises","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
        # Subtest: should accept optional order_index (201)
            not ok 1 - Returns 201 Created
              ---
              compare: ===
              at:
                fileName: tests/contract/program-exercises.test.ts
                lineNumber: 220
                columnNumber: 9
                typeName: Test
              stack: |
                Test.<anonymous> (tests/contract/program-exercises.test.ts:220:9)
              source: >2
                      });
              
                      t.equal(response.statusCode, 201, 'Returns 201 Created');
                --------^
                      const body = response.json();
                      t.type(body.program_exercise_id, 'number', 'Returns program_exercise_id');
              diff: |
                --- expected
                +++ actual
                @@ -1,1 +1,1 @@
                -201
                +404
              ...
            
            not ok 2 - Returns program_exercise_id
              ---
              compare: ===
              at:
                fileName: tests/contract/program-exercises.test.ts
                lineNumber: 222
                columnNumber: 9
                typeName: Test
              stack: |
                Test.<anonymous> (tests/contract/program-exercises.test.ts:222:9)
              source: >2
                      t.equal(response.statusCode, 201, 'Returns 201 Created');
                      const body = response.json();
                      t.type(body.program_exercise_id, 'number', 'Returns program_exercise_id');
                --------^
                    });
              diff: |
                --- expected
                +++ actual
                @@ -1,1 +1,1 @@
                -number
                +undefined
              ...
            
            1..2
        not ok 4 - should accept optional order_index (201) # time=26.03ms
          ---
          at:
            fileName: tests/contract/program-exercises.test.ts
            lineNumber: 203
            columnNumber: 13
            typeName: Test
          source: |2
                });
          
                await t.test('should accept optional order_index (201)', async (t) => {
            ------------^
                  const response = await app.inject({
                    method: 'POST',
          ...
        
{"level":30,"time":1759599557089,"pid":209993,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-g","res":{"statusCode":404},"responseTime":1.3559679985046387,"msg":"request completed"}
{"level":30,"time":1759599557115,"pid":209993,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-h","req":{"method":"POST","url":"/api/program-exercises","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
        # Subtest: should return 400 for invalid target_sets (< 1)
            ok 1 - Returns 400 Bad Request
            ok 2 - Returns error message
            1..2
        ok 5 - should return 400 for invalid target_sets (< 1) # time=2.275ms
        
{"level":30,"time":1759599557116,"pid":209993,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-h","res":{"statusCode":400},"responseTime":0.9137329999357462,"msg":"request completed"}
{"level":30,"time":1759599557118,"pid":209993,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-i","req":{"method":"POST","url":"/api/program-exercises","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
        # Subtest: should return 400 for invalid target_sets (> 10)
            ok 1 - Returns 400 Bad Request
            ok 2 - Returns error message
            1..2
        ok 6 - should return 400 for invalid target_sets (> 10) # time=2.196ms
        
{"level":30,"time":1759599557119,"pid":209993,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-i","res":{"statusCode":400},"responseTime":0.7579869981855154,"msg":"request completed"}
{"level":30,"time":1759599557123,"pid":209993,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-j","req":{"method":"POST","url":"/api/program-exercises","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
        # Subtest: should return 400 for invalid target_rep_range format
            ok 1 - Returns 400 Bad Request
            ok 2 - Returns error message
            1..2
        ok 7 - should return 400 for invalid target_rep_range format # time=2.239ms
        
{"level":30,"time":1759599557124,"pid":209993,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-j","res":{"statusCode":400},"responseTime":0.8950850013643503,"msg":"request completed"}
{"level":30,"time":1759599557126,"pid":209993,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-k","req":{"method":"POST","url":"/api/program-exercises","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
        # Subtest: should return 400 for invalid target_rir (< 0)
            ok 1 - Returns 400 Bad Request
            ok 2 - Returns error message
            1..2
        ok 8 - should return 400 for invalid target_rir (< 0) # time=2.189ms
        
{"level":30,"time":1759599557127,"pid":209993,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-k","res":{"statusCode":400},"responseTime":0.5876439996063709,"msg":"request completed"}
{"level":30,"time":1759599557129,"pid":209993,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-l","req":{"method":"POST","url":"/api/program-exercises","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
        # Subtest: should return 400 for invalid target_rir (> 4)
            ok 1 - Returns 400 Bad Request
            ok 2 - Returns error message
            1..2
        ok 9 - should return 400 for invalid target_rir (> 4) # time=2.145ms
        
        # Subtest: should return 400 for missing required fields
            ok 1 - Returns 400 Bad Request
            ok 2 - Returns error message
            1..2
        ok 10 - should return 400 for missing required fields # time=2.017ms
        
{"level":30,"time":1759599557130,"pid":209993,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-l","res":{"statusCode":400},"responseTime":0.7507940009236336,"msg":"request completed"}
{"level":30,"time":1759599557132,"pid":209993,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-m","req":{"method":"POST","url":"/api/program-exercises","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
        # Subtest: should return 404 for non-existent program_day_id
            ok 1 - Returns 404 Not Found
            ok 2 - Returns error message
            1..2
        ok 11 - should return 404 for non-existent program_day_id # time=2.343ms
        
{"level":30,"time":1759599557133,"pid":209993,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-m","res":{"statusCode":400},"responseTime":0.7496060002595186,"msg":"request completed"}
{"level":30,"time":1759599557135,"pid":209993,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-n","req":{"method":"POST","url":"/api/program-exercises","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
{"level":30,"time":1759599557136,"pid":209993,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-n","res":{"statusCode":404},"responseTime":0.9172949995845556,"msg":"request completed"}
{"level":30,"time":1759599557138,"pid":209993,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-o","req":{"method":"POST","url":"/api/program-exercises","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
        # Subtest: should return 404 for non-existent exercise_id
            ok 1 - Returns 404 Not Found
            ok 2 - Returns error message
            1..2
        ok 12 - should return 404 for non-existent exercise_id # time=2.052ms
        
{"level":30,"time":1759599557139,"pid":209993,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-o","res":{"statusCode":404},"responseTime":0.8857269994914532,"msg":"request completed"}
{"level":30,"time":1759599557142,"pid":209993,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-p","req":{"method":"POST","url":"/api/program-exercises","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
        # Subtest: should return 401 without authentication
            ok 1 - Returns 401 Unauthorized
            1..1
        ok 13 - should return 401 without authentication # time=2.246ms
        
        1..13
    not ok 1 - T009: POST /api/program-exercises # time=148.702ms
      ---
      at:
        fileName: tests/contract/program-exercises.test.ts
        lineNumber: 128
        columnNumber: 11
        typeName: Test
      source: |2
      
          // T009: Contract test POST /api/program-exercises
          await t.test('T009: POST /api/program-exercises', async (t) => {
        ----------^
            await t.test('should add exercise to program day (201)', async (t) => {
              const response = await app.inject({
      ...
    
{"level":30,"time":1759599557143,"pid":209993,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-p","res":{"statusCode":401},"responseTime":1.1692820005118847,"msg":"request completed"}
{"level":30,"time":1759599557148,"pid":209993,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-q","req":{"method":"PATCH","url":"/api/program-exercises/undefined","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
    # Subtest: T010: PATCH /api/program-exercises/:id
        # Subtest: should update target_sets (200)
            not ok 1 - Returns 200 OK
              ---
              compare: ===
              at:
                fileName: tests/contract/program-exercises.test.ts
                lineNumber: 421
                columnNumber: 9
                typeName: Test
              stack: |
                Test.<anonymous> (tests/contract/program-exercises.test.ts:421:9)
              source: |2
                      });
              
                      t.equal(response.statusCode, 200, 'Returns 200 OK');
                --------^
                      const body = response.json();
                      t.equal(body.updated, true, 'Returns updated=true');
              diff: |
                --- expected
                +++ actual
                @@ -1,1 +1,1 @@
                -200
                +404
              ...
            
            not ok 2 - Returns updated=true
              ---
              compare: ===
              at:
                fileName: tests/contract/program-exercises.test.ts
                lineNumber: 423
                columnNumber: 9
                typeName: Test
              stack: |
                Test.<anonymous> (tests/contract/program-exercises.test.ts:423:9)
              source: >2
                      t.equal(response.statusCode, 200, 'Returns 200 OK');
                      const body = response.json();
                      t.equal(body.updated, true, 'Returns updated=true');
                --------^
                      t.ok(body.volume_warning === null || typeof body.volume_warning === 'string', 'Returns volume_warning (nullable)');
                    });
              diff: |
                --- expected
                +++ actual
                @@ -1,1 +1,1 @@
                -true
                +undefined
              ...
            
            not ok 3 - Returns volume_warning (nullable)
              ---
              at:
                fileName: tests/contract/program-exercises.test.ts
                lineNumber: 424
                columnNumber: 9
                typeName: Test
              stack: |
                Test.<anonymous> (tests/contract/program-exercises.test.ts:424:9)
              source: >2
                      const body = response.json();
                      t.equal(body.updated, true, 'Returns updated=true');
                      t.ok(body.volume_warning === null || typeof body.volume_warning === 'string', 'Returns volume_warning (nullable)');
                --------^
                    });
              ...
            
            1..3
        not ok 1 - should update target_sets (200) # time=21.18ms
          ---
          at:
            fileName: tests/contract/program-exercises.test.ts
            lineNumber: 409
            columnNumber: 13
            typeName: Test
          source: |2
              // T010: Contract test PATCH /api/program-exercises/:id
              await t.test('T010: PATCH /api/program-exercises/:id', async (t) => {
                await t.test('should update target_sets (200)', async (t) => {
            ------------^
                  const response = await app.inject({
                    method: 'PATCH',
          ...
        
{"level":30,"time":1759599557149,"pid":209993,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-q","res":{"statusCode":404},"responseTime":1.129542000591755,"msg":"request completed"}
{"level":30,"time":1759599557176,"pid":209993,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-r","req":{"method":"PATCH","url":"/api/program-exercises/undefined","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
        # Subtest: should update target_rep_range (200)
            not ok 1 - Returns 200 OK
              ---
              compare: ===
              at:
                fileName: tests/contract/program-exercises.test.ts
                lineNumber: 439
                columnNumber: 9
                typeName: Test
              stack: |
                Test.<anonymous> (tests/contract/program-exercises.test.ts:439:9)
              source: |2
                      });
              
                      t.equal(response.statusCode, 200, 'Returns 200 OK');
                --------^
                      const body = response.json();
                      t.equal(body.updated, true, 'Returns updated=true');
              diff: |
                --- expected
                +++ actual
                @@ -1,1 +1,1 @@
                -200
                +404
              ...
            
            not ok 2 - Returns updated=true
              ---
              compare: ===
              at:
                fileName: tests/contract/program-exercises.test.ts
                lineNumber: 441
                columnNumber: 9
                typeName: Test
              stack: |
                Test.<anonymous> (tests/contract/program-exercises.test.ts:441:9)
              source: |2
                      t.equal(response.statusCode, 200, 'Returns 200 OK');
                      const body = response.json();
                      t.equal(body.updated, true, 'Returns updated=true');
                --------^
                    });
              diff: |
                --- expected
                +++ actual
                @@ -1,1 +1,1 @@
                -true
                +undefined
              ...
            
            1..2
        not ok 2 - should update target_rep_range (200) # time=23.415ms
          ---
          at:
            fileName: tests/contract/program-exercises.test.ts
            lineNumber: 427
            columnNumber: 13
            typeName: Test
          source: |2
                });
          
                await t.test('should update target_rep_range (200)', async (t) => {
            ------------^
                  const response = await app.inject({
                    method: 'PATCH',
          ...
        
{"level":30,"time":1759599557178,"pid":209993,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-r","res":{"statusCode":404},"responseTime":1.2750220000743866,"msg":"request completed"}
{"level":30,"time":1759599557204,"pid":209993,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-s","req":{"method":"PATCH","url":"/api/program-exercises/undefined","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
        # Subtest: should update target_rir (200)
            not ok 1 - Returns 200 OK
              ---
              compare: ===
              at:
                fileName: tests/contract/program-exercises.test.ts
                lineNumber: 456
                columnNumber: 9
                typeName: Test
              stack: |
                Test.<anonymous> (tests/contract/program-exercises.test.ts:456:9)
              source: |2
                      });
              
                      t.equal(response.statusCode, 200, 'Returns 200 OK');
                --------^
                      const body = response.json();
                      t.equal(body.updated, true, 'Returns updated=true');
              diff: |
                --- expected
                +++ actual
                @@ -1,1 +1,1 @@
                -200
                +404
              ...
            
            not ok 2 - Returns updated=true
              ---
              compare: ===
              at:
                fileName: tests/contract/program-exercises.test.ts
                lineNumber: 458
                columnNumber: 9
                typeName: Test
              stack: |
                Test.<anonymous> (tests/contract/program-exercises.test.ts:458:9)
              source: |2
                      t.equal(response.statusCode, 200, 'Returns 200 OK');
                      const body = response.json();
                      t.equal(body.updated, true, 'Returns updated=true');
                --------^
                    });
              diff: |
                --- expected
                +++ actual
                @@ -1,1 +1,1 @@
                -true
                +undefined
              ...
            
            1..2
        not ok 3 - should update target_rir (200) # time=14.851ms
          ---
          at:
            fileName: tests/contract/program-exercises.test.ts
            lineNumber: 444
            columnNumber: 13
            typeName: Test
          source: |2
                });
          
                await t.test('should update target_rir (200)', async (t) => {
            ------------^
                  const response = await app.inject({
                    method: 'PATCH',
          ...
        
{"level":30,"time":1759599557206,"pid":209993,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-s","res":{"statusCode":404},"responseTime":1.0986030008643866,"msg":"request completed"}
{"level":30,"time":1759599557224,"pid":209993,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-t","req":{"method":"PATCH","url":"/api/program-exercises/undefined","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
        # Subtest: should update multiple fields at once (200)
            not ok 1 - Returns 200 OK
              ---
              compare: ===
              at:
                fileName: tests/contract/program-exercises.test.ts
                lineNumber: 475
                columnNumber: 9
                typeName: Test
              stack: |
                Test.<anonymous> (tests/contract/program-exercises.test.ts:475:9)
              source: |2
                      });
              
                      t.equal(response.statusCode, 200, 'Returns 200 OK');
                --------^
                      const body = response.json();
                      t.equal(body.updated, true, 'Returns updated=true');
              diff: |
                --- expected
                +++ actual
                @@ -1,1 +1,1 @@
                -200
                +404
              ...
            
            not ok 2 - Returns updated=true
              ---
              compare: ===
              at:
                fileName: tests/contract/program-exercises.test.ts
                lineNumber: 477
                columnNumber: 9
                typeName: Test
              stack: |
                Test.<anonymous> (tests/contract/program-exercises.test.ts:477:9)
              source: |2
                      t.equal(response.statusCode, 200, 'Returns 200 OK');
                      const body = response.json();
                      t.equal(body.updated, true, 'Returns updated=true');
                --------^
                    });
              diff: |
                --- expected
                +++ actual
                @@ -1,1 +1,1 @@
                -true
                +undefined
              ...
            
            1..2
        not ok 4 - should update multiple fields at once (200) # time=23.326ms
          ---
          at:
            fileName: tests/contract/program-exercises.test.ts
            lineNumber: 461
            columnNumber: 13
            typeName: Test
          source: |2
                });
          
                await t.test('should update multiple fields at once (200)', async (t) => {
            ------------^
                  const response = await app.inject({
                    method: 'PATCH',
          ...
        
{"level":30,"time":1759599557225,"pid":209993,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-t","res":{"statusCode":404},"responseTime":1.330265998840332,"msg":"request completed"}
{"level":30,"time":1759599557253,"pid":209993,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-u","req":{"method":"PATCH","url":"/api/program-exercises/undefined","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
        # Subtest: should return 400 for invalid target_sets
            not ok 1 - Returns 400 Bad Request
              ---
              compare: ===
              at:
                fileName: tests/contract/program-exercises.test.ts
                lineNumber: 492
                columnNumber: 9
                typeName: Test
              stack: |
                Test.<anonymous> (tests/contract/program-exercises.test.ts:492:9)
              source: |2
                      });
              
                      t.equal(response.statusCode, 400, 'Returns 400 Bad Request');
                --------^
                      const body = response.json();
                      t.ok(body.error, 'Returns error message');
              diff: |
                --- expected
                +++ actual
                @@ -1,1 +1,1 @@
                -400
                +404
              ...
            
            ok 2 - Returns error message
            1..2
        not ok 5 - should return 400 for invalid target_sets # time=14.973ms
          ---
          at:
            fileName: tests/contract/program-exercises.test.ts
            lineNumber: 480
            columnNumber: 13
            typeName: Test
          source: |2
                });
          
                await t.test('should return 400 for invalid target_sets', async (t) => {
            ------------^
                  const response = await app.inject({
                    method: 'PATCH',
          ...
        
{"level":30,"time":1759599557254,"pid":209993,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-u","res":{"statusCode":404},"responseTime":1.1889069993048906,"msg":"request completed"}
{"level":30,"time":1759599557277,"pid":209993,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-v","req":{"method":"PATCH","url":"/api/program-exercises/undefined","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
        # Subtest: should return 400 for invalid target_rep_range format
            not ok 1 - Returns 400 Bad Request
              ---
              compare: ===
              at:
                fileName: tests/contract/program-exercises.test.ts
                lineNumber: 509
                columnNumber: 9
                typeName: Test
              stack: |
                Test.<anonymous> (tests/contract/program-exercises.test.ts:509:9)
              source: |2
                      });
              
                      t.equal(response.statusCode, 400, 'Returns 400 Bad Request');
                --------^
                      const body = response.json();
                      t.ok(body.error, 'Returns error message');
              diff: |
                --- expected
                +++ actual
                @@ -1,1 +1,1 @@
                -400
                +404
              ...
            
            ok 2 - Returns error message
            1..2
        not ok 6 - should return 400 for invalid target_rep_range format # time=16.778ms
          ---
          at:
            fileName: tests/contract/program-exercises.test.ts
            lineNumber: 497
            columnNumber: 13
            typeName: Test
          source: >2
                });
          
                await t.test('should return 400 for invalid target_rep_range format', async (t) => {
            ------------^
                  const response = await app.inject({
                    method: 'PATCH',
          ...
        
{"level":30,"time":1759599557282,"pid":209993,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-v","res":{"statusCode":404},"responseTime":4.90837199985981,"msg":"request completed"}
{"level":30,"time":1759599557297,"pid":209993,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-w","req":{"method":"PATCH","url":"/api/program-exercises/undefined","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
        # Subtest: should return 400 for invalid target_rir
            not ok 1 - Returns 400 Bad Request
              ---
              compare: ===
              at:
                fileName: tests/contract/program-exercises.test.ts
                lineNumber: 526
                columnNumber: 9
                typeName: Test
              stack: |
                Test.<anonymous> (tests/contract/program-exercises.test.ts:526:9)
              source: |2
                      });
              
                      t.equal(response.statusCode, 400, 'Returns 400 Bad Request');
                --------^
                      const body = response.json();
                      t.ok(body.error, 'Returns error message');
              diff: |
                --- expected
                +++ actual
                @@ -1,1 +1,1 @@
                -400
                +404
              ...
            
            ok 2 - Returns error message
            1..2
        not ok 7 - should return 400 for invalid target_rir # time=10.766ms
          ---
          at:
            fileName: tests/contract/program-exercises.test.ts
            lineNumber: 514
            columnNumber: 13
            typeName: Test
          source: |2
                });
          
                await t.test('should return 400 for invalid target_rir', async (t) => {
            ------------^
                  const response = await app.inject({
                    method: 'PATCH',
          ...
        
{"level":30,"time":1759599557298,"pid":209993,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-w","res":{"statusCode":404},"responseTime":0.9427169989794493,"msg":"request completed"}
{"level":30,"time":1759599557314,"pid":209993,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-x","req":{"method":"PATCH","url":"/api/program-exercises/99999","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
        # Subtest: should return 404 for non-existent program_exercise_id
            ok 1 - Returns 404 Not Found
            ok 2 - Returns error message
            1..2
        ok 8 - should return 404 for non-existent program_exercise_id # time=4.188ms
        
{"level":30,"time":1759599557316,"pid":209993,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-x","res":{"statusCode":404},"responseTime":1.5057769995182753,"msg":"request completed"}
{"level":30,"time":1759599557319,"pid":209993,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-y","req":{"method":"PATCH","url":"/api/program-exercises/undefined","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
        # Subtest: should return 401 without authentication
            ok 1 - Returns 401 Unauthorized
            1..1
        ok 9 - should return 401 without authentication # time=4.129ms
        
        1..9
    not ok 2 - T010: PATCH /api/program-exercises/:id # time=176.501ms
      ---
      at:
        fileName: tests/contract/program-exercises.test.ts
        lineNumber: 408
        columnNumber: 11
        typeName: Test
      source: |2
      
          // T010: Contract test PATCH /api/program-exercises/:id
          await t.test('T010: PATCH /api/program-exercises/:id', async (t) => {
        ----------^
            await t.test('should update target_sets (200)', async (t) => {
              const response = await app.inject({
      ...
    
{"level":30,"time":1759599557321,"pid":209993,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-y","res":{"statusCode":401},"responseTime":2.0365009997040033,"msg":"request completed"}
{"level":30,"time":1759599557336,"pid":209993,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-z","req":{"method":"PUT","url":"/api/program-exercises/undefined/swap","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
    # Subtest: T012: PUT /api/program-exercises/:id/swap
        # Subtest: should swap exercise with compatible alternative (200)
            not ok 1 - Returns 200 OK
              ---
              compare: ===
              at:
                fileName: tests/contract/program-exercises.test.ts
                lineNumber: 575
                columnNumber: 9
                typeName: Test
              stack: |
                Test.<anonymous> (tests/contract/program-exercises.test.ts:575:9)
              source: |2
                      });
              
                      t.equal(response.statusCode, 200, 'Returns 200 OK');
                --------^
                      const body = response.json();
                      t.equal(body.swapped, true, 'Returns swapped=true');
              diff: |
                --- expected
                +++ actual
                @@ -1,1 +1,1 @@
                -200
                +404
              ...
            
            not ok 2 - Returns swapped=true
              ---
              compare: ===
              at:
                fileName: tests/contract/program-exercises.test.ts
                lineNumber: 577
                columnNumber: 9
                typeName: Test
              stack: |
                Test.<anonymous> (tests/contract/program-exercises.test.ts:577:9)
              source: |2
                      t.equal(response.statusCode, 200, 'Returns 200 OK');
                      const body = response.json();
                      t.equal(body.swapped, true, 'Returns swapped=true');
                --------^
                      t.type(body.old_exercise_name, 'string', 'Returns old_exercise_name');
                      t.type(body.new_exercise_name, 'string', 'Returns new_exercise_name');
              diff: |
                --- expected
                +++ actual
                @@ -1,1 +1,1 @@
                -true
                +undefined
              ...
            
            not ok 3 - Returns old_exercise_name
              ---
              compare: ===
              at:
                fileName: tests/contract/program-exercises.test.ts
                lineNumber: 578
                columnNumber: 9
                typeName: Test
              stack: |
                Test.<anonymous> (tests/contract/program-exercises.test.ts:578:9)
              source: >2
                      const body = response.json();
                      t.equal(body.swapped, true, 'Returns swapped=true');
                      t.type(body.old_exercise_name, 'string', 'Returns old_exercise_name');
                --------^
                      t.type(body.new_exercise_name, 'string', 'Returns new_exercise_name');
                      t.not(body.old_exercise_name, body.new_exercise_name, 'Exercise names are different');
              diff: |
                --- expected
                +++ actual
                @@ -1,1 +1,1 @@
                -string
                +undefined
              ...
            
            not ok 4 - Returns new_exercise_name
              ---
              compare: ===
              at:
                fileName: tests/contract/program-exercises.test.ts
                lineNumber: 579
                columnNumber: 9
                typeName: Test
              stack: |
                Test.<anonymous> (tests/contract/program-exercises.test.ts:579:9)
              source: >2
                      t.equal(body.swapped, true, 'Returns swapped=true');
                      t.type(body.old_exercise_name, 'string', 'Returns old_exercise_name');
                      t.type(body.new_exercise_name, 'string', 'Returns new_exercise_name');
                --------^
                      t.not(body.old_exercise_name, body.new_exercise_name, 'Exercise names are different');
                    });
              diff: |
                --- expected
                +++ actual
                @@ -1,1 +1,1 @@
                -string
                +undefined
              ...
            
            not ok 5 - Exercise names are different
              ---
              compare: "!=="
              at:
                fileName: tests/contract/program-exercises.test.ts
                lineNumber: 580
                columnNumber: 9
                typeName: Test
              stack: |
                Test.<anonymous> (tests/contract/program-exercises.test.ts:580:9)
              source: >2
                      t.type(body.old_exercise_name, 'string', 'Returns old_exercise_name');
                      t.type(body.new_exercise_name, 'string', 'Returns new_exercise_name');
                      t.not(body.old_exercise_name, body.new_exercise_name, 'Exercise names are different');
                --------^
                    });
              ...
            
            1..5
        not ok 1 - should swap exercise with compatible alternative (200) # time=43.083ms
          ---
          at:
            fileName: tests/contract/program-exercises.test.ts
            lineNumber: 563
            columnNumber: 13
            typeName: Test
          source: >2
              // T012: Contract test PUT /api/program-exercises/:id/swap
              await t.test('T012: PUT /api/program-exercises/:id/swap', async (t) => {
                await t.test('should swap exercise with compatible alternative (200)', async (t) => {
            ------------^
                  const response = await app.inject({
                    method: 'PUT',
          ...
        
{"level":30,"time":1759599557338,"pid":209993,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-z","res":{"statusCode":404},"responseTime":2.423631001263857,"msg":"request completed"}
{"level":30,"time":1759599557379,"pid":209993,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-10","req":{"method":"PUT","url":"/api/program-exercises/undefined/swap","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
        # Subtest: should return 400 for incompatible muscle groups
            not ok 1 - Returns 400 Bad Request
              ---
              compare: ===
              at:
                fileName: tests/contract/program-exercises.test.ts
                lineNumber: 595
                columnNumber: 9
                typeName: Test
              stack: |
                Test.<anonymous> (tests/contract/program-exercises.test.ts:595:9)
              source: |2
                      });
              
                      t.equal(response.statusCode, 400, 'Returns 400 Bad Request');
                --------^
                      const body = response.json();
                      t.ok(body.error, 'Returns error message');
              diff: |
                --- expected
                +++ actual
                @@ -1,1 +1,1 @@
                -400
                +404
              ...
            
            ok 2 - Returns error message
            not ok 3 - Error mentions incompatibility
              ---
              at:
                fileName: tests/contract/program-exercises.test.ts
                lineNumber: 598
                columnNumber: 9
                typeName: Test
              stack: |
                Test.<anonymous> (tests/contract/program-exercises.test.ts:598:9)
              source: >2
                      const body = response.json();
                      t.ok(body.error, 'Returns error message');
                      t.ok(body.error.includes('incompatible') || body.error.includes('muscle'), 'Error mentions incompatibility');
                --------^
                    });
              ...
            
            1..3
        not ok 2 - should return 400 for incompatible muscle groups # time=10.63ms
          ---
          at:
            fileName: tests/contract/program-exercises.test.ts
            lineNumber: 583
            columnNumber: 13
            typeName: Test
          source: >2
                });
          
                await t.test('should return 400 for incompatible muscle groups', async (t) => {
            ------------^
                  const response = await app.inject({
                    method: 'PUT',
          ...
        
{"level":30,"time":1759599557380,"pid":209993,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-10","res":{"statusCode":404},"responseTime":0.92204499989748,"msg":"request completed"}
{"level":30,"time":1759599557394,"pid":209993,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-11","req":{"method":"PUT","url":"/api/program-exercises/undefined/swap","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
        # Subtest: should return 400 for missing new_exercise_id
            ok 1 - Returns 400 Bad Request
            ok 2 - Returns error message
            1..2
        ok 3 - should return 400 for missing new_exercise_id # time=2.293ms
        
{"level":30,"time":1759599557395,"pid":209993,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-11","res":{"statusCode":400},"responseTime":0.8738540001213551,"msg":"request completed"}
{"level":30,"time":1759599557398,"pid":209993,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-12","req":{"method":"PUT","url":"/api/program-exercises/99999/swap","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
        # Subtest: should return 404 for non-existent program_exercise_id
            ok 1 - Returns 404 Not Found
            ok 2 - Returns error message
            1..2
        ok 4 - should return 404 for non-existent program_exercise_id # time=3.721ms
        
{"level":30,"time":1759599557399,"pid":209993,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-12","res":{"statusCode":404},"responseTime":1.2856379989534616,"msg":"request completed"}
{"level":30,"time":1759599557403,"pid":209993,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-13","req":{"method":"PUT","url":"/api/program-exercises/undefined/swap","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
        # Subtest: should return 404 for non-existent new_exercise_id
            ok 1 - Returns 404 Not Found
            ok 2 - Returns error message
            1..2
        ok 5 - should return 404 for non-existent new_exercise_id # time=4.102ms
        
{"level":30,"time":1759599557405,"pid":209993,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-13","res":{"statusCode":404},"responseTime":1.5920320004224777,"msg":"request completed"}
{"level":30,"time":1759599557409,"pid":209993,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-14","req":{"method":"PUT","url":"/api/program-exercises/undefined/swap","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
        # Subtest: should return 401 without authentication
            ok 1 - Returns 401 Unauthorized
            1..1
        ok 6 - should return 401 without authentication # time=2.407ms
        
        1..6
    not ok 3 - T012: PUT /api/program-exercises/:id/swap # time=80.152ms
      ---
      at:
        fileName: tests/contract/program-exercises.test.ts
        lineNumber: 562
        columnNumber: 11
        typeName: Test
      source: >2
      
          // T012: Contract test PUT /api/program-exercises/:id/swap
          await t.test('T012: PUT /api/program-exercises/:id/swap', async (t) => {
        ----------^
            await t.test('should swap exercise with compatible alternative (200)', async (t) => {
              const response = await app.inject({
      ...
    
{"level":30,"time":1759599557410,"pid":209993,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-14","res":{"statusCode":401},"responseTime":0.9660439994186163,"msg":"request completed"}
{"level":30,"time":1759599557416,"pid":209993,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-15","req":{"method":"POST","url":"/api/program-exercises","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
{"level":30,"time":1759599557418,"pid":209993,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-15","res":{"statusCode":404},"responseTime":1.7719419989734888,"msg":"request completed"}
{"level":30,"time":1759599557418,"pid":209993,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-16","req":{"method":"POST","url":"/api/program-exercises","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
{"level":30,"time":1759599557419,"pid":209993,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-16","res":{"statusCode":404},"responseTime":0.7923479992896318,"msg":"request completed"}
{"level":30,"time":1759599557420,"pid":209993,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-17","req":{"method":"POST","url":"/api/program-exercises","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
{"level":30,"time":1759599557421,"pid":209993,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-17","res":{"statusCode":404},"responseTime":1.7466599997133017,"msg":"request completed"}
{"level":30,"time":1759599557422,"pid":209993,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-18","req":{"method":"PATCH","url":"/api/program-exercises/batch-reorder","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
    # Subtest: T013: PATCH /api/program-exercises/batch-reorder
        # Subtest: should reorder exercises (200)
            not ok 1 - Returns 200 OK
              ---
              compare: ===
              at:
                fileName: tests/contract/program-exercises.test.ts
                lineNumber: 737
                columnNumber: 9
                typeName: Test
              stack: |
                Test.<anonymous> (tests/contract/program-exercises.test.ts:737:9)
              source: >2
                      });
              
                      t.equal(response.statusCode, 200, 'Returns 200 OK');
                --------^
                      const body = response.json();
                      t.ok(body.reordered === true || body.success === true, 'Returns success indicator');
              diff: |
                --- expected
                +++ actual
                @@ -1,1 +1,1 @@
                -200
                +404
              ...
            
            not ok 2 - Returns success indicator
              ---
              at:
                fileName: tests/contract/program-exercises.test.ts
                lineNumber: 739
                columnNumber: 9
                typeName: Test
              stack: |
                Test.<anonymous> (tests/contract/program-exercises.test.ts:739:9)
              source: >2
                      t.equal(response.statusCode, 200, 'Returns 200 OK');
                      const body = response.json();
                      t.ok(body.reordered === true || body.success === true, 'Returns success indicator');
                --------^
                    });
              ...
            
            1..2
        not ok 1 - should reorder exercises (200) # time=10.532ms
          ---
          at:
            fileName: tests/contract/program-exercises.test.ts
            lineNumber: 720
            columnNumber: 13
            typeName: Test
          source: |2
                });
          
                await t.test('should reorder exercises (200)', async (t) => {
            ------------^
                  const response = await app.inject({
                    method: 'PATCH',
          ...
        
{"level":30,"time":1759599557423,"pid":209993,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-18","res":{"statusCode":404},"responseTime":1.0328819993883371,"msg":"request completed"}
{"level":30,"time":1759599557441,"pid":209993,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-19","req":{"method":"PATCH","url":"/api/program-exercises/batch-reorder","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
        # Subtest: should handle partial reordering (200)
            not ok 1 - Returns 200 OK
              ---
              compare: ===
              at:
                fileName: tests/contract/program-exercises.test.ts
                lineNumber: 758
                columnNumber: 9
                typeName: Test
              stack: |
                Test.<anonymous> (tests/contract/program-exercises.test.ts:758:9)
              source: |2
                      });
              
                      t.equal(response.statusCode, 200, 'Returns 200 OK');
                --------^
                    });
              diff: |
                --- expected
                +++ actual
                @@ -1,1 +1,1 @@
                -200
                +404
              ...
            
            1..1
        not ok 2 - should handle partial reordering (200) # time=8.903ms
          ---
          at:
            fileName: tests/contract/program-exercises.test.ts
            lineNumber: 742
            columnNumber: 13
            typeName: Test
          source: |2
                });
          
                await t.test('should handle partial reordering (200)', async (t) => {
            ------------^
                  const response = await app.inject({
                    method: 'PATCH',
          ...
        
{"level":30,"time":1759599557442,"pid":209993,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-19","res":{"statusCode":404},"responseTime":1.0023619998246431,"msg":"request completed"}
{"level":30,"time":1759599557455,"pid":209993,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-1a","req":{"method":"PATCH","url":"/api/program-exercises/batch-reorder","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
        # Subtest: should return 400 for missing program_day_id
            ok 1 - Returns 400 Bad Request
            ok 2 - Returns error message
            1..2
        ok 3 - should return 400 for missing program_day_id # time=2.995ms
        
{"level":30,"time":1759599557456,"pid":209993,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-1a","res":{"statusCode":400},"responseTime":0.8459169995039701,"msg":"request completed"}
{"level":30,"time":1759599557459,"pid":209993,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-1b","req":{"method":"PATCH","url":"/api/program-exercises/batch-reorder","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
        # Subtest: should return 400 for missing exercise_order
            ok 1 - Returns 400 Bad Request
            ok 2 - Returns error message
            1..2
        ok 4 - should return 400 for missing exercise_order # time=2.6ms
        
{"level":30,"time":1759599557459,"pid":209993,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-1b","res":{"statusCode":400},"responseTime":0.7400369998067617,"msg":"request completed"}
{"level":30,"time":1759599557462,"pid":209993,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-1c","req":{"method":"PATCH","url":"/api/program-exercises/batch-reorder","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
        # Subtest: should return 400 for invalid exercise_order format
            ok 1 - Returns 400 Bad Request
            ok 2 - Returns error message
            1..2
        ok 5 - should return 400 for invalid exercise_order format # time=2.793ms
        
{"level":30,"time":1759599557463,"pid":209993,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-1c","res":{"statusCode":400},"responseTime":1.0346280001103878,"msg":"request completed"}
{"level":30,"time":1759599557466,"pid":209993,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-1d","req":{"method":"PATCH","url":"/api/program-exercises/batch-reorder","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
        # Subtest: should return 400 for negative order_index
            not ok 1 - Returns 400 Bad Request
              ---
              compare: ===
              at:
                fileName: tests/contract/program-exercises.test.ts
                lineNumber: 830
                columnNumber: 9
                typeName: Test
              stack: |
                Test.<anonymous> (tests/contract/program-exercises.test.ts:830:9)
              source: |2
                      });
              
                      t.equal(response.statusCode, 400, 'Returns 400 Bad Request');
                --------^
                      const body = response.json();
                      t.ok(body.error, 'Returns error message');
              diff: |
                --- expected
                +++ actual
                @@ -1,1 +1,1 @@
                -400
                +404
              ...
            
            ok 2 - Returns error message
            1..2
        not ok 6 - should return 400 for negative order_index # time=10.174ms
          ---
          at:
            fileName: tests/contract/program-exercises.test.ts
            lineNumber: 815
            columnNumber: 13
            typeName: Test
          source: |2
                });
          
                await t.test('should return 400 for negative order_index', async (t) => {
            ------------^
                  const response = await app.inject({
                    method: 'PATCH',
          ...
        
{"level":30,"time":1759599557467,"pid":209993,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-1d","res":{"statusCode":404},"responseTime":1.2719479985535145,"msg":"request completed"}
{"level":30,"time":1759599557480,"pid":209993,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-1e","req":{"method":"PATCH","url":"/api/program-exercises/batch-reorder","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
        # Subtest: should return 401 without authentication
            ok 1 - Returns 401 Unauthorized
            1..1
        ok 7 - should return 401 without authentication # time=2.414ms
        
        1..7
    not ok 4 - T013: PATCH /api/program-exercises/batch-reorder # time=67.926ms
      ---
      at:
        fileName: tests/contract/program-exercises.test.ts
        lineNumber: 664
        columnNumber: 11
        typeName: Test
      source: >2
      
          // T013: Contract test PATCH /api/program-exercises/batch-reorder
          await t.test('T013: PATCH /api/program-exercises/batch-reorder', async (t) => {
        ----------^
            // Create additional program exercises for reordering tests
            let exerciseId1: number;
      ...
    
{"level":30,"time":1759599557481,"pid":209993,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-1e","res":{"statusCode":401},"responseTime":0.8054789993911982,"msg":"request completed"}
{"level":30,"time":1759599557493,"pid":209993,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-1f","req":{"method":"POST","url":"/api/program-exercises","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
    # Subtest: T011: DELETE /api/program-exercises/:id
        # Subtest: should delete program exercise (200)
            not ok 1 - Returns 200 OK
              ---
              compare: ===
              at:
                fileName: tests/contract/program-exercises.test.ts
                lineNumber: 884
                columnNumber: 9
                typeName: Test
              stack: |
                Test.<anonymous> (tests/contract/program-exercises.test.ts:884:9)
              source: |2
                      });
              
                      t.equal(response.statusCode, 200, 'Returns 200 OK');
                --------^
                      const body = response.json();
                      t.equal(body.deleted, true, 'Returns deleted=true');
              diff: |
                --- expected
                +++ actual
                @@ -1,1 +1,1 @@
                -200
                +404
              ...
            
            not ok 2 - Returns deleted=true
              ---
              compare: ===
              at:
                fileName: tests/contract/program-exercises.test.ts
                lineNumber: 886
                columnNumber: 9
                typeName: Test
              stack: |
                Test.<anonymous> (tests/contract/program-exercises.test.ts:886:9)
              source: >2
                      t.equal(response.statusCode, 200, 'Returns 200 OK');
                      const body = response.json();
                      t.equal(body.deleted, true, 'Returns deleted=true');
                --------^
                      t.ok(body.volume_warning === null || typeof body.volume_warning === 'string', 'Returns volume_warning (nullable)');
                    });
              diff: |
                --- expected
                +++ actual
                @@ -1,1 +1,1 @@
                -true
                +undefined
              ...
            
            not ok 3 - Returns volume_warning (nullable)
              ---
              at:
                fileName: tests/contract/program-exercises.test.ts
                lineNumber: 887
                columnNumber: 9
                typeName: Test
              stack: |
                Test.<anonymous> (tests/contract/program-exercises.test.ts:887:9)
              source: >2
                      const body = response.json();
                      t.equal(body.deleted, true, 'Returns deleted=true');
                      t.ok(body.volume_warning === null || typeof body.volume_warning === 'string', 'Returns volume_warning (nullable)');
                --------^
                    });
              ...
            
            1..3
        not ok 1 - should delete program exercise (200) # time=17.636ms
          ---
          at:
            fileName: tests/contract/program-exercises.test.ts
            lineNumber: 875
            columnNumber: 13
            typeName: Test
          source: |2
                });
          
                await t.test('should delete program exercise (200)', async (t) => {
            ------------^
                  const response = await app.inject({
                    method: 'DELETE',
          ...
        
{"level":30,"time":1759599557495,"pid":209993,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-1f","res":{"statusCode":404},"responseTime":1.6620819997042418,"msg":"request completed"}
{"level":30,"time":1759599557496,"pid":209993,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-1g","req":{"method":"DELETE","url":"/api/program-exercises/undefined","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
{"level":30,"time":1759599557497,"pid":209993,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-1g","res":{"statusCode":404},"responseTime":0.7539370004087687,"msg":"request completed"}
{"level":30,"time":1759599557517,"pid":209993,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-1h","req":{"method":"POST","url":"/api/program-days","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
        # Subtest: should return volume warning when dropping below MEV (200)
            not ok 1 - Returns 200 OK
              ---
              compare: ===
              at:
                fileName: tests/contract/program-exercises.test.ts
                lineNumber: 947
                columnNumber: 9
                typeName: Test
              stack: |
                Test.<anonymous> (tests/contract/program-exercises.test.ts:947:9)
              source: >2
                      });
              
                      t.equal(deleteResponse.statusCode, 200, 'Returns 200 OK');
                --------^
                      const body = deleteResponse.json();
                      t.ok(body.volume_warning?.includes('MEV') || body.volume_warning?.includes('below'), 'Returns volume warning for MEV');
              diff: |
                --- expected
                +++ actual
                @@ -1,1 +1,1 @@
                -200
                +404
              ...
            
            not ok 2 - Returns volume warning for MEV
              ---
              at:
                fileName: tests/contract/program-exercises.test.ts
                lineNumber: 949
                columnNumber: 9
                typeName: Test
              stack: |
                Test.<anonymous> (tests/contract/program-exercises.test.ts:949:9)
              source: >2
                      t.equal(deleteResponse.statusCode, 200, 'Returns 200 OK');
                      const body = deleteResponse.json();
                      t.ok(body.volume_warning?.includes('MEV') || body.volume_warning?.includes('below'), 'Returns volume warning for MEV');
                --------^
                    });
              ...
            
            1..2
        not ok 2 - should return volume warning when dropping below MEV (200) # time=11.311ms
          ---
          at:
            fileName: tests/contract/program-exercises.test.ts
            lineNumber: 890
            columnNumber: 13
            typeName: Test
          source: >2
                });
          
                await t.test('should return volume warning when dropping below MEV (200)', async (t) => {
            ------------^
                  // First, create a minimal program day with only MEV volume
                  const minimalDayResponse = await app.inject({
          ...
        
        # Subtest: should return 404 for non-existent program_exercise_id
            ok 1 - Returns 404 Not Found
            ok 2 - Returns error message
            1..2
        ok 3 - should return 404 for non-existent program_exercise_id # time=1.341ms
        
        # Subtest: should return 404 when deleting already deleted exercise
            ok 1 - Returns 404 Not Found
            ok 2 - Returns error message
            1..2
        ok 4 - should return 404 when deleting already deleted exercise # time=2.468ms
        
        # Subtest: should return 401 without authentication
            ok 1 - Returns 401 Unauthorized
            1..1
        ok 5 - should return 401 without authentication # time=1.291ms
        
        1..5
    not ok 5 - T011: DELETE /api/program-exercises/:id # time=49.305ms
      ---
      at:
        fileName: tests/contract/program-exercises.test.ts
        lineNumber: 853
        columnNumber: 11
        typeName: Test
      source: |2
          // T011: Contract test DELETE /api/program-exercises/:id
          // (Placed last to avoid deleting test data needed by other tests)
          await t.test('T011: DELETE /api/program-exercises/:id', async (t) => {
        ----------^
            let deletableExerciseId: number;
      ...
    
    1..5
not ok 1 - Program Exercise Editor Endpoints Contract Tests # time=1318.509ms
  ---
  at:
    fileName: tests/contract/program-exercises.test.ts
    lineNumber: 20
    columnNumber: 5
    isToplevel: true
  source: |2
     */
  
    tap.test('Program Exercise Editor Endpoints Contract Tests', async (t) => {
    ----^
      const app = await buildApp();
  ...

{"level":30,"time":1759599557517,"pid":209993,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-1h","msg":"Route POST:/api/program-days not found"}
{"level":30,"time":1759599557517,"pid":209993,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-1h","res":{"statusCode":404},"responseTime":0.5356120001524687,"msg":"request completed"}
{"level":30,"time":1759599557517,"pid":209993,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-1i","req":{"method":"POST","url":"/api/program-exercises","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
{"level":30,"time":1759599557518,"pid":209993,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-1i","res":{"statusCode":400},"responseTime":0.5782159995287657,"msg":"request completed"}
{"level":30,"time":1759599557518,"pid":209993,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-1j","req":{"method":"POST","url":"/api/program-exercises","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
{"level":30,"time":1759599557519,"pid":209993,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-1j","res":{"statusCode":400},"responseTime":0.44132599979639053,"msg":"request completed"}
{"level":30,"time":1759599557519,"pid":209993,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-1k","req":{"method":"DELETE","url":"/api/program-exercises/undefined","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
{"level":30,"time":1759599557520,"pid":209993,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-1k","res":{"statusCode":404},"responseTime":0.8781139999628067,"msg":"request completed"}
{"level":30,"time":1759599557531,"pid":209993,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-1l","req":{"method":"DELETE","url":"/api/program-exercises/99999","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
{"level":30,"time":1759599557531,"pid":209993,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-1l","res":{"statusCode":404},"responseTime":0.503065999597311,"msg":"request completed"}
{"level":30,"time":1759599557534,"pid":209993,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-1m","req":{"method":"DELETE","url":"/api/program-exercises/undefined","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
{"level":30,"time":1759599557535,"pid":209993,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-1m","res":{"statusCode":404},"responseTime":0.8191679995507002,"msg":"request completed"}
{"level":30,"time":1759599557538,"pid":209993,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-1n","req":{"method":"DELETE","url":"/api/program-exercises/1","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
{"level":30,"time":1759599557538,"pid":209993,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-1n","res":{"statusCode":401},"responseTime":0.2890729997307062,"msg":"request completed"}
1..1
Database connection closed
