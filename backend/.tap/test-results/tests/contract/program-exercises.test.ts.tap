TAP version 14
# Subtest: Program Exercise Editor Endpoints Contract Tests
{"level":30,"time":1759594755742,"pid":141253,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-1","req":{"method":"POST","url":"/api/auth/register","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
{"level":30,"time":1759594756092,"pid":141253,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-1","res":{"statusCode":201},"responseTime":348.06338600069284,"msg":"request completed"}
{"level":30,"time":1759594756093,"pid":141253,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-2","req":{"method":"POST","url":"/api/auth/login","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
{"level":30,"time":1759594756436,"pid":141253,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-2","res":{"statusCode":200},"responseTime":342.80411900021136,"msg":"request completed"}
{"level":30,"time":1759594756438,"pid":141253,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-3","req":{"method":"GET","url":"/api/exercises?muscle_group=chest&equipment=barbell","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
{"level":30,"time":1759594756445,"pid":141253,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-3","res":{"statusCode":200},"responseTime":6.974779998883605,"msg":"request completed"}
{"level":30,"time":1759594756446,"pid":141253,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-4","req":{"method":"GET","url":"/api/exercises?muscle_group=chest&equipment=dumbbell","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
{"level":30,"time":1759594756447,"pid":141253,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-4","res":{"statusCode":200},"responseTime":1.344097999855876,"msg":"request completed"}
{"level":30,"time":1759594756448,"pid":141253,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-5","req":{"method":"GET","url":"/api/exercises?muscle_group=back","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
{"level":30,"time":1759594756449,"pid":141253,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-5","res":{"statusCode":200},"responseTime":1.339487999677658,"msg":"request completed"}
{"level":30,"time":1759594756450,"pid":141253,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-6","req":{"method":"POST","url":"/api/programs","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
{"level":30,"time":1759594756451,"pid":141253,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-6","msg":"Route POST:/api/programs not found"}
{"level":30,"time":1759594756451,"pid":141253,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-6","res":{"statusCode":404},"responseTime":0.9888140000402927,"msg":"request completed"}
{"level":30,"time":1759594756452,"pid":141253,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-7","req":{"method":"POST","url":"/api/program-days","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
{"level":30,"time":1759594756452,"pid":141253,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-7","msg":"Route POST:/api/program-days not found"}
{"level":30,"time":1759594756453,"pid":141253,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-7","res":{"statusCode":404},"responseTime":0.6977860014885664,"msg":"request completed"}
{"level":30,"time":1759594756457,"pid":141253,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-8","req":{"method":"POST","url":"/api/program-exercises","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
    # Subtest: T009: POST /api/program-exercises
        # Subtest: should add exercise to program day (201)
            not ok 1 - Returns 201 Created
              ---
              compare: ===
              at:
                fileName: tests/contract/program-exercises.test.ts
                lineNumber: 145
                columnNumber: 9
                typeName: Test
              stack: |
                Test.<anonymous> (tests/contract/program-exercises.test.ts:145:9)
              source: >2
                      });
              
                      t.equal(response.statusCode, 201, 'Returns 201 Created');
                --------^
                      const body = response.json();
                      t.type(body.program_exercise_id, 'number', 'Returns program_exercise_id');
              diff: |
                --- expected
                +++ actual
                @@ -1,1 +1,1 @@
                -201
                +404
              ...
            
            not ok 2 - Returns program_exercise_id
              ---
              compare: ===
              at:
                fileName: tests/contract/program-exercises.test.ts
                lineNumber: 147
                columnNumber: 9
                typeName: Test
              stack: |
                Test.<anonymous> (tests/contract/program-exercises.test.ts:147:9)
              source: >2
                      t.equal(response.statusCode, 201, 'Returns 201 Created');
                      const body = response.json();
                      t.type(body.program_exercise_id, 'number', 'Returns program_exercise_id');
                --------^
                      t.ok(body.volume_warning === null || typeof body.volume_warning === 'string', 'Returns volume_warning (nullable)');
              diff: |
                --- expected
                +++ actual
                @@ -1,1 +1,1 @@
                -number
                +undefined
              ...
            
            not ok 3 - Returns volume_warning (nullable)
              ---
              at:
                fileName: tests/contract/program-exercises.test.ts
                lineNumber: 148
                columnNumber: 9
                typeName: Test
              stack: |
                Test.<anonymous> (tests/contract/program-exercises.test.ts:148:9)
              source: >2
                      const body = response.json();
                      t.type(body.program_exercise_id, 'number', 'Returns program_exercise_id');
                      t.ok(body.volume_warning === null || typeof body.volume_warning === 'string', 'Returns volume_warning (nullable)');
                --------^
              
                      // Store for later tests
              ...
            
            1..3
        not ok 1 - should add exercise to program day (201) # time=82.238ms
          ---
          at:
            fileName: tests/contract/program-exercises.test.ts
            lineNumber: 129
            columnNumber: 13
            typeName: Test
          source: |2
              // T009: Contract test POST /api/program-exercises
              await t.test('T009: POST /api/program-exercises', async (t) => {
                await t.test('should add exercise to program day (201)', async (t) => {
            ------------^
                  const response = await app.inject({
                    method: 'POST',
          ...
        
{"level":30,"time":1759594756459,"pid":141253,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-8","res":{"statusCode":404},"responseTime":2.1492290012538433,"msg":"request completed"}
{"level":30,"time":1759594756550,"pid":141253,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-9","req":{"method":"POST","url":"/api/program-exercises","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
        # Subtest: should allow duplicate exercises for drop sets (201)
            not ok 1 - Returns 201 Created (allows duplicates)
              ---
              compare: ===
              at:
                fileName: tests/contract/program-exercises.test.ts
                lineNumber: 170
                columnNumber: 9
                typeName: Test
              stack: |
                Test.<anonymous> (tests/contract/program-exercises.test.ts:170:9)
              source: >2
                      });
              
                      t.equal(response.statusCode, 201, 'Returns 201 Created (allows duplicates)');
                --------^
                      const body = response.json();
                      t.type(body.program_exercise_id, 'number', 'Returns program_exercise_id');
              diff: |
                --- expected
                +++ actual
                @@ -1,1 +1,1 @@
                -201
                +404
              ...
            
            not ok 2 - Returns program_exercise_id
              ---
              compare: ===
              at:
                fileName: tests/contract/program-exercises.test.ts
                lineNumber: 172
                columnNumber: 9
                typeName: Test
              stack: |
                Test.<anonymous> (tests/contract/program-exercises.test.ts:172:9)
              source: >2
                      t.equal(response.statusCode, 201, 'Returns 201 Created (allows duplicates)');
                      const body = response.json();
                      t.type(body.program_exercise_id, 'number', 'Returns program_exercise_id');
                --------^
                    });
              diff: |
                --- expected
                +++ actual
                @@ -1,1 +1,1 @@
                -number
                +undefined
              ...
            
            1..2
        not ok 2 - should allow duplicate exercises for drop sets (201) # time=32.466ms
          ---
          at:
            fileName: tests/contract/program-exercises.test.ts
            lineNumber: 154
            columnNumber: 13
            typeName: Test
          source: >2
                });
          
                await t.test('should allow duplicate exercises for drop sets (201)', async (t) => {
            ------------^
                  const response = await app.inject({
                    method: 'POST',
          ...
        
{"level":30,"time":1759594756552,"pid":141253,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-9","res":{"statusCode":404},"responseTime":1.3007960002869368,"msg":"request completed"}
{"level":30,"time":1759594756593,"pid":141253,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-a","req":{"method":"POST","url":"/api/program-exercises","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
{"level":30,"time":1759594756593,"pid":141253,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-b","req":{"method":"POST","url":"/api/program-exercises","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
{"level":30,"time":1759594756593,"pid":141253,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-c","req":{"method":"POST","url":"/api/program-exercises","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
{"level":30,"time":1759594756593,"pid":141253,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-d","req":{"method":"POST","url":"/api/program-exercises","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
{"level":30,"time":1759594756594,"pid":141253,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-e","req":{"method":"POST","url":"/api/program-exercises","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
{"level":30,"time":1759594756594,"pid":141253,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-f","req":{"method":"POST","url":"/api/program-exercises","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
        # Subtest: should return volume warning when exceeding MRV (201)
            not ok 1 - Returns volume warning for MRV
              ---
              at:
                fileName: tests/contract/program-exercises.test.ts
                lineNumber: 200
                columnNumber: 9
                typeName: Test
              stack: |
                Test.<anonymous> (tests/contract/program-exercises.test.ts:200:9)
              source: >2
              
                      // Should warn about exceeding MRV (Chest MRV ~22 sets, we've added 4+2+6*4=30 sets)
                      t.ok(body.volume_warning?.includes('MRV') || body.volume_warning?.includes('exceeds'), 'Returns volume warning for MRV');
                --------^
                    });
              ...
            
            1..1
        not ok 3 - should return volume warning when exceeding MRV (201) # time=19.272ms
          ---
          at:
            fileName: tests/contract/program-exercises.test.ts
            lineNumber: 175
            columnNumber: 13
            typeName: Test
          source: >2
                });
          
                await t.test('should return volume warning when exceeding MRV (201)', async (t) => {
            ------------^
                  // Add many exercises to push volume over MRV
                  const promises = [];
          ...
        
{"level":30,"time":1759594756595,"pid":141253,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-a","res":{"statusCode":404},"responseTime":2.6345569994300604,"msg":"request completed"}
{"level":30,"time":1759594756596,"pid":141253,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-b","res":{"statusCode":404},"responseTime":3.228558000177145,"msg":"request completed"}
{"level":30,"time":1759594756597,"pid":141253,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-c","res":{"statusCode":404},"responseTime":3.686158999800682,"msg":"request completed"}
{"level":30,"time":1759594756597,"pid":141253,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-d","res":{"statusCode":404},"responseTime":4.051358999684453,"msg":"request completed"}
{"level":30,"time":1759594756598,"pid":141253,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-e","res":{"statusCode":404},"responseTime":4.1404769998043776,"msg":"request completed"}
{"level":30,"time":1759594756598,"pid":141253,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-f","res":{"statusCode":404},"responseTime":4.4421919994056225,"msg":"request completed"}
{"level":30,"time":1759594756617,"pid":141253,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-g","req":{"method":"POST","url":"/api/program-exercises","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
        # Subtest: should accept optional order_index (201)
            not ok 1 - Returns 201 Created
              ---
              compare: ===
              at:
                fileName: tests/contract/program-exercises.test.ts
                lineNumber: 220
                columnNumber: 9
                typeName: Test
              stack: |
                Test.<anonymous> (tests/contract/program-exercises.test.ts:220:9)
              source: >2
                      });
              
                      t.equal(response.statusCode, 201, 'Returns 201 Created');
                --------^
                      const body = response.json();
                      t.type(body.program_exercise_id, 'number', 'Returns program_exercise_id');
              diff: |
                --- expected
                +++ actual
                @@ -1,1 +1,1 @@
                -201
                +404
              ...
            
            not ok 2 - Returns program_exercise_id
              ---
              compare: ===
              at:
                fileName: tests/contract/program-exercises.test.ts
                lineNumber: 222
                columnNumber: 9
                typeName: Test
              stack: |
                Test.<anonymous> (tests/contract/program-exercises.test.ts:222:9)
              source: >2
                      t.equal(response.statusCode, 201, 'Returns 201 Created');
                      const body = response.json();
                      t.type(body.program_exercise_id, 'number', 'Returns program_exercise_id');
                --------^
                    });
              diff: |
                --- expected
                +++ actual
                @@ -1,1 +1,1 @@
                -number
                +undefined
              ...
            
            1..2
        not ok 4 - should accept optional order_index (201) # time=19.302ms
          ---
          at:
            fileName: tests/contract/program-exercises.test.ts
            lineNumber: 203
            columnNumber: 13
            typeName: Test
          source: |2
                });
          
                await t.test('should accept optional order_index (201)', async (t) => {
            ------------^
                  const response = await app.inject({
                    method: 'POST',
          ...
        
{"level":30,"time":1759594756619,"pid":141253,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-g","res":{"statusCode":404},"responseTime":1.174243999645114,"msg":"request completed"}
{"level":30,"time":1759594756643,"pid":141253,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-h","req":{"method":"POST","url":"/api/program-exercises","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
        # Subtest: should return 400 for invalid target_sets (< 1)
            ok 1 - Returns 400 Bad Request
            ok 2 - Returns error message
            1..2
        ok 5 - should return 400 for invalid target_sets (< 1) # time=4.269ms
        
{"level":30,"time":1759594756644,"pid":141253,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-h","res":{"statusCode":400},"responseTime":0.7006490007042885,"msg":"request completed"}
{"level":30,"time":1759594756650,"pid":141253,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-i","req":{"method":"POST","url":"/api/program-exercises","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
        # Subtest: should return 400 for invalid target_sets (> 10)
            ok 1 - Returns 400 Bad Request
            ok 2 - Returns error message
            1..2
        ok 6 - should return 400 for invalid target_sets (> 10) # time=3.677ms
        
{"level":30,"time":1759594756651,"pid":141253,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-i","res":{"statusCode":400},"responseTime":1.4239259995520115,"msg":"request completed"}
{"level":30,"time":1759594756655,"pid":141253,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-j","req":{"method":"POST","url":"/api/program-exercises","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
        # Subtest: should return 400 for invalid target_rep_range format
            ok 1 - Returns 400 Bad Request
            ok 2 - Returns error message
            1..2
        ok 7 - should return 400 for invalid target_rep_range format # time=2.863ms
        
{"level":30,"time":1759594756656,"pid":141253,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-j","res":{"statusCode":400},"responseTime":0.9539640005677938,"msg":"request completed"}
{"level":30,"time":1759594756658,"pid":141253,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-k","req":{"method":"POST","url":"/api/program-exercises","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
        # Subtest: should return 400 for invalid target_rir (< 0)
            ok 1 - Returns 400 Bad Request
            ok 2 - Returns error message
            1..2
        ok 8 - should return 400 for invalid target_rir (< 0) # time=2.633ms
        
{"level":30,"time":1759594756659,"pid":141253,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-k","res":{"statusCode":400},"responseTime":0.7979380004107952,"msg":"request completed"}
{"level":30,"time":1759594756662,"pid":141253,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-l","req":{"method":"POST","url":"/api/program-exercises","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
        # Subtest: should return 400 for invalid target_rir (> 4)
            ok 1 - Returns 400 Bad Request
            ok 2 - Returns error message
            1..2
        ok 9 - should return 400 for invalid target_rir (> 4) # time=2.424ms
        
        # Subtest: should return 400 for missing required fields
            ok 1 - Returns 400 Bad Request
            ok 2 - Returns error message
            1..2
{"level":30,"time":1759594756663,"pid":141253,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-l","res":{"statusCode":400},"responseTime":0.8424270004034042,"msg":"request completed"}
{"level":30,"time":1759594756666,"pid":141253,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-m","req":{"method":"POST","url":"/api/program-exercises","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
        ok 10 - should return 400 for missing required fields # time=3.554ms
        
{"level":30,"time":1759594756666,"pid":141253,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-m","res":{"statusCode":400},"responseTime":0.8104389999061823,"msg":"request completed"}
{"level":30,"time":1759594756670,"pid":141253,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-n","req":{"method":"POST","url":"/api/program-exercises","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
        # Subtest: should return 404 for non-existent program_day_id
            ok 1 - Returns 404 Not Found
            ok 2 - Returns error message
            1..2
        ok 11 - should return 404 for non-existent program_day_id # time=3.608ms
        
{"level":30,"time":1759594756671,"pid":141253,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-n","res":{"statusCode":404},"responseTime":1.0612399987876415,"msg":"request completed"}
{"level":30,"time":1759594756675,"pid":141253,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-o","req":{"method":"POST","url":"/api/program-exercises","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
        # Subtest: should return 404 for non-existent exercise_id
            ok 1 - Returns 404 Not Found
            ok 2 - Returns error message
            1..2
        ok 12 - should return 404 for non-existent exercise_id # time=4.993ms
        
{"level":30,"time":1759594756678,"pid":141253,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-o","res":{"statusCode":404},"responseTime":2.6585130002349615,"msg":"request completed"}
{"level":30,"time":1759594756681,"pid":141253,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-p","req":{"method":"POST","url":"/api/program-exercises","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
        # Subtest: should return 401 without authentication
            ok 1 - Returns 401 Unauthorized
            1..1
        ok 13 - should return 401 without authentication # time=9.202ms
        
        1..13
    not ok 1 - T009: POST /api/program-exercises # time=236.934ms
      ---
      at:
        fileName: tests/contract/program-exercises.test.ts
        lineNumber: 128
        columnNumber: 11
        typeName: Test
      source: |2
      
          // T009: Contract test POST /api/program-exercises
          await t.test('T009: POST /api/program-exercises', async (t) => {
        ----------^
            await t.test('should add exercise to program day (201)', async (t) => {
              const response = await app.inject({
      ...
    
{"level":30,"time":1759594756689,"pid":141253,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-p","res":{"statusCode":401},"responseTime":7.411498999223113,"msg":"request completed"}
{"level":30,"time":1759594756697,"pid":141253,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-q","req":{"method":"PATCH","url":"/api/program-exercises/undefined","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
    # Subtest: T010: PATCH /api/program-exercises/:id
        # Subtest: should update target_sets (200)
            not ok 1 - Returns 200 OK
              ---
              compare: ===
              at:
                fileName: tests/contract/program-exercises.test.ts
                lineNumber: 421
                columnNumber: 9
                typeName: Test
              stack: |
                Test.<anonymous> (tests/contract/program-exercises.test.ts:421:9)
              source: |2
                      });
              
                      t.equal(response.statusCode, 200, 'Returns 200 OK');
                --------^
                      const body = response.json();
                      t.equal(body.updated, true, 'Returns updated=true');
              diff: |
                --- expected
                +++ actual
                @@ -1,1 +1,1 @@
                -200
                +404
              ...
            
            not ok 2 - Returns updated=true
              ---
              compare: ===
              at:
                fileName: tests/contract/program-exercises.test.ts
                lineNumber: 423
                columnNumber: 9
                typeName: Test
              stack: |
                Test.<anonymous> (tests/contract/program-exercises.test.ts:423:9)
              source: >2
                      t.equal(response.statusCode, 200, 'Returns 200 OK');
                      const body = response.json();
                      t.equal(body.updated, true, 'Returns updated=true');
                --------^
                      t.ok(body.volume_warning === null || typeof body.volume_warning === 'string', 'Returns volume_warning (nullable)');
                    });
              diff: |
                --- expected
                +++ actual
                @@ -1,1 +1,1 @@
                -true
                +undefined
              ...
            
            not ok 3 - Returns volume_warning (nullable)
              ---
              at:
                fileName: tests/contract/program-exercises.test.ts
                lineNumber: 424
                columnNumber: 9
                typeName: Test
              stack: |
                Test.<anonymous> (tests/contract/program-exercises.test.ts:424:9)
              source: >2
                      const body = response.json();
                      t.equal(body.updated, true, 'Returns updated=true');
                      t.ok(body.volume_warning === null || typeof body.volume_warning === 'string', 'Returns volume_warning (nullable)');
                --------^
                    });
              ...
            
            1..3
        not ok 1 - should update target_sets (200) # time=25.323ms
          ---
          at:
            fileName: tests/contract/program-exercises.test.ts
            lineNumber: 409
            columnNumber: 13
            typeName: Test
          source: |2
              // T010: Contract test PATCH /api/program-exercises/:id
              await t.test('T010: PATCH /api/program-exercises/:id', async (t) => {
                await t.test('should update target_sets (200)', async (t) => {
            ------------^
                  const response = await app.inject({
                    method: 'PATCH',
          ...
        
{"level":30,"time":1759594756699,"pid":141253,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-q","res":{"statusCode":404},"responseTime":1.4052090011537075,"msg":"request completed"}
{"level":30,"time":1759594756730,"pid":141253,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-r","req":{"method":"PATCH","url":"/api/program-exercises/undefined","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
        # Subtest: should update target_rep_range (200)
            not ok 1 - Returns 200 OK
              ---
              compare: ===
              at:
                fileName: tests/contract/program-exercises.test.ts
                lineNumber: 439
                columnNumber: 9
                typeName: Test
              stack: |
                Test.<anonymous> (tests/contract/program-exercises.test.ts:439:9)
              source: |2
                      });
              
                      t.equal(response.statusCode, 200, 'Returns 200 OK');
                --------^
                      const body = response.json();
                      t.equal(body.updated, true, 'Returns updated=true');
              diff: |
                --- expected
                +++ actual
                @@ -1,1 +1,1 @@
                -200
                +404
              ...
            
            not ok 2 - Returns updated=true
              ---
              compare: ===
              at:
                fileName: tests/contract/program-exercises.test.ts
                lineNumber: 441
                columnNumber: 9
                typeName: Test
              stack: |
                Test.<anonymous> (tests/contract/program-exercises.test.ts:441:9)
              source: |2
                      t.equal(response.statusCode, 200, 'Returns 200 OK');
                      const body = response.json();
                      t.equal(body.updated, true, 'Returns updated=true');
                --------^
                    });
              diff: |
                --- expected
                +++ actual
                @@ -1,1 +1,1 @@
                -true
                +undefined
              ...
            
            1..2
        not ok 2 - should update target_rep_range (200) # time=20.963ms
          ---
          at:
            fileName: tests/contract/program-exercises.test.ts
            lineNumber: 427
            columnNumber: 13
            typeName: Test
          source: |2
                });
          
                await t.test('should update target_rep_range (200)', async (t) => {
            ------------^
                  const response = await app.inject({
                    method: 'PATCH',
          ...
        
{"level":30,"time":1759594756732,"pid":141253,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-r","res":{"statusCode":404},"responseTime":1.5364410001784563,"msg":"request completed"}
{"level":30,"time":1759594756763,"pid":141253,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-s","req":{"method":"PATCH","url":"/api/program-exercises/undefined","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
        # Subtest: should update target_rir (200)
            not ok 1 - Returns 200 OK
              ---
              compare: ===
              at:
                fileName: tests/contract/program-exercises.test.ts
                lineNumber: 456
                columnNumber: 9
                typeName: Test
              stack: |
                Test.<anonymous> (tests/contract/program-exercises.test.ts:456:9)
              source: |2
                      });
              
                      t.equal(response.statusCode, 200, 'Returns 200 OK');
                --------^
                      const body = response.json();
                      t.equal(body.updated, true, 'Returns updated=true');
              diff: |
                --- expected
                +++ actual
                @@ -1,1 +1,1 @@
                -200
                +404
              ...
            
            not ok 2 - Returns updated=true
              ---
              compare: ===
              at:
                fileName: tests/contract/program-exercises.test.ts
                lineNumber: 458
                columnNumber: 9
                typeName: Test
              stack: |
                Test.<anonymous> (tests/contract/program-exercises.test.ts:458:9)
              source: |2
                      t.equal(response.statusCode, 200, 'Returns 200 OK');
                      const body = response.json();
                      t.equal(body.updated, true, 'Returns updated=true');
                --------^
                    });
              diff: |
                --- expected
                +++ actual
                @@ -1,1 +1,1 @@
                -true
                +undefined
              ...
            
            1..2
        not ok 3 - should update target_rir (200) # time=31.947ms
          ---
          at:
            fileName: tests/contract/program-exercises.test.ts
            lineNumber: 444
            columnNumber: 13
            typeName: Test
          source: |2
                });
          
                await t.test('should update target_rir (200)', async (t) => {
            ------------^
                  const response = await app.inject({
                    method: 'PATCH',
          ...
        
{"level":30,"time":1759594756765,"pid":141253,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-s","res":{"statusCode":404},"responseTime":1.85275299847126,"msg":"request completed"}
{"level":30,"time":1759594756800,"pid":141253,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-t","req":{"method":"PATCH","url":"/api/program-exercises/undefined","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
        # Subtest: should update multiple fields at once (200)
            not ok 1 - Returns 200 OK
              ---
              compare: ===
              at:
                fileName: tests/contract/program-exercises.test.ts
                lineNumber: 475
                columnNumber: 9
                typeName: Test
              stack: |
                Test.<anonymous> (tests/contract/program-exercises.test.ts:475:9)
              source: |2
                      });
              
                      t.equal(response.statusCode, 200, 'Returns 200 OK');
                --------^
                      const body = response.json();
                      t.equal(body.updated, true, 'Returns updated=true');
              diff: |
                --- expected
                +++ actual
                @@ -1,1 +1,1 @@
                -200
                +404
              ...
            
            not ok 2 - Returns updated=true
              ---
              compare: ===
              at:
                fileName: tests/contract/program-exercises.test.ts
                lineNumber: 477
                columnNumber: 9
                typeName: Test
              stack: |
                Test.<anonymous> (tests/contract/program-exercises.test.ts:477:9)
              source: |2
                      t.equal(response.statusCode, 200, 'Returns 200 OK');
                      const body = response.json();
                      t.equal(body.updated, true, 'Returns updated=true');
                --------^
                    });
              diff: |
                --- expected
                +++ actual
                @@ -1,1 +1,1 @@
                -true
                +undefined
              ...
            
            1..2
        not ok 4 - should update multiple fields at once (200) # time=27.944ms
          ---
          at:
            fileName: tests/contract/program-exercises.test.ts
            lineNumber: 461
            columnNumber: 13
            typeName: Test
          source: |2
                });
          
                await t.test('should update multiple fields at once (200)', async (t) => {
            ------------^
                  const response = await app.inject({
                    method: 'PATCH',
          ...
        
{"level":30,"time":1759594756801,"pid":141253,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-t","res":{"statusCode":404},"responseTime":1.4805680010467768,"msg":"request completed"}
{"level":30,"time":1759594756837,"pid":141253,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-u","req":{"method":"PATCH","url":"/api/program-exercises/undefined","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
        # Subtest: should return 400 for invalid target_sets
            not ok 1 - Returns 400 Bad Request
              ---
              compare: ===
              at:
                fileName: tests/contract/program-exercises.test.ts
                lineNumber: 492
                columnNumber: 9
                typeName: Test
              stack: |
                Test.<anonymous> (tests/contract/program-exercises.test.ts:492:9)
              source: |2
                      });
              
                      t.equal(response.statusCode, 400, 'Returns 400 Bad Request');
                --------^
                      const body = response.json();
                      t.ok(body.error, 'Returns error message');
              diff: |
                --- expected
                +++ actual
                @@ -1,1 +1,1 @@
                -400
                +404
              ...
            
            ok 2 - Returns error message
            1..2
        not ok 5 - should return 400 for invalid target_sets # time=20.58ms
          ---
          at:
            fileName: tests/contract/program-exercises.test.ts
            lineNumber: 480
            columnNumber: 13
            typeName: Test
          source: |2
                });
          
                await t.test('should return 400 for invalid target_sets', async (t) => {
            ------------^
                  const response = await app.inject({
                    method: 'PATCH',
          ...
        
{"level":30,"time":1759594756840,"pid":141253,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-u","res":{"statusCode":404},"responseTime":2.7786400001496077,"msg":"request completed"}
{"level":30,"time":1759594756863,"pid":141253,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-v","req":{"method":"PATCH","url":"/api/program-exercises/undefined","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
        # Subtest: should return 400 for invalid target_rep_range format
            not ok 1 - Returns 400 Bad Request
              ---
              compare: ===
              at:
                fileName: tests/contract/program-exercises.test.ts
                lineNumber: 509
                columnNumber: 9
                typeName: Test
              stack: |
                Test.<anonymous> (tests/contract/program-exercises.test.ts:509:9)
              source: |2
                      });
              
                      t.equal(response.statusCode, 400, 'Returns 400 Bad Request');
                --------^
                      const body = response.json();
                      t.ok(body.error, 'Returns error message');
              diff: |
                --- expected
                +++ actual
                @@ -1,1 +1,1 @@
                -400
                +404
              ...
            
            ok 2 - Returns error message
            1..2
        not ok 6 - should return 400 for invalid target_rep_range format # time=13.697ms
          ---
          at:
            fileName: tests/contract/program-exercises.test.ts
            lineNumber: 497
            columnNumber: 13
            typeName: Test
          source: >2
                });
          
                await t.test('should return 400 for invalid target_rep_range format', async (t) => {
            ------------^
                  const response = await app.inject({
                    method: 'PATCH',
          ...
        
{"level":30,"time":1759594756865,"pid":141253,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-v","res":{"statusCode":404},"responseTime":1.8562449999153614,"msg":"request completed"}
{"level":30,"time":1759594756888,"pid":141253,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-w","req":{"method":"PATCH","url":"/api/program-exercises/undefined","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
        # Subtest: should return 400 for invalid target_rir
            not ok 1 - Returns 400 Bad Request
              ---
              compare: ===
              at:
                fileName: tests/contract/program-exercises.test.ts
                lineNumber: 526
                columnNumber: 9
                typeName: Test
              stack: |
                Test.<anonymous> (tests/contract/program-exercises.test.ts:526:9)
              source: |2
                      });
              
                      t.equal(response.statusCode, 400, 'Returns 400 Bad Request');
                --------^
                      const body = response.json();
                      t.ok(body.error, 'Returns error message');
              diff: |
                --- expected
                +++ actual
                @@ -1,1 +1,1 @@
                -400
                +404
              ...
            
            ok 2 - Returns error message
            1..2
        not ok 7 - should return 400 for invalid target_rir # time=33.906ms
          ---
          at:
            fileName: tests/contract/program-exercises.test.ts
            lineNumber: 514
            columnNumber: 13
            typeName: Test
          source: |2
                });
          
                await t.test('should return 400 for invalid target_rir', async (t) => {
            ------------^
                  const response = await app.inject({
                    method: 'PATCH',
          ...
        
{"level":30,"time":1759594756899,"pid":141253,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-w","res":{"statusCode":404},"responseTime":11.217157000675797,"msg":"request completed"}
{"level":30,"time":1759594756929,"pid":141253,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-x","req":{"method":"PATCH","url":"/api/program-exercises/99999","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
        # Subtest: should return 404 for non-existent program_exercise_id
            ok 1 - Returns 404 Not Found
            ok 2 - Returns error message
            1..2
        ok 8 - should return 404 for non-existent program_exercise_id # time=4.24ms
        
{"level":30,"time":1759594756931,"pid":141253,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-x","res":{"statusCode":404},"responseTime":1.8976610004901886,"msg":"request completed"}
{"level":30,"time":1759594756936,"pid":141253,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-y","req":{"method":"PATCH","url":"/api/program-exercises/undefined","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
        # Subtest: should return 401 without authentication
            ok 1 - Returns 401 Unauthorized
            1..1
        ok 9 - should return 401 without authentication # time=7.679ms
        
        1..9
    not ok 2 - T010: PATCH /api/program-exercises/:id # time=249.611ms
      ---
      at:
        fileName: tests/contract/program-exercises.test.ts
        lineNumber: 408
        columnNumber: 11
        typeName: Test
      source: |2
      
          // T010: Contract test PATCH /api/program-exercises/:id
          await t.test('T010: PATCH /api/program-exercises/:id', async (t) => {
        ----------^
            await t.test('should update target_sets (200)', async (t) => {
              const response = await app.inject({
      ...
    
    # Subtest: T012: PUT /api/program-exercises/:id/swap
{"level":30,"time":1759594756941,"pid":141253,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-y","res":{"statusCode":401},"responseTime":4.472013998776674,"msg":"request completed"}
{"level":30,"time":1759594756962,"pid":141253,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-z","req":{"method":"PUT","url":"/api/program-exercises/undefined/swap","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
        # Subtest: should swap exercise with compatible alternative (200)
            not ok 1 - Returns 200 OK
              ---
              compare: ===
              at:
                fileName: tests/contract/program-exercises.test.ts
                lineNumber: 575
                columnNumber: 9
                typeName: Test
              stack: |
                Test.<anonymous> (tests/contract/program-exercises.test.ts:575:9)
              source: |2
                      });
              
                      t.equal(response.statusCode, 200, 'Returns 200 OK');
                --------^
                      const body = response.json();
                      t.equal(body.swapped, true, 'Returns swapped=true');
              diff: |
                --- expected
                +++ actual
                @@ -1,1 +1,1 @@
                -200
                +404
              ...
            
            not ok 2 - Returns swapped=true
              ---
              compare: ===
              at:
                fileName: tests/contract/program-exercises.test.ts
                lineNumber: 577
                columnNumber: 9
                typeName: Test
              stack: |
                Test.<anonymous> (tests/contract/program-exercises.test.ts:577:9)
              source: |2
                      t.equal(response.statusCode, 200, 'Returns 200 OK');
                      const body = response.json();
                      t.equal(body.swapped, true, 'Returns swapped=true');
                --------^
                      t.type(body.old_exercise_name, 'string', 'Returns old_exercise_name');
                      t.type(body.new_exercise_name, 'string', 'Returns new_exercise_name');
              diff: |
                --- expected
                +++ actual
                @@ -1,1 +1,1 @@
                -true
                +undefined
              ...
            
            not ok 3 - Returns old_exercise_name
              ---
              compare: ===
              at:
                fileName: tests/contract/program-exercises.test.ts
                lineNumber: 578
                columnNumber: 9
                typeName: Test
              stack: |
                Test.<anonymous> (tests/contract/program-exercises.test.ts:578:9)
              source: >2
                      const body = response.json();
                      t.equal(body.swapped, true, 'Returns swapped=true');
                      t.type(body.old_exercise_name, 'string', 'Returns old_exercise_name');
                --------^
                      t.type(body.new_exercise_name, 'string', 'Returns new_exercise_name');
                      t.not(body.old_exercise_name, body.new_exercise_name, 'Exercise names are different');
              diff: |
                --- expected
                +++ actual
                @@ -1,1 +1,1 @@
                -string
                +undefined
              ...
            
            not ok 4 - Returns new_exercise_name
              ---
              compare: ===
              at:
                fileName: tests/contract/program-exercises.test.ts
                lineNumber: 579
                columnNumber: 9
                typeName: Test
              stack: |
                Test.<anonymous> (tests/contract/program-exercises.test.ts:579:9)
              source: >2
                      t.equal(body.swapped, true, 'Returns swapped=true');
                      t.type(body.old_exercise_name, 'string', 'Returns old_exercise_name');
                      t.type(body.new_exercise_name, 'string', 'Returns new_exercise_name');
                --------^
                      t.not(body.old_exercise_name, body.new_exercise_name, 'Exercise names are different');
                    });
              diff: |
                --- expected
                +++ actual
                @@ -1,1 +1,1 @@
                -string
                +undefined
              ...
            
            not ok 5 - Exercise names are different
              ---
              compare: "!=="
              at:
                fileName: tests/contract/program-exercises.test.ts
                lineNumber: 580
                columnNumber: 9
                typeName: Test
              stack: |
                Test.<anonymous> (tests/contract/program-exercises.test.ts:580:9)
              source: >2
                      t.type(body.old_exercise_name, 'string', 'Returns old_exercise_name');
                      t.type(body.new_exercise_name, 'string', 'Returns new_exercise_name');
                      t.not(body.old_exercise_name, body.new_exercise_name, 'Exercise names are different');
                --------^
                    });
              ...
            
            1..5
        not ok 1 - should swap exercise with compatible alternative (200) # time=56.701ms
          ---
          at:
            fileName: tests/contract/program-exercises.test.ts
            lineNumber: 563
            columnNumber: 13
            typeName: Test
          source: >2
              // T012: Contract test PUT /api/program-exercises/:id/swap
              await t.test('T012: PUT /api/program-exercises/:id/swap', async (t) => {
                await t.test('should swap exercise with compatible alternative (200)', async (t) => {
            ------------^
                  const response = await app.inject({
                    method: 'PUT',
          ...
        
{"level":30,"time":1759594756963,"pid":141253,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-z","res":{"statusCode":404},"responseTime":1.2838250007480383,"msg":"request completed"}
{"level":30,"time":1759594757024,"pid":141253,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-10","req":{"method":"PUT","url":"/api/program-exercises/undefined/swap","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
        # Subtest: should return 400 for incompatible muscle groups
            not ok 1 - Returns 400 Bad Request
              ---
              compare: ===
              at:
                fileName: tests/contract/program-exercises.test.ts
                lineNumber: 595
                columnNumber: 9
                typeName: Test
              stack: |
                Test.<anonymous> (tests/contract/program-exercises.test.ts:595:9)
              source: |2
                      });
              
                      t.equal(response.statusCode, 400, 'Returns 400 Bad Request');
                --------^
                      const body = response.json();
                      t.ok(body.error, 'Returns error message');
              diff: |
                --- expected
                +++ actual
                @@ -1,1 +1,1 @@
                -400
                +404
              ...
            
            ok 2 - Returns error message
            not ok 3 - Error mentions incompatibility
              ---
              at:
                fileName: tests/contract/program-exercises.test.ts
                lineNumber: 598
                columnNumber: 9
                typeName: Test
              stack: |
                Test.<anonymous> (tests/contract/program-exercises.test.ts:598:9)
              source: >2
                      const body = response.json();
                      t.ok(body.error, 'Returns error message');
                      t.ok(body.error.includes('incompatible') || body.error.includes('muscle'), 'Error mentions incompatibility');
                --------^
                    });
              ...
            
            1..3
        not ok 2 - should return 400 for incompatible muscle groups # time=34.867ms
          ---
          at:
            fileName: tests/contract/program-exercises.test.ts
            lineNumber: 583
            columnNumber: 13
            typeName: Test
          source: >2
                });
          
                await t.test('should return 400 for incompatible muscle groups', async (t) => {
            ------------^
                  const response = await app.inject({
                    method: 'PUT',
          ...
        
        # Subtest: should return 400 for missing new_exercise_id
{"level":30,"time":1759594757027,"pid":141253,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-10","res":{"statusCode":404},"responseTime":2.3897630013525486,"msg":"request completed"}
{"level":30,"time":1759594757069,"pid":141253,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-11","req":{"method":"PUT","url":"/api/program-exercises/undefined/swap","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
            ok 1 - Returns 400 Bad Request
            ok 2 - Returns error message
            1..2
        ok 3 - should return 400 for missing new_exercise_id # time=8.131ms
        
        # Subtest: should return 404 for non-existent program_exercise_id
{"level":30,"time":1759594757074,"pid":141253,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-11","res":{"statusCode":400},"responseTime":4.654789000749588,"msg":"request completed"}
{"level":30,"time":1759594757082,"pid":141253,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-12","req":{"method":"PUT","url":"/api/program-exercises/99999/swap","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
            ok 1 - Returns 404 Not Found
            ok 2 - Returns error message
            1..2
        ok 4 - should return 404 for non-existent program_exercise_id # time=6.636ms
        
{"level":30,"time":1759594757083,"pid":141253,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-12","res":{"statusCode":404},"responseTime":0.8291570004075766,"msg":"request completed"}
{"level":30,"time":1759594757093,"pid":141253,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-13","req":{"method":"PUT","url":"/api/program-exercises/undefined/swap","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
        # Subtest: should return 404 for non-existent new_exercise_id
            ok 1 - Returns 404 Not Found
            ok 2 - Returns error message
            1..2
        ok 5 - should return 404 for non-existent new_exercise_id # time=7.908ms
        
{"level":30,"time":1759594757094,"pid":141253,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-13","res":{"statusCode":404},"responseTime":0.9610170014202595,"msg":"request completed"}
{"level":30,"time":1759594757106,"pid":141253,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-14","req":{"method":"PUT","url":"/api/program-exercises/undefined/swap","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
        # Subtest: should return 401 without authentication
            ok 1 - Returns 401 Unauthorized
            1..1
        ok 6 - should return 401 without authentication # time=8.733ms
        
        1..6
    not ok 3 - T012: PUT /api/program-exercises/:id/swap # time=162.805ms
      ---
      at:
        fileName: tests/contract/program-exercises.test.ts
        lineNumber: 562
        columnNumber: 11
        typeName: Test
      source: >2
      
          // T012: Contract test PUT /api/program-exercises/:id/swap
          await t.test('T012: PUT /api/program-exercises/:id/swap', async (t) => {
        ----------^
            await t.test('should swap exercise with compatible alternative (200)', async (t) => {
              const response = await app.inject({
      ...
    
{"level":30,"time":1759594757111,"pid":141253,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-14","res":{"statusCode":401},"responseTime":4.7218369990587234,"msg":"request completed"}
{"level":30,"time":1759594757133,"pid":141253,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-15","req":{"method":"POST","url":"/api/program-exercises","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
{"level":30,"time":1759594757136,"pid":141253,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-15","res":{"statusCode":404},"responseTime":3.0883859992027283,"msg":"request completed"}
{"level":30,"time":1759594757137,"pid":141253,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-16","req":{"method":"POST","url":"/api/program-exercises","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
{"level":30,"time":1759594757139,"pid":141253,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-16","res":{"statusCode":404},"responseTime":2.015343001112342,"msg":"request completed"}
{"level":30,"time":1759594757139,"pid":141253,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-17","req":{"method":"POST","url":"/api/program-exercises","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
{"level":30,"time":1759594757141,"pid":141253,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-17","res":{"statusCode":404},"responseTime":1.7508539985865355,"msg":"request completed"}
{"level":30,"time":1759594757142,"pid":141253,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-18","req":{"method":"PATCH","url":"/api/program-exercises/batch-reorder","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
    # Subtest: T013: PATCH /api/program-exercises/batch-reorder
        # Subtest: should reorder exercises (200)
            not ok 1 - Returns 200 OK
              ---
              compare: ===
              at:
                fileName: tests/contract/program-exercises.test.ts
                lineNumber: 737
                columnNumber: 9
                typeName: Test
              stack: |
                Test.<anonymous> (tests/contract/program-exercises.test.ts:737:9)
              source: >2
                      });
              
                      t.equal(response.statusCode, 200, 'Returns 200 OK');
                --------^
                      const body = response.json();
                      t.ok(body.reordered === true || body.success === true, 'Returns success indicator');
              diff: |
                --- expected
                +++ actual
                @@ -1,1 +1,1 @@
                -200
                +404
              ...
            
            not ok 2 - Returns success indicator
              ---
              at:
                fileName: tests/contract/program-exercises.test.ts
                lineNumber: 739
                columnNumber: 9
                typeName: Test
              stack: |
                Test.<anonymous> (tests/contract/program-exercises.test.ts:739:9)
              source: >2
                      t.equal(response.statusCode, 200, 'Returns 200 OK');
                      const body = response.json();
                      t.ok(body.reordered === true || body.success === true, 'Returns success indicator');
                --------^
                    });
              ...
            
            1..2
        not ok 1 - should reorder exercises (200) # time=18.7ms
          ---
          at:
            fileName: tests/contract/program-exercises.test.ts
            lineNumber: 720
            columnNumber: 13
            typeName: Test
          source: |2
                });
          
                await t.test('should reorder exercises (200)', async (t) => {
            ------------^
                  const response = await app.inject({
                    method: 'PATCH',
          ...
        
{"level":30,"time":1759594757144,"pid":141253,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-18","res":{"statusCode":404},"responseTime":2.273616999387741,"msg":"request completed"}
{"level":30,"time":1759594757164,"pid":141253,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-19","req":{"method":"PATCH","url":"/api/program-exercises/batch-reorder","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
        # Subtest: should handle partial reordering (200)
            not ok 1 - Returns 200 OK
              ---
              compare: ===
              at:
                fileName: tests/contract/program-exercises.test.ts
                lineNumber: 758
                columnNumber: 9
                typeName: Test
              stack: |
                Test.<anonymous> (tests/contract/program-exercises.test.ts:758:9)
              source: |2
                      });
              
                      t.equal(response.statusCode, 200, 'Returns 200 OK');
                --------^
                    });
              diff: |
                --- expected
                +++ actual
                @@ -1,1 +1,1 @@
                -200
                +404
              ...
            
            1..1
        not ok 2 - should handle partial reordering (200) # time=10.763ms
          ---
          at:
            fileName: tests/contract/program-exercises.test.ts
            lineNumber: 742
            columnNumber: 13
            typeName: Test
          source: |2
                });
          
                await t.test('should handle partial reordering (200)', async (t) => {
            ------------^
                  const response = await app.inject({
                    method: 'PATCH',
          ...
        
{"level":30,"time":1759594757168,"pid":141253,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-19","res":{"statusCode":404},"responseTime":3.4031610004603863,"msg":"request completed"}
{"level":30,"time":1759594757183,"pid":141253,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-1a","req":{"method":"PATCH","url":"/api/program-exercises/batch-reorder","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
        # Subtest: should return 400 for missing program_day_id
            ok 1 - Returns 400 Bad Request
            ok 2 - Returns error message
            1..2
        ok 3 - should return 400 for missing program_day_id # time=11.48ms
        
{"level":30,"time":1759594757193,"pid":141253,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-1a","res":{"statusCode":400},"responseTime":10.023497000336647,"msg":"request completed"}
{"level":30,"time":1759594757195,"pid":141253,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-1b","req":{"method":"PATCH","url":"/api/program-exercises/batch-reorder","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
        # Subtest: should return 400 for missing exercise_order
            ok 1 - Returns 400 Bad Request
            ok 2 - Returns error message
            1..2
        ok 4 - should return 400 for missing exercise_order # time=2.929ms
        
{"level":30,"time":1759594757196,"pid":141253,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-1b","res":{"statusCode":400},"responseTime":0.8584899995476007,"msg":"request completed"}
{"level":30,"time":1759594757199,"pid":141253,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-1c","req":{"method":"PATCH","url":"/api/program-exercises/batch-reorder","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
        # Subtest: should return 400 for invalid exercise_order format
            ok 1 - Returns 400 Bad Request
            ok 2 - Returns error message
            1..2
        ok 5 - should return 400 for invalid exercise_order format # time=2.238ms
        
{"level":30,"time":1759594757200,"pid":141253,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-1c","res":{"statusCode":400},"responseTime":0.9339189995080233,"msg":"request completed"}
{"level":30,"time":1759594757203,"pid":141253,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-1d","req":{"method":"PATCH","url":"/api/program-exercises/batch-reorder","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
        # Subtest: should return 400 for negative order_index
            not ok 1 - Returns 400 Bad Request
              ---
              compare: ===
              at:
                fileName: tests/contract/program-exercises.test.ts
                lineNumber: 830
                columnNumber: 9
                typeName: Test
              stack: |
                Test.<anonymous> (tests/contract/program-exercises.test.ts:830:9)
              source: |2
                      });
              
                      t.equal(response.statusCode, 400, 'Returns 400 Bad Request');
                --------^
                      const body = response.json();
                      t.ok(body.error, 'Returns error message');
              diff: |
                --- expected
                +++ actual
                @@ -1,1 +1,1 @@
                -400
                +404
              ...
            
            ok 2 - Returns error message
            1..2
        not ok 6 - should return 400 for negative order_index # time=6.175ms
          ---
          at:
            fileName: tests/contract/program-exercises.test.ts
            lineNumber: 815
            columnNumber: 13
            typeName: Test
          source: |2
                });
          
                await t.test('should return 400 for negative order_index', async (t) => {
            ------------^
                  const response = await app.inject({
                    method: 'PATCH',
          ...
        
{"level":30,"time":1759594757204,"pid":141253,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-1d","res":{"statusCode":404},"responseTime":1.2618940006941557,"msg":"request completed"}
{"level":30,"time":1759594757212,"pid":141253,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-1e","req":{"method":"PATCH","url":"/api/program-exercises/batch-reorder","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
        # Subtest: should return 401 without authentication
            ok 1 - Returns 401 Unauthorized
            1..1
        ok 7 - should return 401 without authentication # time=1.668ms
        
        1..7
    not ok 4 - T013: PATCH /api/program-exercises/batch-reorder # time=82.228ms
      ---
      at:
        fileName: tests/contract/program-exercises.test.ts
        lineNumber: 664
        columnNumber: 11
        typeName: Test
      source: >2
      
          // T013: Contract test PATCH /api/program-exercises/batch-reorder
          await t.test('T013: PATCH /api/program-exercises/batch-reorder', async (t) => {
        ----------^
            // Create additional program exercises for reordering tests
            let exerciseId1: number;
      ...
    
{"level":30,"time":1759594757213,"pid":141253,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-1e","res":{"statusCode":401},"responseTime":0.6732710003852844,"msg":"request completed"}
{"level":30,"time":1759594757218,"pid":141253,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-1f","req":{"method":"POST","url":"/api/program-exercises","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
    # Subtest: T011: DELETE /api/program-exercises/:id
        # Subtest: should delete program exercise (200)
            not ok 1 - Returns 200 OK
              ---
              compare: ===
              at:
                fileName: tests/contract/program-exercises.test.ts
                lineNumber: 884
                columnNumber: 9
                typeName: Test
              stack: |
                Test.<anonymous> (tests/contract/program-exercises.test.ts:884:9)
              source: |2
                      });
              
                      t.equal(response.statusCode, 200, 'Returns 200 OK');
                --------^
                      const body = response.json();
                      t.equal(body.deleted, true, 'Returns deleted=true');
              diff: |
                --- expected
                +++ actual
                @@ -1,1 +1,1 @@
                -200
                +404
              ...
            
            not ok 2 - Returns deleted=true
              ---
              compare: ===
              at:
                fileName: tests/contract/program-exercises.test.ts
                lineNumber: 886
                columnNumber: 9
                typeName: Test
              stack: |
                Test.<anonymous> (tests/contract/program-exercises.test.ts:886:9)
              source: >2
                      t.equal(response.statusCode, 200, 'Returns 200 OK');
                      const body = response.json();
                      t.equal(body.deleted, true, 'Returns deleted=true');
                --------^
                      t.ok(body.volume_warning === null || typeof body.volume_warning === 'string', 'Returns volume_warning (nullable)');
                    });
              diff: |
                --- expected
                +++ actual
                @@ -1,1 +1,1 @@
                -true
                +undefined
              ...
            
            not ok 3 - Returns volume_warning (nullable)
              ---
              at:
                fileName: tests/contract/program-exercises.test.ts
                lineNumber: 887
                columnNumber: 9
                typeName: Test
              stack: |
                Test.<anonymous> (tests/contract/program-exercises.test.ts:887:9)
              source: >2
                      const body = response.json();
                      t.equal(body.deleted, true, 'Returns deleted=true');
                      t.ok(body.volume_warning === null || typeof body.volume_warning === 'string', 'Returns volume_warning (nullable)');
                --------^
                    });
              ...
            
            1..3
        not ok 1 - should delete program exercise (200) # time=12.395ms
          ---
          at:
            fileName: tests/contract/program-exercises.test.ts
            lineNumber: 875
            columnNumber: 13
            typeName: Test
          source: |2
                });
          
                await t.test('should delete program exercise (200)', async (t) => {
            ------------^
                  const response = await app.inject({
                    method: 'DELETE',
          ...
        
{"level":30,"time":1759594757220,"pid":141253,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-1f","res":{"statusCode":404},"responseTime":1.7248030006885529,"msg":"request completed"}
{"level":30,"time":1759594757220,"pid":141253,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-1g","req":{"method":"DELETE","url":"/api/program-exercises/undefined","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
{"level":30,"time":1759594757221,"pid":141253,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-1g","res":{"statusCode":404},"responseTime":0.6395369991660118,"msg":"request completed"}
{"level":30,"time":1759594757239,"pid":141253,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-1h","req":{"method":"POST","url":"/api/program-days","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
{"level":30,"time":1759594757241,"pid":141253,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-1h","msg":"Route POST:/api/program-days not found"}
{"level":30,"time":1759594757241,"pid":141253,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-1h","res":{"statusCode":404},"responseTime":2.0656989999115467,"msg":"request completed"}
{"level":30,"time":1759594757242,"pid":141253,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-1i","req":{"method":"POST","url":"/api/program-exercises","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
{"level":30,"time":1759594757243,"pid":141253,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-1i","res":{"statusCode":400},"responseTime":0.8465480003505945,"msg":"request completed"}
{"level":30,"time":1759594757243,"pid":141253,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-1j","req":{"method":"POST","url":"/api/program-exercises","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
        # Subtest: should return volume warning when dropping below MEV (200)
            not ok 1 - Returns 200 OK
              ---
              compare: ===
              at:
                fileName: tests/contract/program-exercises.test.ts
                lineNumber: 947
                columnNumber: 9
                typeName: Test
              stack: |
                Test.<anonymous> (tests/contract/program-exercises.test.ts:947:9)
              source: >2
                      });
              
                      t.equal(deleteResponse.statusCode, 200, 'Returns 200 OK');
                --------^
                      const body = deleteResponse.json();
                      t.ok(body.volume_warning?.includes('MEV') || body.volume_warning?.includes('below'), 'Returns volume warning for MEV');
              diff: |
                --- expected
                +++ actual
                @@ -1,1 +1,1 @@
                -200
                +404
              ...
            
            not ok 2 - Returns volume warning for MEV
              ---
              at:
                fileName: tests/contract/program-exercises.test.ts
                lineNumber: 949
                columnNumber: 9
                typeName: Test
              stack: |
                Test.<anonymous> (tests/contract/program-exercises.test.ts:949:9)
              source: >2
                      t.equal(deleteResponse.statusCode, 200, 'Returns 200 OK');
                      const body = deleteResponse.json();
                      t.ok(body.volume_warning?.includes('MEV') || body.volume_warning?.includes('below'), 'Returns volume warning for MEV');
                --------^
                    });
              ...
            
            1..2
        not ok 2 - should return volume warning when dropping below MEV (200) # time=15.706ms
          ---
          at:
            fileName: tests/contract/program-exercises.test.ts
            lineNumber: 890
            columnNumber: 13
            typeName: Test
          source: >2
                });
          
                await t.test('should return volume warning when dropping below MEV (200)', async (t) => {
            ------------^
                  // First, create a minimal program day with only MEV volume
                  const minimalDayResponse = await app.inject({
          ...
        
        # Subtest: should return 404 for non-existent program_exercise_id
            ok 1 - Returns 404 Not Found
            ok 2 - Returns error message
            1..2
        ok 3 - should return 404 for non-existent program_exercise_id # time=2.046ms
        
        # Subtest: should return 404 when deleting already deleted exercise
            ok 1 - Returns 404 Not Found
            ok 2 - Returns error message
            1..2
        ok 4 - should return 404 when deleting already deleted exercise # time=1.808ms
        
        # Subtest: should return 401 without authentication
            ok 1 - Returns 401 Unauthorized
            1..1
        ok 5 - should return 401 without authentication # time=1.671ms
        
        1..5
    not ok 5 - T011: DELETE /api/program-exercises/:id # time=48.587ms
      ---
      at:
        fileName: tests/contract/program-exercises.test.ts
        lineNumber: 853
        columnNumber: 11
        typeName: Test
      source: |2
          // T011: Contract test DELETE /api/program-exercises/:id
          // (Placed last to avoid deleting test data needed by other tests)
          await t.test('T011: DELETE /api/program-exercises/:id', async (t) => {
        ----------^
            let deletableExerciseId: number;
      ...
    
    1..5
not ok 1 - Program Exercise Editor Endpoints Contract Tests # time=2013.199ms
  ---
  at:
    fileName: tests/contract/program-exercises.test.ts
    lineNumber: 20
    columnNumber: 5
    isToplevel: true
  source: |2
     */
  
    tap.test('Program Exercise Editor Endpoints Contract Tests', async (t) => {
    ----^
      const app = await buildApp();
  ...

{"level":30,"time":1759594757244,"pid":141253,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-1j","res":{"statusCode":400},"responseTime":0.8040839992463589,"msg":"request completed"}
{"level":30,"time":1759594757244,"pid":141253,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-1k","req":{"method":"DELETE","url":"/api/program-exercises/undefined","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
{"level":30,"time":1759594757245,"pid":141253,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-1k","res":{"statusCode":404},"responseTime":0.6034999992698431,"msg":"request completed"}
{"level":30,"time":1759594757258,"pid":141253,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-1l","req":{"method":"DELETE","url":"/api/program-exercises/99999","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
{"level":30,"time":1759594757258,"pid":141253,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-1l","res":{"statusCode":404},"responseTime":0.7418549992144108,"msg":"request completed"}
{"level":30,"time":1759594757261,"pid":141253,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-1m","req":{"method":"DELETE","url":"/api/program-exercises/undefined","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
{"level":30,"time":1759594757261,"pid":141253,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-1m","res":{"statusCode":404},"responseTime":0.6150929983705282,"msg":"request completed"}
{"level":30,"time":1759594757263,"pid":141253,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-1n","req":{"method":"DELETE","url":"/api/program-exercises/1","hostname":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
{"level":30,"time":1759594757264,"pid":141253,"hostname":"asigator-Legion-5-17ACH6H","reqId":"req-1n","res":{"statusCode":401},"responseTime":0.5029279999434948,"msg":"request completed"}
1..1
Database connection closed
