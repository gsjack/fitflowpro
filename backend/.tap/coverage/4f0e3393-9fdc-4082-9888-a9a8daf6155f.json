{
  "result": [
    {
      "scriptId": "324",
      "url": "file:///home/asigator/fitness2025/backend/src/server.ts",
      "functions": [
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 0,
              "endOffset": 9720,
              "count": 1
            },
            {
              "startOffset": 2278,
              "endOffset": 2294,
              "count": 0
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "buildApp",
          "ranges": [
            {
              "startOffset": 803,
              "endOffset": 1909,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 1206,
              "endOffset": 1281,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "start",
          "ranges": [
            {
              "startOffset": 1910,
              "endOffset": 2224,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "357",
      "url": "file:///home/asigator/fitness2025/backend/src/routes/auth.ts",
      "functions": [
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 0,
              "endOffset": 23960,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "authRoutes",
          "ranges": [
            {
              "startOffset": 3045,
              "endOffset": 6195,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 3133,
              "endOffset": 4054,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 4102,
              "endOffset": 4934,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 5003,
              "endOffset": 6191,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "358",
      "url": "file:///home/asigator/fitness2025/backend/src/routes/workouts.ts",
      "functions": [
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 0,
              "endOffset": 31538,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "workoutRoutes",
          "ranges": [
            {
              "startOffset": 4386,
              "endOffset": 8905,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 4534,
              "endOffset": 5236,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 5345,
              "endOffset": 7082,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 7944,
              "endOffset": 8901,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "359",
      "url": "file:///home/asigator/fitness2025/backend/src/routes/sets.ts",
      "functions": [
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 0,
              "endOffset": 16820,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "setRoutes",
          "ranges": [
            {
              "startOffset": 2693,
              "endOffset": 4571,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 2787,
              "endOffset": 3374,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 3474,
              "endOffset": 4567,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "360",
      "url": "file:///home/asigator/fitness2025/backend/src/routes/recovery.ts",
      "functions": [
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 0,
              "endOffset": 17552,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "recoveryRoutes",
          "ranges": [
            {
              "startOffset": 1700,
              "endOffset": 4375,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 1864,
              "endOffset": 3237,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 3341,
              "endOffset": 4371,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "361",
      "url": "file:///home/asigator/fitness2025/backend/src/routes/analytics.ts",
      "functions": [
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 0,
              "endOffset": 25027,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "analyticsRoutes",
          "ranges": [
            {
              "startOffset": 1755,
              "endOffset": 6350,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 1924,
              "endOffset": 2693,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 2821,
              "endOffset": 3256,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 3355,
              "endOffset": 3795,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 3888,
              "endOffset": 5604,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 5707,
              "endOffset": 6346,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "362",
      "url": "file:///home/asigator/fitness2025/backend/src/routes/programDays.ts",
      "functions": [
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 0,
              "endOffset": 22473,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "programDaysRoutes",
          "ranges": [
            {
              "startOffset": 2293,
              "endOffset": 6020,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 2450,
              "endOffset": 3771,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 3905,
              "endOffset": 6016,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "363",
      "url": "file:///home/asigator/fitness2025/backend/src/routes/exercises.ts",
      "functions": [
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 0,
              "endOffset": 19469,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "exerciseRoutes",
          "ranges": [
            {
              "startOffset": 152,
              "endOffset": 5896,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 2754,
              "endOffset": 3623,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 5121,
              "endOffset": 5892,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "364",
      "url": "file:///home/asigator/fitness2025/backend/src/routes/programs.ts",
      "functions": [
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 0,
              "endOffset": 40846,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "programRoutes",
          "ranges": [
            {
              "startOffset": 5650,
              "endOffset": 11841,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 5795,
              "endOffset": 7501,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 7630,
              "endOffset": 9666,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 9783,
              "endOffset": 11837,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "365",
      "url": "file:///home/asigator/fitness2025/backend/src/routes/program-exercises.ts",
      "functions": [
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 0,
              "endOffset": 47854,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "validateUserOwnership",
          "ranges": [
            {
              "startOffset": 178,
              "endOffset": 547,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "validateProgramDayOwnership",
          "ranges": [
            {
              "startOffset": 548,
              "endOffset": 854,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "programExerciseRoutes",
          "ranges": [
            {
              "startOffset": 870,
              "endOffset": 11897,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 989,
              "endOffset": 2061,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 2136,
              "endOffset": 4335,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 4413,
              "endOffset": 5445,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 5525,
              "endOffset": 7287,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 7368,
              "endOffset": 8324,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 8407,
              "endOffset": 9781,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 9871,
              "endOffset": 11893,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "366",
      "url": "file:///home/asigator/fitness2025/backend/src/routes/vo2max.ts",
      "functions": [
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 0,
              "endOffset": 57664,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "transformSessionToResponse",
          "ranges": [
            {
              "startOffset": 4620,
              "endOffset": 5268,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "vo2maxRoutes",
          "ranges": [
            {
              "startOffset": 5284,
              "endOffset": 15895,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 5438,
              "endOffset": 9309,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 9425,
              "endOffset": 10765,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 10892,
              "endOffset": 11731,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 12045,
              "endOffset": 12775,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 12898,
              "endOffset": 15891,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "369",
      "url": "file:///home/asigator/fitness2025/backend/src/services/authService.ts",
      "functions": [
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 0,
              "endOffset": 9828,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "registerUser",
          "ranges": [
            {
              "startOffset": 233,
              "endOffset": 1085,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "loginUser",
          "ranges": [
            {
              "startOffset": 1093,
              "endOffset": 1639,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "370",
      "url": "file:///home/asigator/fitness2025/backend/src/middleware/auth.ts",
      "functions": [
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 0,
              "endOffset": 2805,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "authenticateJWT",
          "ranges": [
            {
              "startOffset": 7,
              "endOffset": 248,
              "count": 5
            },
            {
              "startOffset": 100,
              "endOffset": 111,
              "count": 0
            }
          ],
          "isBlockCoverage": true
        }
      ]
    },
    {
      "scriptId": "371",
      "url": "file:///home/asigator/fitness2025/backend/src/database/db.ts",
      "functions": [
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 0,
              "endOffset": 28184,
              "count": 1
            },
            {
              "startOffset": 450,
              "endOffset": 498,
              "count": 0
            },
            {
              "startOffset": 593,
              "endOffset": 606,
              "count": 0
            },
            {
              "startOffset": 1192,
              "endOffset": 1219,
              "count": 0
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "initializeSchema",
          "ranges": [
            {
              "startOffset": 784,
              "endOffset": 917,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "isInitialized",
          "ranges": [
            {
              "startOffset": 941,
              "endOffset": 1168,
              "count": 1
            },
            {
              "startOffset": 1131,
              "endOffset": 1166,
              "count": 0
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "calculateOneRepMax",
          "ranges": [
            {
              "startOffset": 6163,
              "endOffset": 6234,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "calculateVolumeAdjustment",
          "ranges": [
            {
              "startOffset": 6277,
              "endOffset": 6481,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "executeWithTiming",
          "ranges": [
            {
              "startOffset": 6516,
              "endOffset": 6775,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "transaction",
          "ranges": [
            {
              "startOffset": 6804,
              "endOffset": 6848,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "batchInsert",
          "ranges": [
            {
              "startOffset": 6877,
              "endOffset": 7049,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "closeDatabase",
          "ranges": [
            {
              "startOffset": 7080,
              "endOffset": 7152,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 7173,
              "endOffset": 7203,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 7227,
              "endOffset": 7278,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 7303,
              "endOffset": 7354,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "372",
      "url": "file:///home/asigator/fitness2025/backend/src/services/auditService.ts",
      "functions": [
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 0,
              "endOffset": 7833,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "logAuthEvent",
          "ranges": [
            {
              "startOffset": 63,
              "endOffset": 224,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "logDataExport",
          "ranges": [
            {
              "startOffset": 232,
              "endOffset": 460,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "logAccountDeletion",
          "ranges": [
            {
              "startOffset": 468,
              "endOffset": 713,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "getAuditLogsByUser",
          "ranges": [
            {
              "startOffset": 721,
              "endOffset": 961,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "getAuditLogsByDateRange",
          "ranges": [
            {
              "startOffset": 969,
              "endOffset": 1280,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "373",
      "url": "file:///home/asigator/fitness2025/backend/src/services/workoutService.ts",
      "functions": [
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 0,
              "endOffset": 17209,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "createWorkout",
          "ranges": [
            {
              "startOffset": 229,
              "endOffset": 643,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "getProgramExercises",
          "ranges": [
            {
              "startOffset": 644,
              "endOffset": 941,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "listWorkouts",
          "ranges": [
            {
              "startOffset": 949,
              "endOffset": 1665,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "updateWorkoutStatus",
          "ranges": [
            {
              "startOffset": 1673,
              "endOffset": 3504,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "374",
      "url": "file:///home/asigator/fitness2025/backend/src/services/setService.ts",
      "functions": [
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 0,
              "endOffset": 10948,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "logSet",
          "ranges": [
            {
              "startOffset": 79,
              "endOffset": 1841,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "getSetsForWorkout",
          "ranges": [
            {
              "startOffset": 1849,
              "endOffset": 2135,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "375",
      "url": "file:///home/asigator/fitness2025/backend/src/services/recoveryService.ts",
      "functions": [
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 0,
              "endOffset": 9963,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "createAssessment",
          "ranges": [
            {
              "startOffset": 104,
              "endOffset": 2114,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "376",
      "url": "file:///home/asigator/fitness2025/backend/src/services/analyticsService.ts",
      "functions": [
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 0,
              "endOffset": 11162,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "get1RMProgression",
          "ranges": [
            {
              "startOffset": 714,
              "endOffset": 1000,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "getVolumeTrends",
          "ranges": [
            {
              "startOffset": 1008,
              "endOffset": 1431,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "getConsistencyMetrics",
          "ranges": [
            {
              "startOffset": 1439,
              "endOffset": 1841,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "377",
      "url": "file:///home/asigator/fitness2025/backend/src/services/volumeService.ts",
      "functions": [
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 0,
              "endOffset": 43044,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "getISOWeekBoundaries",
          "ranges": [
            {
              "startOffset": 1021,
              "endOffset": 1625,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "classifyZone",
          "ranges": [
            {
              "startOffset": 1626,
              "endOffset": 1929,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "classifyZoneWithOnTrack",
          "ranges": [
            {
              "startOffset": 1930,
              "endOffset": 2309,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "generateWarning",
          "ranges": [
            {
              "startOffset": 2310,
              "endOffset": 2666,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "getCurrentWeekVolume",
          "ranges": [
            {
              "startOffset": 2674,
              "endOffset": 5982,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "getVolumeHistory",
          "ranges": [
            {
              "startOffset": 5990,
              "endOffset": 8276,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "getProgramVolumeAnalysis",
          "ranges": [
            {
              "startOffset": 8284,
              "endOffset": 9795,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "378",
      "url": "file:///home/asigator/fitness2025/backend/src/services/exerciseService.ts",
      "functions": [
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 0,
              "endOffset": 11802,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "getExercises",
          "ranges": [
            {
              "startOffset": 319,
              "endOffset": 2107,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "getExerciseById",
          "ranges": [
            {
              "startOffset": 2115,
              "endOffset": 2641,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "379",
      "url": "file:///home/asigator/fitness2025/backend/src/services/programService.ts",
      "functions": [
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 0,
              "endOffset": 39919,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "getProgramExerciseTemplate",
          "ranges": [
            {
              "startOffset": 612,
              "endOffset": 3245,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "createDefaultProgram",
          "ranges": [
            {
              "startOffset": 3254,
              "endOffset": 5088,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "getUserProgram",
          "ranges": [
            {
              "startOffset": 5096,
              "endOffset": 5282,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "getProgramDays",
          "ranges": [
            {
              "startOffset": 5290,
              "endOffset": 5469,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "getProgramDayExercises",
          "ranges": [
            {
              "startOffset": 5477,
              "endOffset": 5828,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "advancePhase",
          "ranges": [
            {
              "startOffset": 5836,
              "endOffset": 9057,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "calculateMultiplierForTransition",
          "ranges": [
            {
              "startOffset": 9058,
              "endOffset": 9374,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "380",
      "url": "file:///home/asigator/fitness2025/backend/src/services/programExerciseService.ts",
      "functions": [
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 0,
              "endOffset": 42311,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "getProgramExercises",
          "ranges": [
            {
              "startOffset": 793,
              "endOffset": 1462,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "createProgramExercise",
          "ranges": [
            {
              "startOffset": 1470,
              "endOffset": 2915,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "updateProgramExercise",
          "ranges": [
            {
              "startOffset": 2923,
              "endOffset": 4370,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "deleteProgramExercise",
          "ranges": [
            {
              "startOffset": 4378,
              "endOffset": 5044,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "swapExercise",
          "ranges": [
            {
              "startOffset": 5052,
              "endOffset": 6528,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "reorderExercises",
          "ranges": [
            {
              "startOffset": 6536,
              "endOffset": 6912,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "calculateVolumeWarning",
          "ranges": [
            {
              "startOffset": 6913,
              "endOffset": 8716,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "checkVolumeThresholds",
          "ranges": [
            {
              "startOffset": 8717,
              "endOffset": 9578,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "381",
      "url": "file:///home/asigator/fitness2025/backend/src/services/vo2maxService.ts",
      "functions": [
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 0,
              "endOffset": 26242,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "estimateVO2max",
          "ranges": [
            {
              "startOffset": 47,
              "endOffset": 244,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "validateSessionData",
          "ranges": [
            {
              "startOffset": 245,
              "endOffset": 1984,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "createVO2maxSession",
          "ranges": [
            {
              "startOffset": 1992,
              "endOffset": 3584,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "getVO2maxSessions",
          "ranges": [
            {
              "startOffset": 3592,
              "endOffset": 4537,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "getVO2maxProgression",
          "ranges": [
            {
              "startOffset": 4545,
              "endOffset": 5288,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "getVO2maxSessionById",
          "ranges": [
            {
              "startOffset": 5296,
              "endOffset": 5649,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        }
      ]
    }
  ],
  "timestamp": 600.410232,
  "source-map-cache": {
    "file:///home/asigator/fitness2025/backend/src/server.ts": {
      "lineLengths": [
        30,
        33,
        31,
        42,
        49,
        41,
        50,
        52,
        56,
        51,
        49,
        66,
        46,
        87,
        54,
        43,
        34,
        25,
        17,
        51,
        10,
        25,
        7,
        30,
        21,
        26,
        7,
        29,
        27,
        15,
        29,
        10,
        7,
        36,
        55,
        7,
        55,
        58,
        54,
        59,
        60,
        62,
        69,
        58,
        66,
        57,
        15,
        1,
        24,
        9,
        37,
        53,
        75,
        5,
        17,
        54,
        24,
        5,
        1,
        54,
        12,
        1,
        24,
        7400
      ],
      "data": {
        "version": 3,
        "file": "/home/asigator/fitness2025/backend/src/server.ts",
        "sources": [
          "file:///home/asigator/fitness2025/backend/src/server.ts"
        ],
        "names": [],
        "mappings": "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",
        "sourcesContent": [
          "/**\n * FitFlow Pro Backend Server\n *\n * Fastify API server with JWT authentication, SQLite database, and REST endpoints\n */\n\nimport Fastify from 'fastify';\nimport cors from '@fastify/cors';\nimport jwt from '@fastify/jwt';\nimport authRoutes from './routes/auth.js';\nimport workoutRoutes from './routes/workouts.js';\nimport setRoutes from './routes/sets.js';\nimport recoveryRoutes from './routes/recovery.js';\nimport analyticsRoutes from './routes/analytics.js';\nimport programDaysRoutes from './routes/programDays.js';\nimport exerciseRoutes from './routes/exercises.js';\nimport programRoutes from './routes/programs.js';\nimport programExerciseRoutes from './routes/program-exercises.js';\nimport vo2maxRoutes from './routes/vo2max.js';\n\nconst JWT_SECRET = process.env.JWT_SECRET || 'fitflow-dev-secret-change-in-production';\nconst PORT = parseInt(process.env.PORT || '3000', 10);\nconst HOST = process.env.HOST || '0.0.0.0';\n\n/**\n * Build Fastify application instance\n */\nexport async function buildApp() {\n  const app = Fastify({\n    logger: {\n      level: process.env.LOG_LEVEL || 'info',\n    },\n    trustProxy: true, // Required for Nginx reverse proxy (X-Forwarded-* headers)\n  });\n\n  // Register CORS\n  await app.register(cors, {\n    origin: true, // Allow all origins in development\n    credentials: true,\n  });\n\n  // Register JWT plugin\n  await app.register(jwt, {\n    secret: JWT_SECRET,\n    sign: {\n      expiresIn: '30d', // 30-day expiration (justified constitutional violation for home server)\n    },\n  });\n\n  // Health check endpoint\n  app.get('/health', async () => {\n    return { status: 'ok', timestamp: Date.now() };\n  });\n\n  // Register routes\n  await app.register(authRoutes, { prefix: '/api' });\n  await app.register(workoutRoutes, { prefix: '/api' });\n  await app.register(setRoutes, { prefix: '/api' });\n  await app.register(recoveryRoutes, { prefix: '/api' });\n  await app.register(analyticsRoutes, { prefix: '/api' });\n  await app.register(programDaysRoutes, { prefix: '/api' });\n  await app.register(exerciseRoutes, { prefix: '/api/exercises' });\n  await app.register(programRoutes, { prefix: '/api' });\n  await app.register(programExerciseRoutes, { prefix: '/api' });\n  await app.register(vo2maxRoutes, { prefix: '/api' });\n\n  return app;\n}\n\n/**\n * Start server (only if running directly, not in tests)\n */\nasync function start() {\n  try {\n    const app = await buildApp();\n    await app.listen({ port: PORT, host: HOST });\n    console.log(`FitFlow Pro API server listening on ${HOST}:${PORT}`);\n  } catch (err) {\n    console.error('Failed to start server:', err);\n    process.exit(1);\n  }\n}\n\n// Only start if this is the main module\nif (import.meta.url === `file://${process.argv[1]}`) {\n  start();\n}\n\nexport default buildApp;\n"
        ],
        "sourceRoot": ""
      }
    },
    "file:///home/asigator/fitness2025/backend/src/routes/auth.ts": {
      "lineLengths": [
        69,
        56,
        51,
        79,
        24,
        13,
        15,
        27,
        47,
        25,
        27,
        35,
        36,
        73,
        18,
        27,
        35,
        33,
        67,
        18,
        22,
        36,
        32,
        33,
        59,
        18,
        28,
        35,
        32,
        33,
        62,
        18,
        35,
        35,
        67,
        61,
        18,
        14,
        10,
        19,
        18,
        31,
        29,
        48,
        47,
        49,
        46,
        18,
        14,
        10,
        6,
        2,
        21,
        13,
        15,
        27,
        47,
        25,
        27,
        35,
        54,
        18,
        27,
        35,
        49,
        18,
        14,
        10,
        19,
        18,
        31,
        29,
        46,
        27,
        39,
        37,
        51,
        57,
        52,
        58,
        65,
        59,
        59,
        26,
        22,
        18,
        14,
        10,
        6,
        2,
        51,
        78,
        13,
        90,
        140,
        54,
        41,
        80,
        50,
        9,
        23,
        88,
        47,
        53,
        19,
        13,
        37,
        43,
        45,
        15,
        9,
        7,
        72,
        13,
        56,
        103,
        54,
        41,
        77,
        50,
        9,
        23,
        84,
        47,
        49,
        19,
        13,
        37,
        43,
        38,
        15,
        9,
        7,
        93,
        13,
        59,
        51,
        32,
        47,
        45,
        19,
        13,
        54,
        47,
        78,
        19,
        13,
        46,
        54,
        84,
        54,
        39,
        47,
        44,
        19,
        13,
        44,
        9,
        23,
        37,
        43,
        55,
        15,
        9,
        7,
        1,
        17764
      ],
      "data": {
        "version": 3,
        "file": "/home/asigator/fitness2025/backend/src/routes/auth.ts",
        "sources": [
          "file:///home/asigator/fitness2025/backend/src/routes/auth.ts"
        ],
        "names": [],
        "mappings": "AAOA,OAAO,EAAE,YAAY,EAAE,SAAS,EAAE,MAAM,4BAA4B,CAAC;AACrE,OAAO,EAAE,eAAe,EAAwB,MAAM,uBAAuB,CAAC;AAC9E,OAAO,EAAE,cAAc,EAAE,MAAM,mBAAmB,CAAC;AACnD,OAAO,EAAE,YAAY,EAAE,kBAAkB,EAAE,MAAM,6BAA6B,CAAC;AAK/E,MAAM,cAAc,GAAG;IACrB,MAAM,EAAE;QACN,IAAI,EAAE;YACJ,IAAI,EAAE,QAAQ;YACd,QAAQ,EAAE,CAAC,UAAU,EAAE,UAAU,CAAC;YAClC,UAAU,EAAE;gBACV,QAAQ,EAAE;oBACR,IAAI,EAAE,QAAQ;oBACd,MAAM,EAAE,OAAO;oBACf,WAAW,EAAE,uCAAuC;iBACrD;gBACD,QAAQ,EAAE;oBACR,IAAI,EAAE,QAAQ;oBACd,SAAS,EAAE,CAAC;oBACZ,WAAW,EAAE,iCAAiC;iBAC/C;gBACD,GAAG,EAAE;oBACH,IAAI,EAAE,SAAS;oBACf,OAAO,EAAE,EAAE;oBACX,OAAO,EAAE,GAAG;oBACZ,WAAW,EAAE,yBAAyB;iBACvC;gBACD,SAAS,EAAE;oBACT,IAAI,EAAE,QAAQ;oBACd,OAAO,EAAE,EAAE;oBACX,OAAO,EAAE,GAAG;oBACZ,WAAW,EAAE,4BAA4B;iBAC1C;gBACD,gBAAgB,EAAE;oBAChB,IAAI,EAAE,QAAQ;oBACd,IAAI,EAAE,CAAC,UAAU,EAAE,cAAc,EAAE,UAAU,CAAC;oBAC9C,WAAW,EAAE,2BAA2B;iBACzC;aACF;SACF;QACD,QAAQ,EAAE;YACR,GAAG,EAAE;gBACH,IAAI,EAAE,QAAQ;gBACd,UAAU,EAAE;oBACV,OAAO,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;oBAC3B,MAAM,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;oBAC1B,QAAQ,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;oBAC5B,KAAK,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;iBAC1B;aACF;SACF;KACF;CACF,CAAC;AAKF,MAAM,WAAW,GAAG;IAClB,MAAM,EAAE;QACN,IAAI,EAAE;YACJ,IAAI,EAAE,QAAQ;YACd,QAAQ,EAAE,CAAC,UAAU,EAAE,UAAU,CAAC;YAClC,UAAU,EAAE;gBACV,QAAQ,EAAE;oBACR,IAAI,EAAE,QAAQ;oBACd,WAAW,EAAE,oBAAoB;iBAClC;gBACD,QAAQ,EAAE;oBACR,IAAI,EAAE,QAAQ;oBACd,WAAW,EAAE,eAAe;iBAC7B;aACF;SACF;QACD,QAAQ,EAAE;YACR,GAAG,EAAE;gBACH,IAAI,EAAE,QAAQ;gBACd,UAAU,EAAE;oBACV,KAAK,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;oBACzB,IAAI,EAAE;wBACJ,IAAI,EAAE,QAAQ;wBACd,UAAU,EAAE;4BACV,EAAE,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;4BACtB,QAAQ,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;4BAC5B,GAAG,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;4BACvB,SAAS,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;4BAC7B,gBAAgB,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;4BACpC,UAAU,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;4BAC9B,UAAU,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;yBAC/B;qBACF;iBACF;aACF;SACF;KACF;CACF,CAAC;AA+BF,MAAM,CAAC,OAAO,CAAC,KAAK,UAAU,UAAU,CAAC,OAAwB;IAO/D,OAAO,CAAC,IAAI,CACV,gBAAgB,EAChB,cAAc,EACd,KAAK,EAAE,OAA+C,EAAE,KAAmB,EAAE,EAAE;QAC7E,IAAI,CAAC;YACH,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,GAAG,EAAE,SAAS,EAAE,gBAAgB,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC;YAG9E,MAAM,MAAM,GAAG,MAAM,YAAY,CAC/B,QAAQ,EACR,QAAQ,EACR,GAAG,EACH,SAAS,EACT,gBAAgB,EAChB,CAAC,OAAO,EAAE,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,CACvC,CAAC;YAGF,MAAM,SAAS,GAAG,OAAO,CAAC,EAAE,IAAI,SAAS,CAAC;YAC1C,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;YAC7B,YAAY,CAAC,MAAM,CAAC,OAAO,EAAE,eAAe,EAAE,SAAS,EAAE,SAAS,CAAC,CAAC;YAEpE,OAAO,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACxC,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YAEf,IAAI,KAAK,YAAY,KAAK,IAAI,KAAK,CAAC,OAAO,KAAK,yBAAyB,EAAE,CAAC;gBAC1E,OAAO,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC5B,KAAK,EAAE,yBAAyB;iBACjC,CAAC,CAAC;YACL,CAAC;YAGD,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;YACzB,OAAO,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBAC5B,KAAK,EAAE,qBAAqB;aAC7B,CAAC,CAAC;QACL,CAAC;IACH,CAAC,CACF,CAAC;IAQF,OAAO,CAAC,IAAI,CACV,aAAa,EACb,WAAW,EACX,KAAK,EAAE,OAA4C,EAAE,KAAmB,EAAE,EAAE;QAC1E,IAAI,CAAC;YACH,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC;YAG5C,MAAM,MAAM,GAAG,MAAM,SAAS,CAC5B,QAAQ,EACR,QAAQ,EACR,CAAC,OAAO,EAAE,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,CACvC,CAAC;YAGF,MAAM,SAAS,GAAG,OAAO,CAAC,EAAE,IAAI,SAAS,CAAC;YAC1C,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;YAC7B,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,EAAE,YAAY,EAAE,SAAS,EAAE,SAAS,CAAC,CAAC;YAEjE,OAAO,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACxC,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YAEf,IAAI,KAAK,YAAY,KAAK,IAAI,KAAK,CAAC,OAAO,KAAK,qBAAqB,EAAE,CAAC;gBACtE,OAAO,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC5B,KAAK,EAAE,qBAAqB;iBAC7B,CAAC,CAAC;YACL,CAAC;YAGD,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;YACzB,OAAO,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBAC5B,KAAK,EAAE,cAAc;aACtB,CAAC,CAAC;QACL,CAAC;IACH,CAAC,CACF,CAAC;IAUF,OAAO,CAAC,MAAM,CACZ,YAAY,EACZ,EAAE,UAAU,EAAE,eAAe,EAAE,EAC/B,KAAK,EAAE,OAAqD,EAAE,KAAmB,EAAE,EAAE;QACnF,IAAI,CAAC;YACH,MAAM,MAAM,GAAG,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;YAC/C,MAAM,iBAAiB,GAAI,OAAgC,CAAC,IAAI,CAAC;YAGjE,IAAI,KAAK,CAAC,MAAM,CAAC,EAAE,CAAC;gBAClB,OAAO,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC5B,KAAK,EAAE,iBAAiB;iBACzB,CAAC,CAAC;YACL,CAAC;YAGD,IAAI,iBAAiB,CAAC,MAAM,KAAK,MAAM,EAAE,CAAC;gBACxC,OAAO,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC5B,KAAK,EAAE,kDAAkD;iBAC1D,CAAC,CAAC;YACL,CAAC;YAGD,MAAM,cAAc,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;YAClC,MAAM,SAAS,GAAG,OAAO,CAAC,EAAE,IAAI,SAAS,CAAC;YAC1C,kBAAkB,CAAC,MAAM,EAAE,cAAc,EAAE,SAAS,EAAE,gBAAgB,CAAC,CAAC;YAUxE,MAAM,MAAM,GAAG,cAAc,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;YAE1C,IAAI,MAAM,CAAC,OAAO,KAAK,CAAC,EAAE,CAAC;gBACzB,OAAO,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC5B,KAAK,EAAE,gBAAgB;iBACxB,CAAC,CAAC;YACL,CAAC;YAGD,OAAO,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,CAAC;QAClC,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;YACzB,OAAO,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBAC5B,KAAK,EAAE,+BAA+B;aACvC,CAAC,CAAC;QACL,CAAC;IACH,CAAC,CACF,CAAC;AACJ,CAAC",
        "sourcesContent": [
          "/**\n * Authentication Routes\n *\n * Endpoints for user registration, login, and account deletion\n */\n\nimport { FastifyInstance, FastifyRequest, FastifyReply } from 'fastify';\nimport { registerUser, loginUser } from '../services/authService.js';\nimport { authenticateJWT, AuthenticatedRequest } from '../middleware/auth.js';\nimport { stmtDeleteUser } from '../database/db.js';\nimport { logAuthEvent, logAccountDeletion } from '../services/auditService.js';\n\n/**\n * Registration request schema\n */\nconst registerSchema = {\n  schema: {\n    body: {\n      type: 'object',\n      required: ['username', 'password'],\n      properties: {\n        username: {\n          type: 'string',\n          format: 'email',\n          description: 'User email address (used as username)',\n        },\n        password: {\n          type: 'string',\n          minLength: 8,\n          description: 'Password (minimum 8 characters)',\n        },\n        age: {\n          type: 'integer',\n          minimum: 13,\n          maximum: 100,\n          description: 'User age (13-100 years)',\n        },\n        weight_kg: {\n          type: 'number',\n          minimum: 30,\n          maximum: 300,\n          description: 'User weight in kg (30-300)',\n        },\n        experience_level: {\n          type: 'string',\n          enum: ['beginner', 'intermediate', 'advanced'],\n          description: 'Training experience level',\n        },\n      },\n    },\n    response: {\n      201: {\n        type: 'object',\n        properties: {\n          user_id: { type: 'number' },\n          userId: { type: 'number' },\n          username: { type: 'string' },\n          token: { type: 'string' },\n        },\n      },\n    },\n  },\n};\n\n/**\n * Login request schema\n */\nconst loginSchema = {\n  schema: {\n    body: {\n      type: 'object',\n      required: ['username', 'password'],\n      properties: {\n        username: {\n          type: 'string',\n          description: 'User email address',\n        },\n        password: {\n          type: 'string',\n          description: 'User password',\n        },\n      },\n    },\n    response: {\n      200: {\n        type: 'object',\n        properties: {\n          token: { type: 'string' },\n          user: {\n            type: 'object',\n            properties: {\n              id: { type: 'number' },\n              username: { type: 'string' },\n              age: { type: 'number' },\n              weight_kg: { type: 'number' },\n              experience_level: { type: 'string' },\n              created_at: { type: 'number' },\n              updated_at: { type: 'number' },\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\n/**\n * Registration request body interface\n */\ninterface RegisterBody {\n  username: string;\n  password: string;\n  age?: number;\n  weight_kg?: number;\n  experience_level?: 'beginner' | 'intermediate' | 'advanced';\n}\n\n/**\n * Login request body interface\n */\ninterface LoginBody {\n  username: string;\n  password: string;\n}\n\n/**\n * Delete user route params interface\n */\ninterface DeleteUserParams {\n  id: string;\n}\n\n/**\n * Register authentication routes\n */\nexport default async function authRoutes(fastify: FastifyInstance) {\n  /**\n   * POST /api/auth/register\n   *\n   * Register a new user with email (username), password, and optional profile data\n   * Returns user_id and JWT token on success\n   */\n  fastify.post<{ Body: RegisterBody }>(\n    '/auth/register',\n    registerSchema,\n    async (request: FastifyRequest<{ Body: RegisterBody }>, reply: FastifyReply) => {\n      try {\n        const { username, password, age, weight_kg, experience_level } = request.body;\n\n        // Call authentication service\n        const result = await registerUser(\n          username,\n          password,\n          age,\n          weight_kg,\n          experience_level,\n          (payload) => fastify.jwt.sign(payload)\n        );\n\n        // Log successful registration\n        const ipAddress = request.ip || 'unknown';\n        const timestamp = Date.now();\n        logAuthEvent(result.user_id, 'auth_register', ipAddress, timestamp);\n\n        return reply.status(201).send(result);\n      } catch (error) {\n        // Handle duplicate username error\n        if (error instanceof Error && error.message === 'Username already exists') {\n          return reply.status(409).send({\n            error: 'Username already exists',\n          });\n        }\n\n        // Generic error\n        fastify.log.error(error);\n        return reply.status(400).send({\n          error: 'Registration failed',\n        });\n      }\n    }\n  );\n\n  /**\n   * POST /api/auth/login\n   *\n   * Login with username (email) and password\n   * Returns JWT token and user data on success\n   */\n  fastify.post<{ Body: LoginBody }>(\n    '/auth/login',\n    loginSchema,\n    async (request: FastifyRequest<{ Body: LoginBody }>, reply: FastifyReply) => {\n      try {\n        const { username, password } = request.body;\n\n        // Call authentication service\n        const result = await loginUser(\n          username,\n          password,\n          (payload) => fastify.jwt.sign(payload)\n        );\n\n        // Log successful login\n        const ipAddress = request.ip || 'unknown';\n        const timestamp = Date.now();\n        logAuthEvent(result.user.id, 'auth_login', ipAddress, timestamp);\n\n        return reply.status(200).send(result);\n      } catch (error) {\n        // Handle invalid credentials error\n        if (error instanceof Error && error.message === 'Invalid credentials') {\n          return reply.status(401).send({\n            error: 'Invalid credentials',\n          });\n        }\n\n        // Generic error\n        fastify.log.error(error);\n        return reply.status(401).send({\n          error: 'Login failed',\n        });\n      }\n    }\n  );\n\n  /**\n   * DELETE /api/users/:id\n   *\n   * Delete user account (requires JWT authentication)\n   * User can only delete their own account\n   * Cascade deletes all related data: workouts, sets, recovery assessments, programs\n   * Returns 204 No Content on success\n   */\n  fastify.delete<{ Params: DeleteUserParams }>(\n    '/users/:id',\n    { preHandler: authenticateJWT },\n    async (request: FastifyRequest<{ Params: DeleteUserParams }>, reply: FastifyReply) => {\n      try {\n        const userId = parseInt(request.params.id, 10);\n        const authenticatedUser = (request as AuthenticatedRequest).user;\n\n        // Validate user ID\n        if (isNaN(userId)) {\n          return reply.status(400).send({\n            error: 'Invalid user ID',\n          });\n        }\n\n        // Users can only delete their own account\n        if (authenticatedUser.userId !== userId) {\n          return reply.status(403).send({\n            error: 'Forbidden - You can only delete your own account',\n          });\n        }\n\n        // Log deletion to audit log before deleting user\n        const auditTimestamp = Date.now();\n        const ipAddress = request.ip || 'unknown';\n        logAccountDeletion(userId, auditTimestamp, ipAddress, 'user_initiated');\n\n        // Delete user (cascade delete handled by database foreign keys)\n        // ON DELETE CASCADE will remove:\n        // - workouts → sets (via workout_id FK)\n        // - recovery_assessments\n        // - vo2max_sessions (via workout_id FK)\n        // - programs\n        // - active_sessions\n        // - audit_logs\n        const result = stmtDeleteUser.run(userId);\n\n        if (result.changes === 0) {\n          return reply.status(404).send({\n            error: 'User not found',\n          });\n        }\n\n        // Return 204 No Content on success (no body)\n        return reply.status(204).send();\n      } catch (error) {\n        fastify.log.error(error);\n        return reply.status(500).send({\n          error: 'Failed to delete user account',\n        });\n      }\n    }\n  );\n}\n"
        ],
        "sourceRoot": ""
      }
    },
    "file:///home/asigator/fitness2025/backend/src/routes/workouts.ts": {
      "lineLengths": [
        97,
        56,
        59,
        29,
        13,
        15,
        27,
        49,
        25,
        33,
        36,
        80,
        18,
        23,
        35,
        54,
        67,
        18,
        14,
        10,
        19,
        18,
        31,
        29,
        43,
        48,
        55,
        45,
        61,
        63,
        29,
        39,
        87,
        22,
        66,
        62,
        47,
        18,
        14,
        10,
        6,
        2,
        28,
        13,
        22,
        27,
        25,
        29,
        35,
        54,
        66,
        18,
        27,
        35,
        54,
        64,
        18,
        29,
        36,
        64,
        18,
        14,
        10,
        19,
        18,
        30,
        24,
        35,
        33,
        47,
        52,
        59,
        49,
        65,
        67,
        33,
        43,
        91,
        26,
        70,
        66,
        51,
        63,
        35,
        53,
        63,
        26,
        36,
        42,
        36,
        47,
        45,
        59,
        71,
        68,
        70,
        68,
        61,
        61,
        60,
        34,
        30,
        26,
        22,
        18,
        14,
        10,
        6,
        2,
        54,
        31,
        31,
        36,
        34,
        13,
        58,
        51,
        90,
        51,
        9,
        23,
        83,
        47,
        41,
        19,
        13,
        37,
        43,
        50,
        15,
        9,
        7,
        30,
        30,
        36,
        34,
        13,
        71,
        51,
        43,
        67,
        31,
        82,
        17,
        67,
        102,
        17,
        105,
        49,
        46,
        48,
        37,
        53,
        39,
        39,
        41,
        44,
        31,
        59,
        59,
        30,
        18,
        68,
        13,
        90,
        52,
        9,
        23,
        37,
        43,
        49,
        15,
        9,
        7,
        36,
        36,
        17,
        21,
        31,
        29,
        43,
        18,
        33,
        14,
        19,
        31,
        29,
        29,
        39,
        87,
        22,
        37,
        40,
        119,
        22,
        18,
        33,
        14,
        10,
        34,
        13,
        62,
        60,
        51,
        109,
        51,
        9,
        23,
        41,
        60,
        56,
        64,
        51,
        45,
        23,
        17,
        13,
        37,
        43,
        50,
        15,
        9,
        7,
        1,
        22632
      ],
      "data": {
        "version": 3,
        "file": "/home/asigator/fitness2025/backend/src/routes/workouts.ts",
        "sources": [
          "file:///home/asigator/fitness2025/backend/src/routes/workouts.ts"
        ],
        "names": [],
        "mappings": "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",
        "sourcesContent": [
          "/**\n * Workout Routes\n *\n * REST endpoints for workout session management:\n * - POST /api/workouts - Create new workout session\n * - GET /api/workouts - List user's workouts with optional date filtering\n */\n\nimport { FastifyInstance, FastifyRequest, FastifyReply } from 'fastify';\nimport { createWorkout, listWorkouts, updateWorkoutStatus } from '../services/workoutService.js';\nimport { authenticateJWT, AuthenticatedRequest } from '../middleware/auth.js';\nimport { stmtGetWorkoutById, db } from '../database/db.js';\n\n/**\n * Create workout request body interface\n */\ninterface CreateWorkoutBody {\n  program_day_id: number;\n  date: string;\n}\n\n/**\n * List workouts query parameters interface\n */\ninterface ListWorkoutsQuery {\n  start_date?: string;\n  end_date?: string;\n  workout_id?: number;\n}\n\n/**\n * Create workout request schema\n */\nconst createWorkoutSchema = {\n  schema: {\n    body: {\n      type: 'object',\n      required: ['program_day_id', 'date'],\n      properties: {\n        program_day_id: {\n          type: 'integer',\n          description: 'ID of the program day (e.g., Push A, Pull A)',\n        },\n        date: {\n          type: 'string',\n          pattern: '^\\\\d{4}-\\\\d{2}-\\\\d{2}$',\n          description: 'Date in ISO format (YYYY-MM-DD)',\n        },\n      },\n    },\n    response: {\n      201: {\n        type: 'object',\n        properties: {\n          id: { type: 'number' },\n          user_id: { type: 'number' },\n          program_day_id: { type: 'number' },\n          date: { type: 'string' },\n          started_at: { type: ['number', 'null'] },\n          completed_at: { type: ['number', 'null'] },\n          status: {\n            type: 'string',\n            enum: ['not_started', 'in_progress', 'completed', 'cancelled'],\n          },\n          total_volume_kg: { type: ['number', 'null'] },\n          average_rir: { type: ['number', 'null'] },\n          synced: { type: 'number' },\n        },\n      },\n    },\n  },\n};\n\n/**\n * List workouts request schema\n */\nconst listWorkoutsSchema = {\n  schema: {\n    querystring: {\n      type: 'object',\n      properties: {\n        start_date: {\n          type: 'string',\n          pattern: '^\\\\d{4}-\\\\d{2}-\\\\d{2}$',\n          description: 'Start date filter (YYYY-MM-DD)',\n        },\n        end_date: {\n          type: 'string',\n          pattern: '^\\\\d{4}-\\\\d{2}-\\\\d{2}$',\n          description: 'End date filter (YYYY-MM-DD)',\n        },\n        workout_id: {\n          type: 'integer',\n          description: 'Fetch specific workout by ID',\n        },\n      },\n    },\n    response: {\n      200: {\n        type: 'array',\n        items: {\n          type: 'object',\n          properties: {\n            id: { type: 'number' },\n            user_id: { type: 'number' },\n            program_day_id: { type: 'number' },\n            date: { type: 'string' },\n            started_at: { type: ['number', 'null'] },\n            completed_at: { type: ['number', 'null'] },\n            status: {\n              type: 'string',\n              enum: ['not_started', 'in_progress', 'completed', 'cancelled'],\n            },\n            total_volume_kg: { type: ['number', 'null'] },\n            average_rir: { type: ['number', 'null'] },\n            synced: { type: 'number' },\n            day_name: { type: ['string', 'null'] },\n            day_type: {\n              type: ['string', 'null'],\n              enum: ['strength', 'vo2max', null],\n            },\n            exercises: {\n              type: 'array',\n              items: {\n                type: 'object',\n                properties: {\n                  id: { type: 'number' },\n                  program_day_id: { type: 'number' },\n                  exercise_id: { type: 'number' },\n                  exercise_name: { type: 'string' },\n                  order_index: { type: 'number' },\n                  sets: { type: 'number' },\n                  reps: { type: 'string' },\n                  rir: { type: 'number' },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\n/**\n * Register workout routes\n */\nexport default async function workoutRoutes(fastify: FastifyInstance) {\n  /**\n   * POST /api/workouts\n   *\n   * Create a new workout session for the authenticated user\n   * Returns the created workout object with status=not_started\n   *\n   * Requires JWT authentication\n   */\n  fastify.post<{ Body: CreateWorkoutBody }>(\n    '/workouts',\n    {\n      ...createWorkoutSchema,\n      preHandler: authenticateJWT,\n    },\n    async (\n      request: FastifyRequest<{ Body: CreateWorkoutBody }>,\n      reply: FastifyReply\n    ) => {\n      try {\n        const { program_day_id, date } = request.body;\n        const authenticatedUser = (request as AuthenticatedRequest).user;\n\n        // Create workout for authenticated user\n        const workout = createWorkout(\n          authenticatedUser.userId,\n          program_day_id,\n          date\n        );\n\n        return reply.status(201).send(workout);\n      } catch (error) {\n        // Handle validation errors\n        if (error instanceof Error && error.message.includes('Invalid date')) {\n          return reply.status(400).send({\n            error: error.message,\n          });\n        }\n\n        // Generic error\n        fastify.log.error(error);\n        return reply.status(500).send({\n          error: 'Failed to create workout',\n        });\n      }\n    }\n  );\n\n  /**\n   * GET /api/workouts\n   *\n   * List workouts for the authenticated user\n   * Optional query parameters for date filtering:\n   * - start_date: Return workouts on or after this date (YYYY-MM-DD)\n   * - end_date: Return workouts on or before this date (YYYY-MM-DD)\n   *\n   * Requires JWT authentication\n   */\n  fastify.get<{ Querystring: ListWorkoutsQuery }>(\n    '/workouts',\n    {\n      ...listWorkoutsSchema,\n      preHandler: authenticateJWT,\n    },\n    async (\n      request: FastifyRequest<{ Querystring: ListWorkoutsQuery }>,\n      reply: FastifyReply\n    ) => {\n      try {\n        const { start_date, end_date, workout_id } = request.query;\n        const authenticatedUser = (request as AuthenticatedRequest).user;\n\n        // If workout_id provided, fetch specific workout\n        if (workout_id !== undefined) {\n          const workout = stmtGetWorkoutById.get(workout_id) as any;\n\n          if (!workout) {\n            return reply.status(404).send({ error: 'Workout not found' });\n          }\n\n          // Verify ownership\n          if (workout.user_id !== authenticatedUser.userId) {\n            return reply.status(403).send({ error: 'Not authorized to access this workout' });\n          }\n\n          // Get program_day info and exercises\n          const programDay = db.prepare('SELECT day_name, day_type FROM program_days WHERE id = ?')\n            .get(workout.program_day_id) as any;\n\n          const exercises = db.prepare(`\n            SELECT pe.*, e.name as exercise_name\n            FROM program_exercises pe\n            JOIN exercises e ON pe.exercise_id = e.id\n            WHERE pe.program_day_id = ?\n            ORDER BY pe.order_index ASC\n          `).all(workout.program_day_id);\n\n          const workoutWithDetails = {\n            ...workout,\n            day_name: programDay?.day_name || null,\n            day_type: programDay?.day_type || null,\n            exercises,\n          };\n\n          return reply.status(200).send([workoutWithDetails]);\n        }\n\n        // Otherwise, list workouts with date filters\n        const workouts = listWorkouts(\n          authenticatedUser.userId,\n          start_date,\n          end_date\n        );\n\n        return reply.status(200).send(workouts);\n      } catch (error) {\n        // Generic error\n        fastify.log.error(error);\n        return reply.status(500).send({\n          error: 'Failed to list workouts',\n        });\n      }\n    }\n  );\n\n  /**\n   * PATCH /api/workouts/:id\n   *\n   * Update workout status (e.g., mark as completed) or change program_day_id\n   *\n   * Requires JWT authentication\n   */\n  fastify.patch<{\n    Params: { id: string };\n    Body: {\n      status?: 'not_started' | 'in_progress' | 'completed' | 'cancelled';\n      program_day_id?: number;\n    };\n  }>(\n    '/workouts/:id',\n    {\n      preHandler: authenticateJWT,\n      schema: {\n        params: {\n          type: 'object',\n          properties: {\n            id: { type: 'string' },\n          },\n          required: ['id'],\n        },\n        body: {\n          type: 'object',\n          properties: {\n            status: {\n              type: 'string',\n              enum: ['not_started', 'in_progress', 'completed', 'cancelled'],\n            },\n            program_day_id: {\n              type: 'integer',\n              description: 'Change the program day for this workout (only allowed if status is not_started)',\n            },\n          },\n          minProperties: 1, // Require at least one property\n        },\n      },\n    },\n    async (request, reply) => {\n      try {\n        const workoutId = parseInt(request.params.id, 10);\n        const { status, program_day_id } = request.body;\n        const authenticatedUser = (request as AuthenticatedRequest).user;\n\n        const workout = updateWorkoutStatus(\n          authenticatedUser.userId,\n          workoutId,\n          status,\n          program_day_id\n        );\n        return reply.status(200).send(workout);\n      } catch (error) {\n        // Handle validation errors\n        if (error instanceof Error) {\n          if (\n            error.message.includes('not allowed') ||\n            error.message.includes('Invalid') ||\n            error.message.includes('does not belong')\n          ) {\n            return reply.status(400).send({\n              error: error.message,\n            });\n          }\n        }\n\n        fastify.log.error(error);\n        return reply.status(500).send({\n          error: 'Failed to update workout',\n        });\n      }\n    }\n  );\n}\n"
        ],
        "sourceRoot": ""
      }
    },
    "file:///home/asigator/fitness2025/backend/src/routes/sets.ts": {
      "lineLengths": [
        70,
        56,
        22,
        13,
        15,
        27,
        23,
        29,
        30,
        29,
        28,
        23,
        22,
        28,
        14,
        25,
        29,
        36,
        61,
        18,
        30,
        36,
        70,
        18,
        29,
        36,
        31,
        81,
        18,
        28,
        35,
        31,
        33,
        70,
        18,
        23,
        36,
        31,
        32,
        74,
        18,
        22,
        36,
        31,
        31,
        57,
        18,
        28,
        36,
        75,
        18,
        26,
        36,
        87,
        18,
        24,
        35,
        35,
        80,
        18,
        14,
        10,
        19,
        18,
        31,
        29,
        43,
        58,
        48,
        54,
        50,
        45,
        44,
        18,
        14,
        10,
        6,
        2,
        50,
        85,
        13,
        55,
        29,
        47,
        68,
        19,
        13,
        64,
        48,
        9,
        23,
        37,
        43,
        46,
        15,
        9,
        7,
        27,
        24,
        36,
        34,
        13,
        123,
        120,
        50,
        9,
        23,
        41,
        61,
        72,
        47,
        41,
        19,
        13,
        41,
        74,
        47,
        63,
        19,
        13,
        37,
        43,
        43,
        15,
        9,
        7,
        1,
        12248
      ],
      "data": {
        "version": 3,
        "file": "/home/asigator/fitness2025/backend/src/routes/sets.ts",
        "sources": [
          "file:///home/asigator/fitness2025/backend/src/routes/sets.ts"
        ],
        "names": [],
        "mappings": "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",
        "sourcesContent": [
          "/**\n * Set Logging Routes\n *\n * REST endpoints for exercise set tracking:\n * - POST /api/sets - Log individual exercise set with weight, reps, RIR\n */\n\nimport { FastifyInstance, FastifyRequest, FastifyReply } from 'fastify';\nimport { logSet, getSetsForWorkout } from '../services/setService.js';\nimport { authenticateJWT } from '../middleware/auth.js';\n\n/**\n * Log set request body interface\n */\ninterface LogSetBody {\n  workout_id: number;\n  exercise_id: number;\n  set_number: number;\n  weight_kg: number;\n  reps: number;\n  rir: number;\n  timestamp: number;\n  localId?: number;\n  notes?: string;\n}\n\n/**\n * Log set request schema\n */\nconst logSetSchema = {\n  schema: {\n    body: {\n      type: 'object',\n      required: [\n        'workout_id',\n        'exercise_id',\n        'set_number',\n        'weight_kg',\n        'reps',\n        'rir',\n        'timestamp',\n      ],\n      properties: {\n        workout_id: {\n          type: 'integer',\n          description: 'ID of the workout session',\n        },\n        exercise_id: {\n          type: 'integer',\n          description: 'ID of the exercise being performed',\n        },\n        set_number: {\n          type: 'integer',\n          minimum: 1,\n          description: 'Set number within the workout (1, 2, 3, etc.)',\n        },\n        weight_kg: {\n          type: 'number',\n          minimum: 0,\n          maximum: 500,\n          description: 'Weight lifted in kilograms (0-500)',\n        },\n        reps: {\n          type: 'integer',\n          minimum: 1,\n          maximum: 50,\n          description: 'Number of repetitions completed (1-50)',\n        },\n        rir: {\n          type: 'integer',\n          minimum: 0,\n          maximum: 4,\n          description: 'Reps in Reserve (0-4)',\n        },\n        timestamp: {\n          type: 'integer',\n          description: 'UTC milliseconds when set was completed',\n        },\n        localId: {\n          type: 'integer',\n          description: 'Optional local ID from mobile app for deduplication',\n        },\n        notes: {\n          type: 'string',\n          maxLength: 500,\n          description: 'Optional notes about the set (max 500 chars)',\n        },\n      },\n    },\n    response: {\n      201: {\n        type: 'object',\n        properties: {\n          id: { type: 'number' },\n          localId: { type: ['number', 'null'] },\n          synced: { type: 'boolean' },\n          estimated_1rm: { type: 'number' },\n          weight_kg: { type: 'number' },\n          reps: { type: 'number' },\n          rir: { type: 'number' },\n        },\n      },\n    },\n  },\n};\n\n/**\n * Register set logging routes\n */\nexport default async function setRoutes(fastify: FastifyInstance) {\n  /**\n   * GET /api/sets\n   *\n   * Fetch sets for a workout session\n   * Query param: workout_id (required)\n   *\n   * Requires JWT authentication\n   */\n  fastify.get<{ Querystring: { workout_id?: string } }>(\n    '/sets',\n    { preHandler: authenticateJWT },\n    async (\n      request: FastifyRequest<{ Querystring: { workout_id?: string } }>,\n      reply: FastifyReply\n    ) => {\n      try {\n        const workoutId = request.query.workout_id;\n\n        if (!workoutId) {\n          return reply.status(400).send({\n            error: 'workout_id query parameter is required',\n          });\n        }\n\n        const sets = getSetsForWorkout(parseInt(workoutId));\n\n        return reply.status(200).send(sets);\n      } catch (error) {\n        fastify.log.error(error);\n        return reply.status(500).send({\n          error: 'Failed to fetch sets',\n        });\n      }\n    }\n  );\n\n  /**\n   * POST /api/sets\n   *\n   * Log an exercise set for a workout session\n   * Implements idempotent sync via localId deduplication\n   *\n   * Validation rules (per FR-005):\n   * - weight_kg: 0-500\n   * - reps: 1-50\n   * - rir: 0-4\n   * - notes: max 500 characters\n   *\n   * Requires JWT authentication\n   */\n  fastify.post<{ Body: LogSetBody }>(\n    '/sets',\n    {\n      ...logSetSchema,\n      preHandler: authenticateJWT,\n    },\n    async (\n      request: FastifyRequest<{ Body: LogSetBody }>,\n      reply: FastifyReply\n    ) => {\n      try {\n        const {\n          workout_id,\n          exercise_id,\n          set_number,\n          weight_kg,\n          reps,\n          rir,\n          timestamp,\n          localId,\n          notes,\n        } = request.body;\n\n        // Log the set\n        const result = logSet(\n          workout_id,\n          exercise_id,\n          set_number,\n          weight_kg,\n          reps,\n          rir,\n          timestamp,\n          localId,\n          notes\n        );\n\n        return reply.status(201).send(result);\n      } catch (error) {\n        // Handle validation errors\n        if (\n          error instanceof Error &&\n          (error.message.includes('must be between') ||\n            error.message.includes('must be 500 characters'))\n        ) {\n          return reply.status(400).send({\n            error: error.message,\n          });\n        }\n\n        // Handle database errors\n        if (\n          error instanceof Error &&\n          error.message.includes('FOREIGN KEY constraint failed')\n        ) {\n          return reply.status(400).send({\n            error: 'Invalid workout_id or exercise_id',\n          });\n        }\n\n        // Generic error\n        fastify.log.error(error);\n        return reply.status(500).send({\n          error: 'Failed to log set',\n        });\n      }\n    }\n  );\n}\n"
        ],
        "sourceRoot": ""
      }
    },
    "file:///home/asigator/fitness2025/backend/src/routes/recovery.ts": {
      "lineLengths": [
        66,
        56,
        39,
        32,
        13,
        15,
        27,
        88,
        25,
        23,
        35,
        54,
        78,
        18,
        32,
        36,
        31,
        31,
        68,
        18,
        34,
        36,
        31,
        31,
        70,
        18,
        36,
        36,
        31,
        31,
        72,
        18,
        14,
        10,
        19,
        18,
        31,
        29,
        52,
        40,
        39,
        84,
        22,
        18,
        14,
        10,
        6,
        2,
        55,
        43,
        34,
        36,
        34,
        13,
        93,
        47,
        109,
        50,
        9,
        23,
        41,
        61,
        71,
        47,
        41,
        19,
        13,
        41,
        74,
        47,
        45,
        19,
        13,
        41,
        69,
        47,
        78,
        19,
        13,
        37,
        43,
        62,
        15,
        9,
        7,
        56,
        36,
        34,
        13,
        59,
        51,
        40,
        47,
        71,
        19,
        13,
        65,
        33,
        60,
        45,
        36,
        30,
        47,
        59,
        19,
        13,
        54,
        9,
        23,
        37,
        43,
        61,
        15,
        9,
        7,
        1,
        13176
      ],
      "data": {
        "version": 3,
        "file": "/home/asigator/fitness2025/backend/src/routes/recovery.ts",
        "sources": [
          "file:///home/asigator/fitness2025/backend/src/routes/recovery.ts"
        ],
        "names": [],
        "mappings": "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",
        "sourcesContent": [
          "/**\n * Recovery Assessment Routes\n *\n * REST endpoints for daily recovery check-in and auto-regulation:\n * - POST /api/recovery-assessments - Submit daily 3-question assessment\n * - GET /api/recovery-assessments/:userId/today - Get today's assessment\n */\n\nimport { FastifyInstance, FastifyRequest, FastifyReply } from 'fastify';\nimport { createAssessment } from '../services/recoveryService.js';\nimport { authenticateJWT } from '../middleware/auth.js';\nimport { db } from '../database/db.js';\n\n/**\n * Recovery assessment request body interface\n */\ninterface CreateAssessmentBody {\n  date: string;\n  sleep_quality: number;\n  muscle_soreness: number;\n  mental_motivation: number;\n}\n\n/**\n * Recovery assessment request schema\n */\nconst createAssessmentSchema = {\n  schema: {\n    body: {\n      type: 'object',\n      required: ['date', 'sleep_quality', 'muscle_soreness', 'mental_motivation'],\n      properties: {\n        date: {\n          type: 'string',\n          pattern: '^\\\\d{4}-\\\\d{2}-\\\\d{2}$',\n          description: 'Assessment date in ISO format (YYYY-MM-DD)',\n        },\n        sleep_quality: {\n          type: 'integer',\n          minimum: 1,\n          maximum: 5,\n          description: 'Sleep quality rating (1-5 scale)',\n        },\n        muscle_soreness: {\n          type: 'integer',\n          minimum: 1,\n          maximum: 5,\n          description: 'Muscle soreness rating (1-5 scale)',\n        },\n        mental_motivation: {\n          type: 'integer',\n          minimum: 1,\n          maximum: 5,\n          description: 'Mental motivation rating (1-5 scale)',\n        },\n      },\n    },\n    response: {\n      201: {\n        type: 'object',\n        properties: {\n          total_score: { type: 'number' },\n          volume_adjustment: {\n            type: 'string',\n            enum: ['none', 'reduce_1_set', 'reduce_2_sets', 'rest_day'],\n          },\n        },\n      },\n    },\n  },\n};\n\n/**\n * Register recovery assessment routes\n */\nexport default async function recoveryRoutes(fastify: FastifyInstance) {\n  /**\n   * POST /api/recovery-assessments\n   *\n   * Create a daily recovery assessment for auto-regulation\n   *\n   * Calculates total score from 3 subscores (sleep, soreness, motivation)\n   * and determines volume adjustment per FR-009:\n   * - 12-15: No adjustment\n   * - 9-11: Reduce by 1 set per exercise\n   * - 6-8: Reduce by 2 sets per exercise\n   * - 3-5: Rest day recommended\n   *\n   * Validation rules (per FR-008):\n   * - date: ISO format YYYY-MM-DD\n   * - sleep_quality: 1-5\n   * - muscle_soreness: 1-5\n   * - mental_motivation: 1-5\n   *\n   * Requires JWT authentication\n   */\n  fastify.post<{ Body: CreateAssessmentBody }>(\n    '/recovery-assessments',\n    {\n      ...createAssessmentSchema,\n      preHandler: authenticateJWT,\n    },\n    async (\n      request: FastifyRequest<{ Body: CreateAssessmentBody }>,\n      reply: FastifyReply\n    ) => {\n      try {\n        const { date, sleep_quality, muscle_soreness, mental_motivation } = request.body;\n\n        // Get authenticated user ID\n        // @ts-expect-error - jwtVerify attaches user to request\n        const userId = request.user.userId;\n\n        // Create recovery assessment\n        const result = createAssessment(\n          userId,\n          date,\n          sleep_quality,\n          muscle_soreness,\n          mental_motivation\n        );\n\n        return reply.status(201).send(result);\n      } catch (error) {\n        // Handle validation errors\n        if (\n          error instanceof Error &&\n          (error.message.includes('must be between') ||\n            error.message.includes('must be in ISO format'))\n        ) {\n          return reply.status(400).send({\n            error: error.message,\n          });\n        }\n\n        // Handle database errors\n        if (\n          error instanceof Error &&\n          error.message.includes('FOREIGN KEY constraint failed')\n        ) {\n          return reply.status(400).send({\n            error: 'Invalid user_id',\n          });\n        }\n\n        // Handle unique constraint violations (duplicate assessment for date)\n        if (\n          error instanceof Error &&\n          error.message.includes('UNIQUE constraint failed')\n        ) {\n          return reply.status(400).send({\n            error: 'Recovery assessment already exists for this date',\n          });\n        }\n\n        // Generic error\n        fastify.log.error(error);\n        return reply.status(500).send({\n          error: 'Failed to create recovery assessment',\n        });\n      }\n    }\n  );\n\n  /**\n   * GET /api/recovery-assessments/:userId/today\n   *\n   * Get today's recovery assessment for a user\n   * Returns 404 if no assessment found for today\n   *\n   * Requires JWT authentication\n   */\n  fastify.get<{ Params: { userId: string } }>(\n    '/recovery-assessments/:userId/today',\n    {\n      preHandler: authenticateJWT,\n    },\n    async (\n      request: FastifyRequest<{ Params: { userId: string } }>,\n      reply: FastifyReply\n    ) => {\n      try {\n        const userId = parseInt(request.params.userId);\n\n        // Get authenticated user ID\n        // @ts-expect-error - jwtVerify attaches user to request\n        const authUserId = request.user.userId;\n\n        // Verify user can only access their own data\n        if (userId !== authUserId) {\n          return reply.status(403).send({\n            error: 'Forbidden: Cannot access other users data',\n          });\n        }\n\n        // Get today's date\n        const today = new Date().toISOString().split('T')[0];\n\n        // Query database\n        const assessment = db\n          .prepare(\n            `SELECT * FROM recovery_assessments\n             WHERE user_id = ? AND date = ?`\n          )\n          .get(userId, today);\n\n        if (!assessment) {\n          return reply.status(404).send({\n            error: 'No assessment found for today',\n          });\n        }\n\n        return reply.status(200).send(assessment);\n      } catch (error) {\n        fastify.log.error(error);\n        return reply.status(500).send({\n          error: 'Failed to fetch recovery assessment',\n        });\n      }\n    }\n  );\n}\n"
        ],
        "sourceRoot": ""
      }
    },
    "file:///home/asigator/fitness2025/backend/src/routes/analytics.ts": {
      "lineLengths": [
        92,
        113,
        56,
        32,
        13,
        22,
        27,
        64,
        25,
        30,
        35,
        47,
        18,
        29,
        35,
        54,
        59,
        18,
        27,
        35,
        54,
        57,
        18,
        14,
        10,
        19,
        18,
        30,
        24,
        35,
        33,
        49,
        58,
        22,
        18,
        14,
        10,
        6,
        2,
        34,
        13,
        19,
        18,
        31,
        29,
        55,
        61,
        55,
        18,
        14,
        10,
        6,
        2,
        56,
        47,
        34,
        36,
        34,
        13,
        72,
        51,
        57,
        36,
        47,
        49,
        19,
        13,
        110,
        55,
        9,
        23,
        37,
        43,
        60,
        15,
        9,
        7,
        43,
        36,
        36,
        34,
        13,
        51,
        76,
        51,
        9,
        23,
        37,
        43,
        64,
        15,
        9,
        7,
        51,
        36,
        34,
        13,
        51,
        78,
        54,
        9,
        23,
        37,
        43,
        64,
        15,
        9,
        7,
        45,
        36,
        34,
        13,
        51,
        70,
        26,
        29,
        49,
        48,
        51,
        85,
        23,
        17,
        33,
        51,
        71,
        23,
        17,
        13,
        31,
        43,
        72,
        67,
        101,
        61,
        18,
        64,
        51,
        64,
        23,
        17,
        13,
        98,
        57,
        9,
        23,
        37,
        43,
        58,
        15,
        9,
        7,
        55,
        36,
        34,
        13,
        51,
        87,
        35,
        47,
        62,
        19,
        13,
        59,
        9,
        23,
        37,
        43,
        68,
        15,
        9,
        7,
        1,
        18676
      ],
      "data": {
        "version": 3,
        "file": "/home/asigator/fitness2025/backend/src/routes/analytics.ts",
        "sources": [
          "file:///home/asigator/fitness2025/backend/src/routes/analytics.ts"
        ],
        "names": [],
        "mappings": "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",
        "sourcesContent": [
          "/**\n * Analytics Routes (T050-T052)\n *\n * Endpoints for 1RM progression, volume trends, and consistency metrics\n */\n\nimport { FastifyInstance, FastifyRequest, FastifyReply } from 'fastify';\nimport {\n  get1RMProgression,\n  getConsistencyMetrics,\n} from '../services/analyticsService.js';\nimport {\n  getCurrentWeekVolume,\n  getVolumeHistory,\n  getProgramVolumeAnalysis,\n} from '../services/volumeService.js';\nimport { authenticateJWT, AuthenticatedRequest } from '../middleware/auth.js';\n\n/**\n * Query params for 1RM progression\n */\ninterface OneRMProgressionQuery {\n  exercise_id: string;\n  start_date: string;\n  end_date: string;\n}\n\n/**\n * Schema for 1RM progression endpoint\n */\nconst oneRMProgressionSchema = {\n  schema: {\n    querystring: {\n      type: 'object',\n      required: ['exercise_id', 'start_date', 'end_date'],\n      properties: {\n        exercise_id: {\n          type: 'string',\n          description: 'Exercise ID',\n        },\n        start_date: {\n          type: 'string',\n          pattern: '^\\\\d{4}-\\\\d{2}-\\\\d{2}$',\n          description: 'Start date (YYYY-MM-DD)',\n        },\n        end_date: {\n          type: 'string',\n          pattern: '^\\\\d{4}-\\\\d{2}-\\\\d{2}$',\n          description: 'End date (YYYY-MM-DD)',\n        },\n      },\n    },\n    response: {\n      200: {\n        type: 'array',\n        items: {\n          type: 'object',\n          properties: {\n            date: { type: 'string' },\n            estimated_1rm: { type: 'number' },\n          },\n        },\n      },\n    },\n  },\n};\n\n/**\n * Schema for consistency metrics endpoint\n */\nconst consistencyMetricsSchema = {\n  schema: {\n    response: {\n      200: {\n        type: 'object',\n        properties: {\n          adherence_rate: { type: 'number' },\n          avg_session_duration: { type: 'number' },\n          total_workouts: { type: 'number' },\n        },\n      },\n    },\n  },\n};\n\n/**\n * Register analytics routes\n */\nexport default async function analyticsRoutes(fastify: FastifyInstance) {\n  /**\n   * GET /api/analytics/1rm-progression (T050)\n   *\n   * Get estimated 1RM progression for an exercise over time\n   *\n   * Query params:\n   * - exercise_id: Exercise ID\n   * - start_date: Start date (YYYY-MM-DD)\n   * - end_date: End date (YYYY-MM-DD)\n   *\n   * Returns: Array of {date, estimated_1rm}\n   */\n  fastify.get<{ Querystring: OneRMProgressionQuery }>(\n    '/analytics/1rm-progression',\n    {\n      ...oneRMProgressionSchema,\n      preHandler: authenticateJWT,\n    },\n    async (\n      request: FastifyRequest<{ Querystring: OneRMProgressionQuery }>,\n      reply: FastifyReply\n    ) => {\n      try {\n        const { exercise_id, start_date, end_date } = request.query;\n        const authenticatedUser = (request as AuthenticatedRequest).user;\n\n        // Convert exercise_id to number\n        const exerciseId = parseInt(exercise_id, 10);\n        if (isNaN(exerciseId)) {\n          return reply.status(400).send({\n            error: 'Invalid exercise_id',\n          });\n        }\n\n        // Call analytics service\n        const progression = get1RMProgression(\n          authenticatedUser.userId,\n          exerciseId,\n          start_date,\n          end_date\n        );\n\n        return reply.status(200).send(progression);\n      } catch (error) {\n        fastify.log.error(error);\n        return reply.status(500).send({\n          error: 'Failed to retrieve 1RM progression',\n        });\n      }\n    }\n  );\n\n  /**\n   * GET /api/analytics/consistency (T052)\n   *\n   * Get consistency metrics for the authenticated user\n   *\n   * Returns: {adherence_rate, avg_session_duration, total_workouts}\n   */\n  fastify.get(\n    '/analytics/consistency',\n    {\n      ...consistencyMetricsSchema,\n      preHandler: authenticateJWT,\n    },\n    async (request: FastifyRequest, reply: FastifyReply) => {\n      try {\n        const authenticatedUser = (request as AuthenticatedRequest).user;\n\n        // Call analytics service\n        const metrics = getConsistencyMetrics(authenticatedUser.userId);\n\n        return reply.status(200).send(metrics);\n      } catch (error) {\n        fastify.log.error(error);\n        return reply.status(500).send({\n          error: 'Failed to retrieve consistency metrics',\n        });\n      }\n    }\n  );\n\n  /**\n   * GET /api/analytics/volume-current-week (T017)\n   *\n   * Get current week volume tracking with completed and planned sets\n   *\n   * Returns: {week_start, week_end, muscle_groups: [{muscle_group, completed_sets, planned_sets, ...}]}\n   */\n  fastify.get(\n    '/analytics/volume-current-week',\n    {\n      preHandler: authenticateJWT,\n    },\n    async (request: FastifyRequest, reply: FastifyReply) => {\n      try {\n        const authenticatedUser = (request as AuthenticatedRequest).user;\n\n        // Call volume service\n        const volumeData = getCurrentWeekVolume(authenticatedUser.userId);\n\n        return reply.status(200).send(volumeData);\n      } catch (error) {\n        fastify.log.error(error);\n        return reply.status(500).send({\n          error: 'Failed to retrieve current week volume',\n        });\n      }\n    }\n  );\n\n  /**\n   * GET /api/analytics/volume-trends (T018)\n   *\n   * Get historical volume trends over multiple weeks\n   *\n   * Query params:\n   * - weeks: Number of weeks (default: 8, max: 52)\n   * - muscle_group: Optional filter for specific muscle group\n   *\n   * Returns: {weeks: [{week_start, muscle_groups: [{muscle_group, completed_sets, mev, mav, mrv}]}]}\n   */\n  fastify.get<{ Querystring: { weeks?: string; muscle_group?: string } }>(\n    '/analytics/volume-trends',\n    {\n      preHandler: authenticateJWT,\n    },\n    async (\n      request: FastifyRequest<{ Querystring: { weeks?: string; muscle_group?: string } }>,\n      reply: FastifyReply\n    ) => {\n      try {\n        const authenticatedUser = (request as AuthenticatedRequest).user;\n        const { weeks: weeksParam, muscle_group } = request.query;\n\n        // Parse weeks parameter\n        let weeks = 8; // Default\n        if (weeksParam) {\n          weeks = parseInt(weeksParam, 10);\n          if (isNaN(weeks) || weeks < 1) {\n            return reply.status(400).send({\n              error: 'Invalid weeks parameter. Must be a positive number.',\n            });\n          }\n          if (weeks > 52) {\n            return reply.status(400).send({\n              error: 'Weeks parameter exceeds maximum of 52',\n            });\n          }\n        }\n\n        // Validate muscle_group parameter\n        if (muscle_group) {\n          const validMuscleGroups = [\n            'chest', 'back', 'shoulders', 'quads', 'hamstrings',\n            'glutes', 'biceps', 'triceps', 'calves', 'abs',\n            'back_lats', 'back_traps', 'shoulders_front', 'shoulders_side', 'shoulders_rear',\n            'front_delts', 'side_delts', 'rear_delts'\n          ];\n\n          if (!validMuscleGroups.includes(muscle_group)) {\n            return reply.status(400).send({\n              error: 'Invalid muscle_group parameter',\n            });\n          }\n        }\n\n        // Call volume service\n        const volumeHistory = getVolumeHistory(authenticatedUser.userId, weeks, muscle_group);\n\n        return reply.status(200).send(volumeHistory);\n      } catch (error) {\n        fastify.log.error(error);\n        return reply.status(500).send({\n          error: 'Failed to retrieve volume trends',\n        });\n      }\n    }\n  );\n\n  /**\n   * GET /api/analytics/program-volume-analysis (T019)\n   *\n   * Get program volume analysis for active program\n   *\n   * Returns: {program_id, mesocycle_phase, muscle_groups: [{muscle_group, planned_weekly_sets, zone, ...}]}\n   */\n  fastify.get(\n    '/analytics/program-volume-analysis',\n    {\n      preHandler: authenticateJWT,\n    },\n    async (request: FastifyRequest, reply: FastifyReply) => {\n      try {\n        const authenticatedUser = (request as AuthenticatedRequest).user;\n\n        // Call volume service\n        const programAnalysis = getProgramVolumeAnalysis(authenticatedUser.userId);\n\n        if (!programAnalysis) {\n          return reply.status(404).send({\n            error: 'No active program found for user',\n          });\n        }\n\n        return reply.status(200).send(programAnalysis);\n      } catch (error) {\n        fastify.log.error(error);\n        return reply.status(500).send({\n          error: 'Failed to retrieve program volume analysis',\n        });\n      }\n    }\n  );\n}\n"
        ],
        "sourceRoot": ""
      }
    },
    "file:///home/asigator/fitness2025/backend/src/routes/programDays.ts": {
      "lineLengths": [
        39,
        56,
        31,
        13,
        19,
        18,
        30,
        24,
        35,
        33,
        47,
        55,
        56,
        53,
        35,
        43,
        57,
        26,
        59,
        22,
        18,
        14,
        10,
        6,
        2,
        37,
        13,
        19,
        18,
        31,
        29,
        43,
        51,
        52,
        49,
        31,
        39,
        53,
        22,
        32,
        38,
        32,
        43,
        41,
        55,
        67,
        64,
        64,
        57,
        57,
        56,
        66,
        66,
        62,
        30,
        26,
        22,
        18,
        14,
        10,
        6,
        2,
        58,
        34,
        33,
        36,
        34,
        13,
        51,
        44,
        33,
        27,
        34,
        17,
        11,
        70,
        27,
        47,
        55,
        19,
        13,
        48,
        16,
        18,
        26,
        27,
        24,
        24,
        42,
        30,
        69,
        33,
        81,
        33,
        11,
        64,
        55,
        9,
        23,
        37,
        43,
        53,
        15,
        9,
        7,
        46,
        39,
        36,
        34,
        13,
        51,
        44,
        33,
        27,
        34,
        17,
        11,
        70,
        27,
        47,
        55,
        19,
        13,
        50,
        53,
        58,
        47,
        16,
        15,
        23,
        24,
        21,
        20,
        27,
        50,
        11,
        79,
        30,
        47,
        60,
        19,
        13,
        46,
        16,
        18,
        30,
        27,
        27,
        20,
        20,
        19,
        36,
        28,
        23,
        35,
        51,
        37,
        33,
        11,
        63,
        30,
        30,
        26,
        14,
        52,
        9,
        23,
        37,
        43,
        63,
        15,
        9,
        7,
        1,
        16452
      ],
      "data": {
        "version": 3,
        "file": "/home/asigator/fitness2025/backend/src/routes/programDays.ts",
        "sources": [
          "file:///home/asigator/fitness2025/backend/src/routes/programDays.ts"
        ],
        "names": [],
        "mappings": "AAQA,OAAO,EAAE,EAAE,EAAE,MAAM,mBAAmB,CAAC;AACvC,OAAO,EAAE,eAAe,EAAwB,MAAM,uBAAuB,CAAC;AA6C9E,MAAM,qBAAqB,GAAG;IAC5B,MAAM,EAAE;QACN,QAAQ,EAAE;YACR,GAAG,EAAE;gBACH,IAAI,EAAE,OAAO;gBACb,KAAK,EAAE;oBACL,IAAI,EAAE,QAAQ;oBACd,UAAU,EAAE;wBACV,EAAE,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;wBACtB,UAAU,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;wBAC9B,WAAW,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;wBAC/B,QAAQ,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;wBAC5B,QAAQ,EAAE;4BACR,IAAI,EAAE,QAAQ;4BACd,IAAI,EAAE,CAAC,UAAU,EAAE,QAAQ,CAAC;yBAC7B;wBACD,cAAc,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;qBACnC;iBACF;aACF;SACF;KACF;CACF,CAAC;AAKF,MAAM,2BAA2B,GAAG;IAClC,MAAM,EAAE;QACN,QAAQ,EAAE;YACR,GAAG,EAAE;gBACH,IAAI,EAAE,QAAQ;gBACd,UAAU,EAAE;oBACV,EAAE,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;oBACtB,UAAU,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;oBAC9B,WAAW,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;oBAC/B,QAAQ,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;oBAC5B,QAAQ,EAAE;wBACR,IAAI,EAAE,QAAQ;wBACd,IAAI,EAAE,CAAC,UAAU,EAAE,QAAQ,CAAC;qBAC7B;oBACD,SAAS,EAAE;wBACT,IAAI,EAAE,OAAO;wBACb,KAAK,EAAE;4BACL,IAAI,EAAE,QAAQ;4BACd,UAAU,EAAE;gCACV,EAAE,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;gCACtB,cAAc,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;gCAClC,WAAW,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;gCAC/B,WAAW,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;gCAC/B,IAAI,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;gCACxB,IAAI,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;gCACxB,GAAG,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;gCACvB,aAAa,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;gCACjC,aAAa,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;gCACjC,SAAS,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;6BAC9B;yBACF;qBACF;iBACF;aACF;SACF;KACF;CACF,CAAC;AAKF,MAAM,CAAC,OAAO,CAAC,KAAK,UAAU,iBAAiB,CAAC,OAAwB;IAStE,OAAO,CAAC,GAAG,CACT,eAAe,EACf;QACE,GAAG,qBAAqB;QACxB,UAAU,EAAE,eAAe;KAC5B,EACD,KAAK,EAAE,OAAuB,EAAE,KAAmB,EAAE,EAAE;QACrD,IAAI,CAAC;YACH,MAAM,iBAAiB,GAAI,OAAgC,CAAC,IAAI,CAAC;YAGjE,MAAM,WAAW,GAAG,EAAE,CAAC,OAAO,CAAC;;;;;SAK9B,CAAC,CAAC;YACH,MAAM,OAAO,GAAG,WAAW,CAAC,GAAG,CAAC,iBAAiB,CAAC,MAAM,CAA+B,CAAC;YAExF,IAAI,CAAC,OAAO,EAAE,CAAC;gBACb,OAAO,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC5B,KAAK,EAAE,2BAA2B;iBACnC,CAAC,CAAC;YACL,CAAC;YAGD,MAAM,eAAe,GAAG,EAAE,CAAC,OAAO,CAAC;;;;;;;;;;;;;SAalC,CAAC,CAAC;YAEH,MAAM,WAAW,GAAG,eAAe,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE,CAAyB,CAAC;YAE5E,OAAO,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAC7C,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YAEf,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;YACzB,OAAO,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBAC5B,KAAK,EAAE,6BAA6B;aACrC,CAAC,CAAC;QACL,CAAC;IACH,CAAC,CACF,CAAC;IAUF,OAAO,CAAC,GAAG,CACT,2BAA2B,EAC3B;QACE,GAAG,2BAA2B;QAC9B,UAAU,EAAE,eAAe;KAC5B,EACD,KAAK,EAAE,OAAuB,EAAE,KAAmB,EAAE,EAAE;QACrD,IAAI,CAAC;YACH,MAAM,iBAAiB,GAAI,OAAgC,CAAC,IAAI,CAAC;YAGjE,MAAM,WAAW,GAAG,EAAE,CAAC,OAAO,CAAC;;;;;SAK9B,CAAC,CAAC;YACH,MAAM,OAAO,GAAG,WAAW,CAAC,GAAG,CAAC,iBAAiB,CAAC,MAAM,CAA+B,CAAC;YAExF,IAAI,CAAC,OAAO,EAAE,CAAC;gBACb,OAAO,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC5B,KAAK,EAAE,2BAA2B;iBACnC,CAAC,CAAC;YACL,CAAC;YAGD,MAAM,SAAS,GAAG,IAAI,IAAI,EAAE,CAAC,MAAM,EAAE,CAAC;YAUtC,MAAM,UAAU,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YACzC,MAAM,eAAe,GAAG,UAAU,CAAC,SAAS,CAAE,CAAC;YAG/C,MAAM,cAAc,GAAG,EAAE,CAAC,OAAO,CAAC;;;;;;;;;SASjC,CAAC,CAAC;YAEH,MAAM,UAAU,GAAG,cAAc,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE,EAAE,eAAe,CAAiE,CAAC;YAEnI,IAAI,CAAC,UAAU,EAAE,CAAC;gBAChB,OAAO,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC5B,KAAK,EAAE,gCAAgC;iBACxC,CAAC,CAAC;YACL,CAAC;YAGD,MAAM,aAAa,GAAG,EAAE,CAAC,OAAO,CAAC;;;;;;;;;;;;;;;;SAgBhC,CAAC,CAAC;YAEH,MAAM,SAAS,GAAG,aAAa,CAAC,GAAG,CAAC,UAAU,CAAC,EAAE,CAAsB,CAAC;YAExE,MAAM,QAAQ,GAAkC;gBAC9C,GAAG,UAAU;gBACb,SAAS;aACV,CAAC;YAEF,OAAO,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC1C,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YAEf,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;YACzB,OAAO,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBAC5B,KAAK,EAAE,uCAAuC;aAC/C,CAAC,CAAC;QACL,CAAC;IACH,CAAC,CACF,CAAC;AACJ,CAAC",
        "sourcesContent": [
          "/**\n * Program Days Routes\n *\n * REST endpoints for viewing training program structure:\n * - GET /api/program-days - List all program days for user's current program\n */\n\nimport { FastifyInstance, FastifyRequest, FastifyReply } from 'fastify';\nimport { db } from '../database/db.js';\nimport { authenticateJWT, AuthenticatedRequest } from '../middleware/auth.js';\n\n/**\n * Program day response interface\n */\ninterface ProgramDayResponse {\n  id: number;\n  program_id: number;\n  day_of_week: number;\n  day_name: string;\n  day_type: 'strength' | 'vo2max';\n  exercise_count: number;\n}\n\n/**\n * Program exercise interface\n */\ninterface ProgramExercise {\n  id: number;\n  program_day_id: number;\n  exercise_id: number;\n  order_index: number;\n  sets: number;\n  reps: string;\n  rir: number;\n  exercise_name: string;\n  muscle_groups: string;\n  equipment: string;\n}\n\n/**\n * Recommended program day response interface\n */\ninterface RecommendedProgramDayResponse {\n  id: number;\n  program_id: number;\n  day_of_week: number;\n  day_name: string;\n  day_type: 'strength' | 'vo2max';\n  exercises: ProgramExercise[];\n}\n\n/**\n * List program days response schema\n */\nconst listProgramDaysSchema = {\n  schema: {\n    response: {\n      200: {\n        type: 'array',\n        items: {\n          type: 'object',\n          properties: {\n            id: { type: 'number' },\n            program_id: { type: 'number' },\n            day_of_week: { type: 'number' },\n            day_name: { type: 'string' },\n            day_type: {\n              type: 'string',\n              enum: ['strength', 'vo2max'],\n            },\n            exercise_count: { type: 'number' },\n          },\n        },\n      },\n    },\n  },\n};\n\n/**\n * Recommended program day response schema\n */\nconst recommendedProgramDaySchema = {\n  schema: {\n    response: {\n      200: {\n        type: 'object',\n        properties: {\n          id: { type: 'number' },\n          program_id: { type: 'number' },\n          day_of_week: { type: 'number' },\n          day_name: { type: 'string' },\n          day_type: {\n            type: 'string',\n            enum: ['strength', 'vo2max'],\n          },\n          exercises: {\n            type: 'array',\n            items: {\n              type: 'object',\n              properties: {\n                id: { type: 'number' },\n                program_day_id: { type: 'number' },\n                exercise_id: { type: 'number' },\n                order_index: { type: 'number' },\n                sets: { type: 'number' },\n                reps: { type: 'string' },\n                rir: { type: 'number' },\n                exercise_name: { type: 'string' },\n                muscle_groups: { type: 'string' },\n                equipment: { type: 'string' },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\n/**\n * Register program days routes\n */\nexport default async function programDaysRoutes(fastify: FastifyInstance) {\n  /**\n   * GET /api/program-days\n   *\n   * List all program days for the authenticated user's current program\n   * Returns each day with its exercise count for easy workout swapping\n   *\n   * Requires JWT authentication\n   */\n  fastify.get(\n    '/program-days',\n    {\n      ...listProgramDaysSchema,\n      preHandler: authenticateJWT,\n    },\n    async (request: FastifyRequest, reply: FastifyReply) => {\n      try {\n        const authenticatedUser = (request as AuthenticatedRequest).user;\n\n        // Get user's most recent program\n        const programStmt = db.prepare(`\n          SELECT id FROM programs\n          WHERE user_id = ?\n          ORDER BY created_at DESC\n          LIMIT 1\n        `);\n        const program = programStmt.get(authenticatedUser.userId) as { id: number } | undefined;\n\n        if (!program) {\n          return reply.status(404).send({\n            error: 'No program found for user',\n          });\n        }\n\n        // Get all program days with exercise counts\n        const programDaysStmt = db.prepare(`\n          SELECT\n            pd.id,\n            pd.program_id,\n            pd.day_of_week,\n            pd.day_name,\n            pd.day_type,\n            COUNT(pe.id) as exercise_count\n          FROM program_days pd\n          LEFT JOIN program_exercises pe ON pd.id = pe.program_day_id\n          WHERE pd.program_id = ?\n          GROUP BY pd.id, pd.program_id, pd.day_of_week, pd.day_name, pd.day_type\n          ORDER BY pd.day_of_week\n        `);\n\n        const programDays = programDaysStmt.all(program.id) as ProgramDayResponse[];\n\n        return reply.status(200).send(programDays);\n      } catch (error) {\n        // Generic error\n        fastify.log.error(error);\n        return reply.status(500).send({\n          error: 'Failed to list program days',\n        });\n      }\n    }\n  );\n\n  /**\n   * GET /api/program-days/recommended\n   *\n   * Get recommended program day for today based on current day of week\n   * Returns the program day matching today's weekday with all exercises\n   *\n   * Requires JWT authentication\n   */\n  fastify.get(\n    '/program-days/recommended',\n    {\n      ...recommendedProgramDaySchema,\n      preHandler: authenticateJWT,\n    },\n    async (request: FastifyRequest, reply: FastifyReply) => {\n      try {\n        const authenticatedUser = (request as AuthenticatedRequest).user;\n\n        // Get user's most recent program\n        const programStmt = db.prepare(`\n          SELECT id FROM programs\n          WHERE user_id = ?\n          ORDER BY created_at DESC\n          LIMIT 1\n        `);\n        const program = programStmt.get(authenticatedUser.userId) as { id: number } | undefined;\n\n        if (!program) {\n          return reply.status(404).send({\n            error: 'No program found for user',\n          });\n        }\n\n        // Determine today's day of week (0=Sunday, 1=Monday, ..., 6=Saturday)\n        const dayOfWeek = new Date().getDay();\n\n        // Map day of week to program day_of_week\n        // Sunday (0) -> day 6 (index 5, VO2max B)\n        // Monday (1) -> day 1 (index 0, Push A)\n        // Tuesday (2) -> day 2 (index 1, Pull A)\n        // Wednesday (3) -> day 3 (index 2, VO2max A)\n        // Thursday (4) -> day 4 (index 3, Push B)\n        // Friday (5) -> day 5 (index 4, Pull B)\n        // Saturday (6) -> day 6 (index 5, VO2max B)\n        const dayMapping = [6, 1, 2, 3, 4, 5, 6]; // Maps JS day of week to program day_of_week\n        const targetDayOfWeek = dayMapping[dayOfWeek]!;\n\n        // Get program day for today\n        const programDayStmt = db.prepare(`\n          SELECT\n            id,\n            program_id,\n            day_of_week,\n            day_name,\n            day_type\n          FROM program_days\n          WHERE program_id = ? AND day_of_week = ?\n        `);\n\n        const programDay = programDayStmt.get(program.id, targetDayOfWeek) as Omit<RecommendedProgramDayResponse, 'exercises'> | undefined;\n\n        if (!programDay) {\n          return reply.status(404).send({\n            error: 'No program day found for today',\n          });\n        }\n\n        // Get exercises for this program day\n        const exercisesStmt = db.prepare(`\n          SELECT\n            pe.id,\n            pe.program_day_id,\n            pe.exercise_id,\n            pe.order_index,\n            pe.sets,\n            pe.reps,\n            pe.rir,\n            e.name as exercise_name,\n            e.muscle_groups,\n            e.equipment\n          FROM program_exercises pe\n          JOIN exercises e ON pe.exercise_id = e.id\n          WHERE pe.program_day_id = ?\n          ORDER BY pe.order_index\n        `);\n\n        const exercises = exercisesStmt.all(programDay.id) as ProgramExercise[];\n\n        const response: RecommendedProgramDayResponse = {\n          ...programDay,\n          exercises,\n        };\n\n        return reply.status(200).send(response);\n      } catch (error) {\n        // Generic error\n        fastify.log.error(error);\n        return reply.status(500).send({\n          error: 'Failed to get recommended program day',\n        });\n      }\n    }\n  );\n}\n"
        ],
        "sourceRoot": ""
      }
    },
    "file:///home/asigator/fitness2025/backend/src/routes/exercises.ts": {
      "lineLengths": [
        79,
        56,
        55,
        22,
        36,
        17,
        26,
        31,
        29,
        35,
        39,
        89,
        22,
        32,
        39,
        88,
        64,
        22,
        39,
        39,
        56,
        66,
        22,
        33,
        39,
        71,
        66,
        22,
        18,
        14,
        23,
        22,
        35,
        33,
        36,
        42,
        36,
        47,
        45,
        59,
        61,
        77,
        62,
        54,
        66,
        38,
        66,
        73,
        67,
        69,
        69,
        68,
        68,
        34,
        30,
        26,
        50,
        22,
        18,
        14,
        10,
        34,
        88,
        13,
        29,
        29,
        26,
        33,
        27,
        14,
        52,
        43,
        26,
        40,
        15,
        9,
        23,
        66,
        47,
        41,
        19,
        13,
        37,
        43,
        54,
        15,
        9,
        7,
        25,
        36,
        17,
        21,
        31,
        33,
        29,
        25,
        39,
        51,
        22,
        18,
        14,
        23,
        22,
        35,
        33,
        47,
        49,
        65,
        50,
        42,
        54,
        26,
        54,
        61,
        55,
        57,
        57,
        56,
        56,
        22,
        18,
        22,
        35,
        33,
        50,
        22,
        18,
        14,
        10,
        34,
        38,
        13,
        48,
        36,
        47,
        49,
        19,
        13,
        57,
        28,
        47,
        48,
        19,
        13,
        52,
        9,
        23,
        37,
        43,
        53,
        15,
        9,
        7,
        1,
        13572
      ],
      "data": {
        "version": 3,
        "file": "/home/asigator/fitness2025/backend/src/routes/exercises.ts",
        "sources": [
          "file:///home/asigator/fitness2025/backend/src/routes/exercises.ts"
        ],
        "names": [],
        "mappings": "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",
        "sourcesContent": [
          "/**\n * Exercise Library Routes\n *\n * Endpoints for filtering and retrieving exercises\n */\n\nimport { FastifyInstance } from 'fastify';\nimport { getExercises, getExerciseById, ExerciseFilters } from '../services/exerciseService.js';\nimport { authenticateJWT } from '../middleware/auth.js';\n\n/**\n * Query parameters for GET /api/exercises\n */\ninterface ExerciseQueryParams {\n  muscle_group?: string;\n  equipment?: 'barbell' | 'dumbbell' | 'cable' | 'machine' | 'bodyweight';\n  movement_pattern?: 'compound' | 'isolation';\n  difficulty?: 'beginner' | 'intermediate' | 'advanced';\n}\n\n/**\n * Route parameters for GET /api/exercises/:id\n */\ninterface ExerciseParams {\n  id: string;\n}\n\n/**\n * Register exercise routes\n */\nexport default async function exerciseRoutes(fastify: FastifyInstance) {\n  /**\n   * GET /api/exercises\n   *\n   * Get exercises with optional filtering\n   */\n  fastify.get(\n    '/',\n    {\n      preHandler: authenticateJWT,\n      schema: {\n        querystring: {\n          type: 'object',\n          properties: {\n            muscle_group: {\n              type: 'string',\n              description: 'Filter by muscle group (chest, lats, quads, etc.)',\n            },\n            equipment: {\n              type: 'string',\n              enum: ['barbell', 'dumbbell', 'cable', 'machine', 'bodyweight'],\n              description: 'Filter by equipment type',\n            },\n            movement_pattern: {\n              type: 'string',\n              enum: ['compound', 'isolation'],\n              description: 'Filter by movement pattern',\n            },\n            difficulty: {\n              type: 'string',\n              enum: ['beginner', 'intermediate', 'advanced'],\n              description: 'Filter by difficulty level',\n            },\n          },\n        },\n        response: {\n          200: {\n            type: 'object',\n            properties: {\n              exercises: {\n                type: 'array',\n                items: {\n                  type: 'object',\n                  properties: {\n                    id: { type: 'number' },\n                    name: { type: 'string' },\n                    primary_muscle_group: { type: 'string' },\n                    secondary_muscle_groups: {\n                      type: 'array',\n                      items: { type: 'string' },\n                    },\n                    equipment: { type: 'string' },\n                    movement_pattern: { type: 'string' },\n                    difficulty: { type: 'string' },\n                    default_sets: { type: 'number' },\n                    default_reps: { type: 'string' },\n                    default_rir: { type: 'number' },\n                    description: { type: 'string' },\n                  },\n                },\n              },\n              count: { type: 'number' },\n            },\n          },\n        },\n      },\n    },\n    async (request, reply) => {\n      const { muscle_group, equipment, movement_pattern, difficulty } = request.query as ExerciseQueryParams;\n      try {\n        const filters: ExerciseFilters = {\n          muscle_group,\n          equipment,\n          movement_pattern,\n          difficulty,\n        };\n\n        const exercises = getExercises(filters);\n\n        return reply.status(200).send({\n          exercises,\n          count: exercises.length,\n        });\n      } catch (error: any) {\n        // Handle validation errors (e.g., invalid muscle_group)\n        if (error.message?.includes('Invalid muscle_group')) {\n          return reply.status(400).send({\n            error: error.message,\n          });\n        }\n\n        // Handle unexpected errors\n        request.log.error(error);\n        return reply.status(500).send({\n          error: 'Failed to retrieve exercises',\n        });\n      }\n    }\n  );\n\n  /**\n   * GET /api/exercises/:id\n   *\n   * Get exercise details by ID\n   */\n  fastify.get(\n    '/:id',\n    {\n      preHandler: authenticateJWT,\n      schema: {\n        params: {\n          type: 'object',\n          required: ['id'],\n          properties: {\n            id: {\n              type: 'string',\n              description: 'Exercise ID',\n            },\n          },\n        },\n        response: {\n          200: {\n            type: 'object',\n            properties: {\n              id: { type: 'number' },\n              name: { type: 'string' },\n              primary_muscle_group: { type: 'string' },\n              secondary_muscle_groups: {\n                type: 'array',\n                items: { type: 'string' },\n              },\n              equipment: { type: 'string' },\n              movement_pattern: { type: 'string' },\n              difficulty: { type: 'string' },\n              default_sets: { type: 'number' },\n              default_reps: { type: 'string' },\n              default_rir: { type: 'number' },\n              description: { type: 'string' },\n            },\n          },\n          404: {\n            type: 'object',\n            properties: {\n              error: { type: 'string' },\n            },\n          },\n        },\n      },\n    },\n    async (request, reply) => {\n      const { id } = request.params as ExerciseParams;\n      try {\n        const exerciseId = parseInt(id, 10);\n\n        if (isNaN(exerciseId)) {\n          return reply.status(400).send({\n            error: 'Invalid exercise ID',\n          });\n        }\n\n        const exercise = getExerciseById(exerciseId);\n\n        if (!exercise) {\n          return reply.status(404).send({\n            error: 'Exercise not found',\n          });\n        }\n\n        return reply.status(200).send(exercise);\n      } catch (error: any) {\n        request.log.error(error);\n        return reply.status(500).send({\n          error: 'Failed to retrieve exercise',\n        });\n      }\n    }\n  );\n}\n"
        ],
        "sourceRoot": ""
      }
    },
    "file:///home/asigator/fitness2025/backend/src/routes/programs.ts": {
      "lineLengths": [
        118,
        72,
        56,
        27,
        13,
        19,
        18,
        31,
        29,
        43,
        48,
        45,
        55,
        38,
        39,
        62,
        22,
        51,
        35,
        38,
        32,
        43,
        41,
        55,
        63,
        64,
        61,
        43,
        51,
        65,
        34,
        44,
        50,
        44,
        55,
        53,
        67,
        79,
        76,
        78,
        76,
        76,
        81,
        75,
        78,
        74,
        42,
        38,
        34,
        30,
        26,
        22,
        18,
        14,
        18,
        31,
        29,
        46,
        48,
        18,
        14,
        10,
        6,
        2,
        28,
        13,
        17,
        27,
        25,
        39,
        14,
        29,
        10,
        15,
        27,
        25,
        44,
        31,
        35,
        58,
        18,
        14,
        10,
        19,
        18,
        31,
        29,
        55,
        50,
        58,
        58,
        18,
        14,
        10,
        6,
        2,
        25,
        13,
        17,
        27,
        25,
        39,
        14,
        29,
        10,
        19,
        18,
        31,
        29,
        36,
        38,
        32,
        43,
        41,
        65,
        65,
        56,
        56,
        56,
        39,
        51,
        92,
        34,
        30,
        26,
        22,
        31,
        38,
        32,
        43,
        41,
        65,
        40,
        51,
        69,
        34,
        67,
        62,
        30,
        26,
        22,
        18,
        14,
        10,
        6,
        2,
        54,
        30,
        29,
        36,
        34,
        13,
        51,
        69,
        27,
        47,
        39,
        64,
        19,
        13,
        59,
        71,
        65,
        69,
        30,
        54,
        48,
        52,
        48,
        41,
        46,
        39,
        52,
        44,
        20,
        24,
        27,
        52,
        18,
        15,
        30,
        27,
        55,
        14,
        52,
        9,
        23,
        37,
        43,
        47,
        54,
        15,
        9,
        7,
        50,
        30,
        36,
        34,
        13,
        62,
        58,
        51,
        51,
        47,
        41,
        73,
        19,
        13,
        90,
        47,
        41,
        69,
        19,
        13,
        69,
        27,
        47,
        39,
        49,
        19,
        13,
        43,
        47,
        39,
        49,
        19,
        13,
        82,
        50,
        9,
        23,
        41,
        57,
        56,
        58,
        51,
        45,
        47,
        23,
        17,
        13,
        37,
        43,
        47,
        51,
        15,
        9,
        7,
        41,
        27,
        36,
        34,
        13,
        62,
        51,
        69,
        27,
        47,
        39,
        49,
        19,
        13,
        43,
        47,
        39,
        49,
        19,
        13,
        86,
        34,
        47,
        39,
        68,
        19,
        13,
        76,
        46,
        53,
        28,
        28,
        28,
        30,
        16,
        57,
        83,
        31,
        46,
        31,
        55,
        69,
        16,
        43,
        44,
        25,
        15,
        9,
        23,
        37,
        43,
        47,
        62,
        15,
        9,
        7,
        1,
        29004
      ],
      "data": {
        "version": 3,
        "file": "/home/asigator/fitness2025/backend/src/routes/programs.ts",
        "sources": [
          "file:///home/asigator/fitness2025/backend/src/routes/programs.ts"
        ],
        "names": [],
        "mappings": "AAUA,OAAO,EACL,cAAc,EACd,cAAc,EACd,sBAAsB,EACtB,YAAY,GACb,MAAM,+BAA+B,CAAC;AACvC,OAAO,EAAE,wBAAwB,EAAE,MAAM,8BAA8B,CAAC;AACxE,OAAO,EAAE,eAAe,EAAwB,MAAM,uBAAuB,CAAC;AAa9E,MAAM,iBAAiB,GAAG;IACxB,MAAM,EAAE;QACN,QAAQ,EAAE;YACR,GAAG,EAAE;gBACH,IAAI,EAAE,QAAQ;gBACd,UAAU,EAAE;oBACV,EAAE,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;oBACtB,OAAO,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;oBAC3B,IAAI,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;oBACxB,cAAc,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;oBAClC,eAAe,EAAE;wBACf,IAAI,EAAE,QAAQ;wBACd,IAAI,EAAE,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,QAAQ,CAAC;qBACtC;oBACD,UAAU,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;oBAC9B,YAAY,EAAE;wBACZ,IAAI,EAAE,OAAO;wBACb,KAAK,EAAE;4BACL,IAAI,EAAE,QAAQ;4BACd,UAAU,EAAE;gCACV,EAAE,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;gCACtB,UAAU,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;gCAC9B,WAAW,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;gCAC/B,QAAQ,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;gCAC5B,QAAQ,EAAE;oCACR,IAAI,EAAE,QAAQ;oCACd,IAAI,EAAE,CAAC,UAAU,EAAE,QAAQ,CAAC;iCAC7B;gCACD,SAAS,EAAE;oCACT,IAAI,EAAE,OAAO;oCACb,KAAK,EAAE;wCACL,IAAI,EAAE,QAAQ;wCACd,UAAU,EAAE;4CACV,EAAE,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;4CACtB,cAAc,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;4CAClC,WAAW,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;4CAC/B,aAAa,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;4CACjC,WAAW,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;4CAC/B,WAAW,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;4CAC/B,gBAAgB,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;4CACpC,UAAU,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;4CAC9B,aAAa,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;4CACjC,SAAS,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;yCAC9B;qCACF;iCACF;6BACF;yBACF;qBACF;iBACF;aACF;YACD,GAAG,EAAE;gBACH,IAAI,EAAE,QAAQ;gBACd,UAAU,EAAE;oBACV,KAAK,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;oBACzB,OAAO,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;iBAC5B;aACF;SACF;KACF;CACF,CAAC;AAKF,MAAM,kBAAkB,GAAG;IACzB,MAAM,EAAE;QACN,MAAM,EAAE;YACN,IAAI,EAAE,QAAQ;YACd,UAAU,EAAE;gBACV,EAAE,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;aACvB;YACD,QAAQ,EAAE,CAAC,IAAI,CAAC;SACjB;QACD,IAAI,EAAE;YACJ,IAAI,EAAE,QAAQ;YACd,UAAU,EAAE;gBACV,MAAM,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE;gBAC3B,YAAY,EAAE;oBACZ,IAAI,EAAE,QAAQ;oBACd,IAAI,EAAE,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,QAAQ,CAAC;iBACtC;aACF;SACF;QACD,QAAQ,EAAE;YACR,GAAG,EAAE;gBACH,IAAI,EAAE,QAAQ;gBACd,UAAU,EAAE;oBACV,cAAc,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;oBAClC,SAAS,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;oBAC7B,iBAAiB,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;oBACrC,iBAAiB,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;iBACtC;aACF;SACF;KACF;CACF,CAAC;AAKF,MAAM,eAAe,GAAG;IACtB,MAAM,EAAE;QACN,MAAM,EAAE;YACN,IAAI,EAAE,QAAQ;YACd,UAAU,EAAE;gBACV,EAAE,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;aACvB;YACD,QAAQ,EAAE,CAAC,IAAI,CAAC;SACjB;QACD,QAAQ,EAAE;YACR,GAAG,EAAE;gBACH,IAAI,EAAE,QAAQ;gBACd,UAAU,EAAE;oBACV,aAAa,EAAE;wBACb,IAAI,EAAE,OAAO;wBACb,KAAK,EAAE;4BACL,IAAI,EAAE,QAAQ;4BACd,UAAU,EAAE;gCACV,YAAY,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;gCAChC,YAAY,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;gCAChC,GAAG,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;gCACvB,GAAG,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;gCACvB,GAAG,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;gCACvB,IAAI,EAAE;oCACJ,IAAI,EAAE,QAAQ;oCACd,IAAI,EAAE,CAAC,WAAW,EAAE,UAAU,EAAE,SAAS,EAAE,WAAW,CAAC;iCACxD;6BACF;yBACF;qBACF;oBACD,QAAQ,EAAE;wBACR,IAAI,EAAE,OAAO;wBACb,KAAK,EAAE;4BACL,IAAI,EAAE,QAAQ;4BACd,UAAU,EAAE;gCACV,YAAY,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;gCAChC,KAAK,EAAE;oCACL,IAAI,EAAE,QAAQ;oCACd,IAAI,EAAE,CAAC,WAAW,EAAE,WAAW,CAAC;iCACjC;gCACD,cAAc,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;gCAClC,SAAS,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;6BAC9B;yBACF;qBACF;iBACF;aACF;SACF;KACF;CACF,CAAC;AAKF,MAAM,CAAC,OAAO,CAAC,KAAK,UAAU,aAAa,CAAC,OAAwB;IAUlE,OAAO,CAAC,GAAG,CACT,WAAW,EACX;QACE,GAAG,iBAAiB;QACpB,UAAU,EAAE,eAAe;KAC5B,EACD,KAAK,EAAE,OAAuB,EAAE,KAAmB,EAAE,EAAE;QACrD,IAAI,CAAC;YACH,MAAM,iBAAiB,GAAI,OAAgC,CAAC,IAAI,CAAC;YAGjE,MAAM,OAAO,GAAG,cAAc,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC;YAEzD,IAAI,CAAC,OAAO,EAAE,CAAC;gBACb,OAAO,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC5B,KAAK,EAAE,WAAW;oBAClB,OAAO,EAAE,kCAAkC;iBAC5C,CAAC,CAAC;YACL,CAAC;YAGD,MAAM,WAAW,GAAG,cAAc,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;YAG/C,MAAM,wBAAwB,GAAG,WAAW,CAAC,GAAG,CAAC,CAAC,GAAQ,EAAE,EAAE;gBAC5D,MAAM,SAAS,GAAG,sBAAsB,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;gBAGjD,MAAM,oBAAoB,GAAG,SAAS,CAAC,GAAG,CAAC,CAAC,EAAO,EAAE,EAAE,CAAC,CAAC;oBACvD,EAAE,EAAE,EAAE,CAAC,EAAE;oBACT,cAAc,EAAE,EAAE,CAAC,cAAc;oBACjC,WAAW,EAAE,EAAE,CAAC,WAAW;oBAC3B,aAAa,EAAE,EAAE,CAAC,aAAa;oBAC/B,WAAW,EAAE,EAAE,CAAC,WAAW;oBAC3B,WAAW,EAAE,EAAE,CAAC,IAAI;oBACpB,gBAAgB,EAAE,EAAE,CAAC,IAAI;oBACzB,UAAU,EAAE,EAAE,CAAC,GAAG;oBAClB,aAAa,EAAE,EAAE,CAAC,aAAa;oBAC/B,SAAS,EAAE,EAAE,CAAC,SAAS;iBACxB,CAAC,CAAC,CAAC;gBAEJ,OAAO;oBACL,GAAG,GAAG;oBACN,SAAS,EAAE,oBAAoB;iBAChC,CAAC;YACJ,CAAC,CAAC,CAAC;YAGH,MAAM,QAAQ,GAAG;gBACf,GAAG,OAAO;gBACV,YAAY,EAAE,wBAAwB;aACvC,CAAC;YAEF,OAAO,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC1C,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;YACzB,OAAO,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBAC5B,KAAK,EAAE,uBAAuB;gBAC9B,OAAO,EAAE,4BAA4B;aACtC,CAAC,CAAC;QACL,CAAC;IACH,CAAC,CACF,CAAC;IAiBF,OAAO,CAAC,KAAK,CAIX,6BAA6B,EAC7B;QACE,GAAG,kBAAkB;QACrB,UAAU,EAAE,eAAe;KAC5B,EACD,KAAK,EAAE,OAAO,EAAE,KAAK,EAAE,EAAE;QACvB,IAAI,CAAC;YACH,MAAM,SAAS,GAAG,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;YAClD,MAAM,EAAE,MAAM,EAAE,YAAY,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC;YAC9C,MAAM,iBAAiB,GAAI,OAAgC,CAAC,IAAI,CAAC;YAGjE,IAAI,MAAM,KAAK,IAAI,IAAI,CAAC,YAAY,EAAE,CAAC;gBACrC,OAAO,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC5B,KAAK,EAAE,aAAa;oBACpB,OAAO,EAAE,2CAA2C;iBACrD,CAAC,CAAC;YACL,CAAC;YAGD,IAAI,YAAY,IAAI,CAAC,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC,QAAQ,CAAC,YAAY,CAAC,EAAE,CAAC;gBAC5E,OAAO,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC5B,KAAK,EAAE,aAAa;oBACpB,OAAO,EAAE,yBAAyB,YAAY,EAAE;iBACjD,CAAC,CAAC;YACL,CAAC;YAGD,MAAM,OAAO,GAAG,cAAc,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC;YAEzD,IAAI,CAAC,OAAO,EAAE,CAAC;gBACb,OAAO,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC5B,KAAK,EAAE,WAAW;oBAClB,OAAO,EAAE,mBAAmB;iBAC7B,CAAC,CAAC;YACL,CAAC;YAED,IAAI,OAAO,CAAC,EAAE,KAAK,SAAS,EAAE,CAAC;gBAC7B,OAAO,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC5B,KAAK,EAAE,WAAW;oBAClB,OAAO,EAAE,mBAAmB;iBAC7B,CAAC,CAAC;YACL,CAAC;YAGD,MAAM,MAAM,GAAG,YAAY,CAAC,SAAS,EAAE,MAAM,IAAI,KAAK,EAAE,YAAY,CAAC,CAAC;YAEtE,OAAO,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACxC,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,KAAK,YAAY,KAAK,EAAE,CAAC;gBAE3B,IACE,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAC;oBAClC,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,SAAS,CAAC;oBACjC,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,WAAW,CAAC,EACnC,CAAC;oBACD,OAAO,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;wBAC5B,KAAK,EAAE,aAAa;wBACpB,OAAO,EAAE,KAAK,CAAC,OAAO;qBACvB,CAAC,CAAC;gBACL,CAAC;YACH,CAAC;YAED,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;YACzB,OAAO,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBAC5B,KAAK,EAAE,uBAAuB;gBAC9B,OAAO,EAAE,yBAAyB;aACnC,CAAC,CAAC;QACL,CAAC;IACH,CAAC,CACF,CAAC;IAiBF,OAAO,CAAC,GAAG,CAGT,sBAAsB,EACtB;QACE,GAAG,eAAe;QAClB,UAAU,EAAE,eAAe;KAC5B,EACD,KAAK,EAAE,OAAO,EAAE,KAAK,EAAE,EAAE;QACvB,IAAI,CAAC;YACH,MAAM,SAAS,GAAG,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;YAClD,MAAM,iBAAiB,GAAI,OAAgC,CAAC,IAAI,CAAC;YAGjE,MAAM,OAAO,GAAG,cAAc,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC;YAEzD,IAAI,CAAC,OAAO,EAAE,CAAC;gBACb,OAAO,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC5B,KAAK,EAAE,WAAW;oBAClB,OAAO,EAAE,mBAAmB;iBAC7B,CAAC,CAAC;YACL,CAAC;YAED,IAAI,OAAO,CAAC,EAAE,KAAK,SAAS,EAAE,CAAC;gBAC7B,OAAO,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC5B,KAAK,EAAE,WAAW;oBAClB,OAAO,EAAE,mBAAmB;iBAC7B,CAAC,CAAC;YACL,CAAC;YAGD,MAAM,cAAc,GAAG,wBAAwB,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC;YAE1E,IAAI,CAAC,cAAc,EAAE,CAAC;gBACpB,OAAO,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC5B,KAAK,EAAE,WAAW;oBAClB,OAAO,EAAE,sCAAsC;iBAChD,CAAC,CAAC;YACL,CAAC;YAGD,MAAM,YAAY,GAAG,cAAc,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;gBAC7D,YAAY,EAAE,EAAE,CAAC,YAAY;gBAC7B,YAAY,EAAE,EAAE,CAAC,mBAAmB;gBACpC,GAAG,EAAE,EAAE,CAAC,GAAG;gBACX,GAAG,EAAE,EAAE,CAAC,GAAG;gBACX,GAAG,EAAE,EAAE,CAAC,GAAG;gBACX,IAAI,EAAE,EAAE,CAAC,IAAI;aACd,CAAC,CAAC,CAAC;YAGJ,MAAM,QAAQ,GAAG,cAAc,CAAC,aAAa;iBAC1C,MAAM,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,IAAI,KAAK,WAAW,IAAI,EAAE,CAAC,IAAI,KAAK,WAAW,CAAC;iBAClE,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;gBACZ,YAAY,EAAE,EAAE,CAAC,YAAY;gBAC7B,KAAK,EAAE,EAAE,CAAC,IAAiC;gBAC3C,cAAc,EAAE,EAAE,CAAC,mBAAmB;gBACtC,SAAS,EAAE,EAAE,CAAC,IAAI,KAAK,WAAW,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG;aACrD,CAAC,CAAC,CAAC;YAEN,OAAO,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBAC5B,aAAa,EAAE,YAAY;gBAC3B,QAAQ;aACT,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;YACzB,OAAO,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBAC5B,KAAK,EAAE,uBAAuB;gBAC9B,OAAO,EAAE,oCAAoC;aAC9C,CAAC,CAAC;QACL,CAAC;IACH,CAAC,CACF,CAAC;AACJ,CAAC",
        "sourcesContent": [
          "/**\n * Program Routes (T050-T054)\n *\n * REST endpoints for training program management:\n * - GET /api/programs - Get user's active program with full structure\n * - PATCH /api/programs/:id/advance-phase - Advance mesocycle phase with volume adjustment\n * - GET /api/programs/:id/volume - Get program volume analysis per muscle group\n */\n\nimport { FastifyInstance, FastifyRequest, FastifyReply } from 'fastify';\nimport {\n  getUserProgram,\n  getProgramDays,\n  getProgramDayExercises,\n  advancePhase,\n} from '../services/programService.js';\nimport { getProgramVolumeAnalysis } from '../services/volumeService.js';\nimport { authenticateJWT, AuthenticatedRequest } from '../middleware/auth.js';\n\n/**\n * Advance phase request body interface\n */\ninterface AdvancePhaseBody {\n  manual?: boolean;\n  target_phase?: 'mev' | 'mav' | 'mrv' | 'deload';\n}\n\n/**\n * GET /api/programs schema\n */\nconst getProgramsSchema = {\n  schema: {\n    response: {\n      200: {\n        type: 'object',\n        properties: {\n          id: { type: 'number' },\n          user_id: { type: 'number' },\n          name: { type: 'string' },\n          mesocycle_week: { type: 'number' },\n          mesocycle_phase: {\n            type: 'string',\n            enum: ['mev', 'mav', 'mrv', 'deload'],\n          },\n          created_at: { type: 'number' },\n          program_days: {\n            type: 'array',\n            items: {\n              type: 'object',\n              properties: {\n                id: { type: 'number' },\n                program_id: { type: 'number' },\n                day_of_week: { type: 'number' },\n                day_name: { type: 'string' },\n                day_type: {\n                  type: 'string',\n                  enum: ['strength', 'vo2max'],\n                },\n                exercises: {\n                  type: 'array',\n                  items: {\n                    type: 'object',\n                    properties: {\n                      id: { type: 'number' },\n                      program_day_id: { type: 'number' },\n                      exercise_id: { type: 'number' },\n                      exercise_name: { type: 'string' },\n                      order_index: { type: 'number' },\n                      target_sets: { type: 'number' },\n                      target_rep_range: { type: 'string' },\n                      target_rir: { type: 'number' },\n                      muscle_groups: { type: 'string' },\n                      equipment: { type: 'string' },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n      404: {\n        type: 'object',\n        properties: {\n          error: { type: 'string' },\n          message: { type: 'string' },\n        },\n      },\n    },\n  },\n};\n\n/**\n * PATCH /api/programs/:id/advance-phase schema\n */\nconst advancePhaseSchema = {\n  schema: {\n    params: {\n      type: 'object',\n      properties: {\n        id: { type: 'string' },\n      },\n      required: ['id'],\n    },\n    body: {\n      type: 'object',\n      properties: {\n        manual: { type: 'boolean' },\n        target_phase: {\n          type: 'string',\n          enum: ['mev', 'mav', 'mrv', 'deload'],\n        },\n      },\n    },\n    response: {\n      200: {\n        type: 'object',\n        properties: {\n          previous_phase: { type: 'string' },\n          new_phase: { type: 'string' },\n          volume_multiplier: { type: 'number' },\n          exercises_updated: { type: 'number' },\n        },\n      },\n    },\n  },\n};\n\n/**\n * GET /api/programs/:id/volume schema\n */\nconst getVolumeSchema = {\n  schema: {\n    params: {\n      type: 'object',\n      properties: {\n        id: { type: 'string' },\n      },\n      required: ['id'],\n    },\n    response: {\n      200: {\n        type: 'object',\n        properties: {\n          muscle_groups: {\n            type: 'array',\n            items: {\n              type: 'object',\n              properties: {\n                muscle_group: { type: 'string' },\n                planned_sets: { type: 'number' },\n                mev: { type: 'number' },\n                mav: { type: 'number' },\n                mrv: { type: 'number' },\n                zone: {\n                  type: 'string',\n                  enum: ['below_mev', 'adequate', 'optimal', 'above_mrv'],\n                },\n              },\n            },\n          },\n          warnings: {\n            type: 'array',\n            items: {\n              type: 'object',\n              properties: {\n                muscle_group: { type: 'string' },\n                issue: {\n                  type: 'string',\n                  enum: ['below_mev', 'above_mrv'],\n                },\n                current_volume: { type: 'number' },\n                threshold: { type: 'number' },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\n/**\n * Register program routes\n */\nexport default async function programRoutes(fastify: FastifyInstance) {\n  /**\n   * GET /api/programs\n   *\n   * Get the authenticated user's active program with full structure\n   * (program days and exercises nested)\n   *\n   * Returns 404 if user has no active program\n   * Requires JWT authentication\n   */\n  fastify.get(\n    '/programs',\n    {\n      ...getProgramsSchema,\n      preHandler: authenticateJWT,\n    },\n    async (request: FastifyRequest, reply: FastifyReply) => {\n      try {\n        const authenticatedUser = (request as AuthenticatedRequest).user;\n\n        // Get user's active program\n        const program = getUserProgram(authenticatedUser.userId);\n\n        if (!program) {\n          return reply.status(404).send({\n            error: 'Not Found',\n            message: 'No active program found for user',\n          });\n        }\n\n        // Get program days\n        const programDays = getProgramDays(program.id);\n\n        // Get exercises for each program day\n        const programDaysWithExercises = programDays.map((day: any) => {\n          const exercises = getProgramDayExercises(day.id);\n\n          // Transform to match contract schema\n          const transformedExercises = exercises.map((ex: any) => ({\n            id: ex.id,\n            program_day_id: ex.program_day_id,\n            exercise_id: ex.exercise_id,\n            exercise_name: ex.exercise_name,\n            order_index: ex.order_index,\n            target_sets: ex.sets, // Contract uses target_sets\n            target_rep_range: ex.reps, // Contract uses target_rep_range\n            target_rir: ex.rir, // Contract uses target_rir\n            muscle_groups: ex.muscle_groups,\n            equipment: ex.equipment,\n          }));\n\n          return {\n            ...day,\n            exercises: transformedExercises,\n          };\n        });\n\n        // Build full response\n        const response = {\n          ...program,\n          program_days: programDaysWithExercises,\n        };\n\n        return reply.status(200).send(response);\n      } catch (error) {\n        fastify.log.error(error);\n        return reply.status(500).send({\n          error: 'Internal Server Error',\n          message: 'Failed to retrieve program',\n        });\n      }\n    }\n  );\n\n  /**\n   * PATCH /api/programs/:id/advance-phase\n   *\n   * Advance program to next mesocycle phase with automatic volume adjustment\n   *\n   * Phase progression: mev → mav → mrv → deload → mev (repeats)\n   * Volume multipliers:\n   * - MEV → MAV: 1.2x (+20%)\n   * - MAV → MRV: 1.15x (+15%)\n   * - MRV → Deload: 0.5x (-50%)\n   * - Deload → MEV: 2.0x (reset to baseline)\n   *\n   * Requires JWT authentication\n   * Validates user owns the program before modification\n   */\n  fastify.patch<{\n    Params: { id: string };\n    Body: AdvancePhaseBody;\n  }>(\n    '/programs/:id/advance-phase',\n    {\n      ...advancePhaseSchema,\n      preHandler: authenticateJWT,\n    },\n    async (request, reply) => {\n      try {\n        const programId = parseInt(request.params.id, 10);\n        const { manual, target_phase } = request.body;\n        const authenticatedUser = (request as AuthenticatedRequest).user;\n\n        // Validate manual mode\n        if (manual === true && !target_phase) {\n          return reply.status(400).send({\n            error: 'Bad Request',\n            message: 'target_phase is required when manual=true',\n          });\n        }\n\n        // Validate target_phase\n        if (target_phase && !['mev', 'mav', 'mrv', 'deload'].includes(target_phase)) {\n          return reply.status(400).send({\n            error: 'Bad Request',\n            message: `Invalid target_phase: ${target_phase}`,\n          });\n        }\n\n        // Verify program exists and belongs to user\n        const program = getUserProgram(authenticatedUser.userId);\n\n        if (!program) {\n          return reply.status(404).send({\n            error: 'Not Found',\n            message: 'Program not found',\n          });\n        }\n\n        if (program.id !== programId) {\n          return reply.status(404).send({\n            error: 'Not Found',\n            message: 'Program not found',\n          });\n        }\n\n        // Advance phase\n        const result = advancePhase(programId, manual || false, target_phase);\n\n        return reply.status(200).send(result);\n      } catch (error) {\n        if (error instanceof Error) {\n          // Handle validation errors\n          if (\n            error.message.includes('required') ||\n            error.message.includes('Invalid') ||\n            error.message.includes('not found')\n          ) {\n            return reply.status(400).send({\n              error: 'Bad Request',\n              message: error.message,\n            });\n          }\n        }\n\n        fastify.log.error(error);\n        return reply.status(500).send({\n          error: 'Internal Server Error',\n          message: 'Failed to advance phase',\n        });\n      }\n    }\n  );\n\n  /**\n   * GET /api/programs/:id/volume\n   *\n   * Get volume analysis for the program (planned sets per muscle group)\n   * Classifies volume zones based on MEV/MAV/MRV landmarks\n   *\n   * Zones:\n   * - below_mev: Planned sets < MEV (insufficient for growth)\n   * - adequate: MEV ≤ planned < MAV (adequate stimulus)\n   * - optimal: MAV ≤ planned ≤ MRV (optimal range)\n   * - above_mrv: Planned > MRV (risk of overtraining)\n   *\n   * Requires JWT authentication\n   * Validates user owns the program\n   */\n  fastify.get<{\n    Params: { id: string };\n  }>(\n    '/programs/:id/volume',\n    {\n      ...getVolumeSchema,\n      preHandler: authenticateJWT,\n    },\n    async (request, reply) => {\n      try {\n        const programId = parseInt(request.params.id, 10);\n        const authenticatedUser = (request as AuthenticatedRequest).user;\n\n        // Verify program exists and belongs to user\n        const program = getUserProgram(authenticatedUser.userId);\n\n        if (!program) {\n          return reply.status(404).send({\n            error: 'Not Found',\n            message: 'Program not found',\n          });\n        }\n\n        if (program.id !== programId) {\n          return reply.status(404).send({\n            error: 'Not Found',\n            message: 'Program not found',\n          });\n        }\n\n        // Get volume analysis\n        const volumeAnalysis = getProgramVolumeAnalysis(authenticatedUser.userId);\n\n        if (!volumeAnalysis) {\n          return reply.status(404).send({\n            error: 'Not Found',\n            message: 'No program found for volume analysis',\n          });\n        }\n\n        // Transform to match contract schema\n        const muscleGroups = volumeAnalysis.muscle_groups.map((mg) => ({\n          muscle_group: mg.muscle_group,\n          planned_sets: mg.planned_weekly_sets,\n          mev: mg.mev,\n          mav: mg.mav,\n          mrv: mg.mrv,\n          zone: mg.zone,\n        }));\n\n        // Generate warnings\n        const warnings = volumeAnalysis.muscle_groups\n          .filter((mg) => mg.zone === 'below_mev' || mg.zone === 'above_mrv')\n          .map((mg) => ({\n            muscle_group: mg.muscle_group,\n            issue: mg.zone as 'below_mev' | 'above_mrv',\n            current_volume: mg.planned_weekly_sets,\n            threshold: mg.zone === 'below_mev' ? mg.mev : mg.mrv,\n          }));\n\n        return reply.status(200).send({\n          muscle_groups: muscleGroups,\n          warnings,\n        });\n      } catch (error) {\n        fastify.log.error(error);\n        return reply.status(500).send({\n          error: 'Internal Server Error',\n          message: 'Failed to retrieve volume analysis',\n        });\n      }\n    }\n  );\n}\n"
        ],
        "sourceRoot": ""
      }
    },
    "file:///home/asigator/fitness2025/backend/src/routes/program-exercises.ts": {
      "lineLengths": [
        39,
        56,
        80,
        59,
        29,
        16,
        29,
        53,
        43,
        37,
        5,
        55,
        32,
        1,
        60,
        29,
        16,
        24,
        43,
        37,
        5,
        50,
        32,
        1,
        62,
        98,
        13,
        51,
        40,
        31,
        39,
        72,
        91,
        51,
        67,
        23,
        17,
        54,
        13,
        36,
        70,
        13,
        82,
        57,
        9,
        23,
        37,
        43,
        58,
        15,
        9,
        7,
        99,
        13,
        51,
        38,
        153,
        47,
        125,
        19,
        13,
        64,
        47,
        66,
        19,
        13,
        59,
        47,
        85,
        19,
        13,
        61,
        47,
        64,
        19,
        13,
        94,
        47,
        51,
        19,
        13,
        73,
        52,
        46,
        46,
        56,
        44,
        46,
        15,
        50,
        9,
        23,
        55,
        47,
        41,
        19,
        13,
        37,
        43,
        59,
        15,
        9,
        7,
        102,
        13,
        51,
        42,
        62,
        86,
        47,
        56,
        19,
        13,
        77,
        88,
        35,
        47,
        56,
        19,
        13,
        59,
        9,
        23,
        37,
        43,
        56,
        15,
        9,
        7,
        104,
        13,
        51,
        42,
        38,
        62,
        86,
        47,
        56,
        19,
        13,
        100,
        47,
        66,
        19,
        13,
        98,
        47,
        85,
        19,
        13,
        96,
        47,
        64,
        19,
        13,
        97,
        50,
        9,
        23,
        55,
        47,
        41,
        19,
        13,
        37,
        43,
        59,
        15,
        9,
        7,
        105,
        13,
        51,
        42,
        62,
        86,
        47,
        56,
        19,
        13,
        91,
        50,
        9,
        23,
        55,
        47,
        41,
        19,
        13,
        37,
        43,
        59,
        15,
        9,
        7,
        107,
        13,
        51,
        42,
        38,
        62,
        40,
        47,
        69,
        19,
        13,
        86,
        47,
        56,
        19,
        13,
        104,
        50,
        9,
        23,
        55,
        47,
        41,
        19,
        13,
        58,
        47,
        41,
        19,
        13,
        37,
        43,
        49,
        15,
        9,
        7,
        114,
        13,
        51,
        38,
        39,
        47,
        68,
        19,
        13,
        78,
        47,
        86,
        19,
        13,
        94,
        47,
        51,
        19,
        13,
        53,
        86,
        51,
        108,
        23,
        17,
        47,
        51,
        70,
        23,
        17,
        97,
        51,
        95,
        23,
        17,
        13,
        109,
        50,
        9,
        23,
        37,
        43,
        53,
        15,
        9,
        7,
        1,
        35956
      ],
      "data": {
        "version": 3,
        "file": "/home/asigator/fitness2025/backend/src/routes/program-exercises.ts",
        "sources": [
          "file:///home/asigator/fitness2025/backend/src/routes/program-exercises.ts"
        ],
        "names": [],
        "mappings": "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",
        "sourcesContent": [
          "/**\n * Program Exercise Routes (T055-T061)\n *\n * REST endpoints for managing program exercises:\n * - GET /api/program-exercises - List with optional filters\n * - POST /api/program-exercises - Add exercise to program day\n * - GET /api/program-exercises/:id - Get single program exercise\n * - PATCH /api/program-exercises/:id - Update sets/reps/RIR\n * - DELETE /api/program-exercises/:id - Remove exercise\n * - PUT /api/program-exercises/:id/swap - Swap exercise\n * - PATCH /api/program-exercises/batch-reorder - Reorder exercises\n */\n\nimport { FastifyInstance, FastifyRequest, FastifyReply } from 'fastify';\nimport { db } from '../database/db.js';\nimport { authenticateJWT, AuthenticatedRequest } from '../middleware/auth.js';\nimport * as programExerciseService from '../services/programExerciseService.js';\n\n/**\n * Validate user ownership of program exercise (via program_days -> programs -> user_id)\n */\nfunction validateUserOwnership(programExerciseId: number, userId: number): boolean {\n  const stmt = db.prepare(`\n    SELECT pe.id\n    FROM program_exercises pe\n    JOIN program_days pd ON pe.program_day_id = pd.id\n    JOIN programs p ON pd.program_id = p.id\n    WHERE pe.id = ? AND p.user_id = ?\n  `);\n\n  const result = stmt.get(programExerciseId, userId);\n  return result !== undefined;\n}\n\n/**\n * Validate user ownership of program day\n */\nfunction validateProgramDayOwnership(programDayId: number, userId: number): boolean {\n  const stmt = db.prepare(`\n    SELECT pd.id\n    FROM program_days pd\n    JOIN programs p ON pd.program_id = p.id\n    WHERE pd.id = ? AND p.user_id = ?\n  `);\n\n  const result = stmt.get(programDayId, userId);\n  return result !== undefined;\n}\n\n/**\n * Request body for creating program exercise\n */\ninterface CreateProgramExerciseRequest {\n  program_day_id: number;\n  exercise_id: number;\n  target_sets: number;\n  target_rep_range: string;\n  target_rir: number;\n  order_index?: number;\n}\n\n/**\n * Request body for updating program exercise\n */\ninterface UpdateProgramExerciseRequest {\n  target_sets?: number;\n  target_rep_range?: string;\n  target_rir?: number;\n}\n\n/**\n * Request body for swapping exercise\n */\ninterface SwapExerciseRequest {\n  new_exercise_id: number;\n}\n\n/**\n * Request body for batch reorder\n */\ninterface BatchReorderRequest {\n  program_day_id: number;\n  exercise_order: Array<{\n    program_exercise_id: number;\n    new_order_index: number;\n  }>;\n}\n\n/**\n * Register program exercise routes\n */\nexport default async function programExerciseRoutes(fastify: FastifyInstance) {\n  /**\n   * GET /api/program-exercises\n   *\n   * List program exercises with optional filters\n   * Query params: program_day_id, exercise_id\n   *\n   * Requires JWT authentication\n   */\n  fastify.get(\n    '/program-exercises',\n    { preHandler: authenticateJWT },\n    async (request: FastifyRequest, reply: FastifyReply) => {\n      try {\n        const authenticatedUser = (request as AuthenticatedRequest).user;\n        const query = request.query as { program_day_id?: string; exercise_id?: string };\n\n        // Build filters\n        const filters: any = {};\n\n        if (query.program_day_id) {\n          const programDayId = parseInt(query.program_day_id, 10);\n\n          // Validate user owns this program day\n          if (!validateProgramDayOwnership(programDayId, authenticatedUser.userId)) {\n            return reply.status(403).send({\n              error: 'Access denied to this program day',\n            });\n          }\n\n          filters.program_day_id = programDayId;\n        }\n\n        if (query.exercise_id) {\n          filters.exercise_id = parseInt(query.exercise_id, 10);\n        }\n\n        const exercises = programExerciseService.getProgramExercises(filters);\n\n        return reply.status(200).send({ exercises });\n      } catch (error) {\n        fastify.log.error(error);\n        return reply.status(500).send({\n          error: 'Failed to list program exercises',\n        });\n      }\n    }\n  );\n\n  /**\n   * POST /api/program-exercises\n   *\n   * Add exercise to program day with volume warning\n   *\n   * Body: { program_day_id, exercise_id, target_sets, target_rep_range, target_rir, order_index? }\n   * Response: { program_exercise_id, volume_warning? }\n   *\n   * Requires JWT authentication\n   */\n  fastify.post(\n    '/program-exercises',\n    { preHandler: authenticateJWT },\n    async (request: FastifyRequest, reply: FastifyReply) => {\n      try {\n        const authenticatedUser = (request as AuthenticatedRequest).user;\n        const body = request.body as CreateProgramExerciseRequest;\n\n        // Validate required fields\n        if (!body.program_day_id || !body.exercise_id || body.target_sets === undefined || !body.target_rep_range || body.target_rir === undefined) {\n          return reply.status(400).send({\n            error: 'Missing required fields: program_day_id, exercise_id, target_sets, target_rep_range, target_rir',\n          });\n        }\n\n        // Validate target_sets\n        if (body.target_sets < 1 || body.target_sets > 10) {\n          return reply.status(400).send({\n            error: 'target_sets must be between 1 and 10',\n          });\n        }\n\n        // Validate target_rep_range format (N-M)\n        if (!/^\\d+-\\d+$/.test(body.target_rep_range)) {\n          return reply.status(400).send({\n            error: 'target_rep_range must be in format \"N-M\" (e.g., \"8-12\")',\n          });\n        }\n\n        // Validate target_rir\n        if (body.target_rir < 0 || body.target_rir > 4) {\n          return reply.status(400).send({\n            error: 'target_rir must be between 0 and 4',\n          });\n        }\n\n        // Validate user owns this program day\n        if (!validateProgramDayOwnership(body.program_day_id, authenticatedUser.userId)) {\n          return reply.status(404).send({\n            error: 'Program day not found',\n          });\n        }\n\n        // Call service (this will throw if exercise_id or program_day_id doesn't exist)\n        const result = programExerciseService.createProgramExercise({\n          program_day_id: body.program_day_id,\n          exercise_id: body.exercise_id,\n          target_sets: body.target_sets,\n          target_rep_range: body.target_rep_range,\n          target_rir: body.target_rir,\n          order_index: body.order_index,\n        });\n\n        return reply.status(201).send(result);\n      } catch (error: any) {\n        // Check for specific error messages from service\n        if (error.message?.includes('not found')) {\n          return reply.status(404).send({\n            error: error.message,\n          });\n        }\n\n        fastify.log.error(error);\n        return reply.status(500).send({\n          error: 'Failed to create program exercise',\n        });\n      }\n    }\n  );\n\n  /**\n   * GET /api/program-exercises/:id\n   *\n   * Get single program exercise\n   *\n   * Requires JWT authentication\n   */\n  fastify.get(\n    '/program-exercises/:id',\n    { preHandler: authenticateJWT },\n    async (request: FastifyRequest, reply: FastifyReply) => {\n      try {\n        const authenticatedUser = (request as AuthenticatedRequest).user;\n        const params = request.params as { id: string };\n        const programExerciseId = parseInt(params.id, 10);\n\n        // Validate user ownership\n        if (!validateUserOwnership(programExerciseId, authenticatedUser.userId)) {\n          return reply.status(404).send({\n            error: 'Program exercise not found',\n          });\n        }\n\n        // Get program exercise\n        const exercises = programExerciseService.getProgramExercises({});\n        const programExercise = exercises.find((ex: any) => ex.id === programExerciseId);\n\n        if (!programExercise) {\n          return reply.status(404).send({\n            error: 'Program exercise not found',\n          });\n        }\n\n        return reply.status(200).send(programExercise);\n      } catch (error) {\n        fastify.log.error(error);\n        return reply.status(500).send({\n          error: 'Failed to get program exercise',\n        });\n      }\n    }\n  );\n\n  /**\n   * PATCH /api/program-exercises/:id\n   *\n   * Update sets/reps/RIR with volume warning\n   *\n   * Body: { target_sets?, target_rep_range?, target_rir? }\n   * Response: { updated: true, volume_warning? }\n   *\n   * Requires JWT authentication\n   */\n  fastify.patch(\n    '/program-exercises/:id',\n    { preHandler: authenticateJWT },\n    async (request: FastifyRequest, reply: FastifyReply) => {\n      try {\n        const authenticatedUser = (request as AuthenticatedRequest).user;\n        const params = request.params as { id: string };\n        const body = request.body as UpdateProgramExerciseRequest;\n        const programExerciseId = parseInt(params.id, 10);\n\n        // Validate user ownership\n        if (!validateUserOwnership(programExerciseId, authenticatedUser.userId)) {\n          return reply.status(404).send({\n            error: 'Program exercise not found',\n          });\n        }\n\n        // Validate target_sets if provided\n        if (body.target_sets !== undefined && (body.target_sets < 1 || body.target_sets > 10)) {\n          return reply.status(400).send({\n            error: 'target_sets must be between 1 and 10',\n          });\n        }\n\n        // Validate target_rep_range format if provided\n        if (body.target_rep_range !== undefined && !/^\\d+-\\d+$/.test(body.target_rep_range)) {\n          return reply.status(400).send({\n            error: 'target_rep_range must be in format \"N-M\" (e.g., \"8-12\")',\n          });\n        }\n\n        // Validate target_rir if provided\n        if (body.target_rir !== undefined && (body.target_rir < 0 || body.target_rir > 4)) {\n          return reply.status(400).send({\n            error: 'target_rir must be between 0 and 4',\n          });\n        }\n\n        // Call service\n        const result = programExerciseService.updateProgramExercise(programExerciseId, body);\n\n        return reply.status(200).send(result);\n      } catch (error: any) {\n        if (error.message?.includes('not found')) {\n          return reply.status(404).send({\n            error: error.message,\n          });\n        }\n\n        fastify.log.error(error);\n        return reply.status(500).send({\n          error: 'Failed to update program exercise',\n        });\n      }\n    }\n  );\n\n  /**\n   * DELETE /api/program-exercises/:id\n   *\n   * Remove exercise with volume warning\n   *\n   * Response: { deleted: true, volume_warning? }\n   *\n   * Requires JWT authentication\n   */\n  fastify.delete(\n    '/program-exercises/:id',\n    { preHandler: authenticateJWT },\n    async (request: FastifyRequest, reply: FastifyReply) => {\n      try {\n        const authenticatedUser = (request as AuthenticatedRequest).user;\n        const params = request.params as { id: string };\n        const programExerciseId = parseInt(params.id, 10);\n\n        // Validate user ownership\n        if (!validateUserOwnership(programExerciseId, authenticatedUser.userId)) {\n          return reply.status(404).send({\n            error: 'Program exercise not found',\n          });\n        }\n\n        // Call service\n        const result = programExerciseService.deleteProgramExercise(programExerciseId);\n\n        return reply.status(200).send(result);\n      } catch (error: any) {\n        if (error.message?.includes('not found')) {\n          return reply.status(404).send({\n            error: error.message,\n          });\n        }\n\n        fastify.log.error(error);\n        return reply.status(500).send({\n          error: 'Failed to delete program exercise',\n        });\n      }\n    }\n  );\n\n  /**\n   * PUT /api/program-exercises/:id/swap\n   *\n   * Swap exercise with compatible alternative (preserve order_index)\n   *\n   * Body: { new_exercise_id }\n   * Response: { swapped: true, old_exercise_name, new_exercise_name, volume_warning? }\n   *\n   * Requires JWT authentication\n   */\n  fastify.put(\n    '/program-exercises/:id/swap',\n    { preHandler: authenticateJWT },\n    async (request: FastifyRequest, reply: FastifyReply) => {\n      try {\n        const authenticatedUser = (request as AuthenticatedRequest).user;\n        const params = request.params as { id: string };\n        const body = request.body as SwapExerciseRequest;\n        const programExerciseId = parseInt(params.id, 10);\n\n        // Validate required fields\n        if (!body.new_exercise_id) {\n          return reply.status(400).send({\n            error: 'Missing required field: new_exercise_id',\n          });\n        }\n\n        // Validate user ownership\n        if (!validateUserOwnership(programExerciseId, authenticatedUser.userId)) {\n          return reply.status(404).send({\n            error: 'Program exercise not found',\n          });\n        }\n\n        // Call service (this will throw if incompatible or not found)\n        const result = programExerciseService.swapExercise(programExerciseId, body.new_exercise_id);\n\n        return reply.status(200).send(result);\n      } catch (error: any) {\n        if (error.message?.includes('not found')) {\n          return reply.status(404).send({\n            error: error.message,\n          });\n        }\n\n        if (error.message?.includes('incompatible')) {\n          return reply.status(400).send({\n            error: error.message,\n          });\n        }\n\n        fastify.log.error(error);\n        return reply.status(500).send({\n          error: 'Failed to swap exercise',\n        });\n      }\n    }\n  );\n\n  /**\n   * PATCH /api/program-exercises/batch-reorder\n   *\n   * Reorder multiple exercises atomically (drag-and-drop)\n   *\n   * Body: { program_day_id, exercise_order: [{ program_exercise_id, new_order_index }] }\n   * Response: { reordered: true }\n   *\n   * Requires JWT authentication\n   */\n  fastify.patch(\n    '/program-exercises/batch-reorder',\n    { preHandler: authenticateJWT },\n    async (request: FastifyRequest, reply: FastifyReply) => {\n      try {\n        const authenticatedUser = (request as AuthenticatedRequest).user;\n        const body = request.body as BatchReorderRequest;\n\n        // Validate required fields\n        if (!body.program_day_id) {\n          return reply.status(400).send({\n            error: 'Missing required field: program_day_id',\n          });\n        }\n\n        if (!body.exercise_order || !Array.isArray(body.exercise_order)) {\n          return reply.status(400).send({\n            error: 'Missing or invalid field: exercise_order (must be array)',\n          });\n        }\n\n        // Validate user owns this program day\n        if (!validateProgramDayOwnership(body.program_day_id, authenticatedUser.userId)) {\n          return reply.status(404).send({\n            error: 'Program day not found',\n          });\n        }\n\n        // Validate exercise_order items\n        for (const item of body.exercise_order) {\n          if (!item.program_exercise_id || item.new_order_index === undefined) {\n            return reply.status(400).send({\n              error: 'Each exercise_order item must have program_exercise_id and new_order_index',\n            });\n          }\n\n          if (item.new_order_index < 0) {\n            return reply.status(400).send({\n              error: 'new_order_index must be non-negative',\n            });\n          }\n\n          // Validate user owns each program exercise\n          if (!validateUserOwnership(item.program_exercise_id, authenticatedUser.userId)) {\n            return reply.status(403).send({\n              error: `Access denied to program exercise ${item.program_exercise_id}`,\n            });\n          }\n        }\n\n        // Call service\n        const result = programExerciseService.reorderExercises(\n          body.program_day_id,\n          body.exercise_order\n        );\n\n        return reply.status(200).send(result);\n      } catch (error) {\n        fastify.log.error(error);\n        return reply.status(500).send({\n          error: 'Failed to reorder exercises',\n        });\n      }\n    }\n  );\n}\n"
        ],
        "sourceRoot": ""
      }
    },
    "file:///home/asigator/fitness2025/backend/src/routes/vo2max.ts": {
      "lineLengths": [
        131,
        56,
        39,
        29,
        13,
        15,
        27,
        68,
        25,
        48,
        23,
        35,
        54,
        18,
        35,
        36,
        32,
        33,
        18,
        32,
        35,
        53,
        18,
        37,
        36,
        32,
        33,
        18,
        34,
        36,
        32,
        33,
        18,
        35,
        35,
        34,
        34,
        18,
        38,
        36,
        31,
        31,
        18,
        22,
        36,
        31,
        32,
        18,
        24,
        35,
        35,
        18,
        14,
        10,
        6,
        2,
        28,
        13,
        22,
        27,
        25,
        29,
        35,
        54,
        18,
        27,
        35,
        54,
        18,
        32,
        35,
        53,
        18,
        24,
        36,
        31,
        18,
        25,
        36,
        31,
        18,
        14,
        10,
        6,
        2,
        27,
        13,
        22,
        27,
        25,
        29,
        35,
        54,
        18,
        27,
        35,
        54,
        18,
        14,
        10,
        6,
        2,
        29,
        13,
        17,
        27,
        29,
        25,
        39,
        14,
        10,
        15,
        27,
        29,
        25,
        35,
        36,
        32,
        33,
        18,
        37,
        36,
        32,
        33,
        18,
        34,
        36,
        32,
        33,
        18,
        35,
        35,
        34,
        34,
        18,
        38,
        36,
        31,
        31,
        18,
        22,
        36,
        31,
        32,
        18,
        24,
        35,
        35,
        18,
        36,
        35,
        54,
        18,
        14,
        10,
        6,
        2,
        42,
        12,
        19,
        29,
        35,
        23,
        64,
        74,
        43,
        37,
        47,
        53,
        21,
        65,
        25,
        35,
        6,
        1,
        53,
        38,
        31,
        36,
        34,
        13,
        51,
        176,
        39,
        29,
        36,
        30,
        26,
        34,
        53,
        60,
        21,
        14,
        51,
        33,
        51,
        110,
        23,
        17,
        40,
        30,
        82,
        46,
        14,
        71,
        58,
        13,
        18,
        34,
        73,
        36,
        79,
        51,
        71,
        23,
        17,
        13,
        48,
        52,
        48,
        51,
        17,
        13,
        18,
        45,
        51,
        17,
        13,
        33,
        38,
        50,
        30,
        33,
        36,
        35,
        32,
        33,
        14,
        63,
        24,
        32,
        71,
        22,
        84,
        37,
        26,
        41,
        34,
        50,
        26,
        12,
        32,
        72,
        43,
        38,
        60,
        62,
        15,
        9,
        23,
        41,
        64,
        56,
        54,
        51,
        45,
        23,
        17,
        13,
        37,
        43,
        57,
        15,
        9,
        7,
        37,
        30,
        36,
        34,
        13,
        51,
        98,
        29,
        50,
        27,
        25,
        30,
        44,
        23,
        14,
        56,
        81,
        33,
        26,
        36,
        34,
        50,
        31,
        12,
        47,
        83,
        43,
        46,
        50,
        34,
        15,
        9,
        23,
        37,
        43,
        56,
        15,
        9,
        7,
        49,
        29,
        36,
        34,
        13,
        51,
        59,
        101,
        72,
        33,
        57,
        84,
        16,
        43,
        49,
        15,
        9,
        23,
        37,
        43,
        58,
        15,
        9,
        7,
        41,
        36,
        17,
        21,
        31,
        33,
        29,
        43,
        18,
        14,
        10,
        34,
        13,
        62,
        51,
        86,
        27,
        47,
        54,
        19,
        13,
        65,
        52,
        9,
        23,
        37,
        43,
        54,
        15,
        9,
        7,
        43,
        31,
        36,
        34,
        13,
        62,
        51,
        86,
        27,
        47,
        54,
        19,
        13,
        162,
        31,
        30,
        49,
        53,
        51,
        13,
        51,
        47,
        48,
        13,
        48,
        44,
        45,
        13,
        49,
        53,
        46,
        13,
        52,
        56,
        49,
        13,
        36,
        40,
        33,
        13,
        38,
        42,
        35,
        13,
        50,
        54,
        47,
        13,
        39,
        47,
        49,
        19,
        13,
        35,
        27,
        32,
        35,
        22,
        10,
        45,
        93,
        72,
        52,
        9,
        23,
        41,
        99,
        51,
        45,
        23,
        17,
        13,
        37,
        43,
        57,
        15,
        9,
        7,
        1,
        41768
      ],
      "data": {
        "version": 3,
        "file": "/home/asigator/fitness2025/backend/src/routes/vo2max.ts",
        "sources": [
          "file:///home/asigator/fitness2025/backend/src/routes/vo2max.ts"
        ],
        "names": [],
        "mappings": "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",
        "sourcesContent": [
          "/**\n * VO2max Cardio Session Routes\n *\n * REST endpoints for cardio session tracking with Norwegian 4x4 and Zone 2 protocols:\n * - POST /api/vo2max-sessions - Create VO2max session with auto-calculation\n * - GET /api/vo2max-sessions - List sessions with filtering and pagination\n * - GET /api/vo2max-sessions/:id - Get single session details\n * - GET /api/vo2max-sessions/progression - Get VO2max progression over time\n * - PATCH /api/vo2max-sessions/:id - Update session\n */\n\nimport { FastifyInstance, FastifyRequest, FastifyReply } from 'fastify';\nimport {\n  createVO2maxSession,\n  getVO2maxSessions,\n  getVO2maxSessionById,\n  getVO2maxProgression,\n  VO2maxSessionData,\n  VO2maxSessionFilters,\n} from '../services/vo2maxService.js';\nimport { authenticateJWT, AuthenticatedRequest } from '../middleware/auth.js';\nimport { db } from '../database/db.js';\n\n/**\n * Create VO2max session request body interface\n */\ninterface CreateVO2maxSessionBody {\n  workout_id?: number;\n  date: string;\n  duration_minutes: number;\n  protocol_type: 'norwegian_4x4' | 'zone2';\n  average_heart_rate?: number;\n  peak_heart_rate?: number;\n  estimated_vo2max?: number;\n  intervals_completed?: number;\n  rpe?: number;\n  notes?: string;\n}\n\n/**\n * List VO2max sessions query parameters\n */\ninterface ListVO2maxSessionsQuery {\n  start_date?: string;\n  end_date?: string;\n  protocol_type?: 'norwegian_4x4' | 'zone2';\n  limit?: number;\n  offset?: number;\n}\n\n/**\n * Progression query parameters\n */\ninterface ProgressionQuery {\n  start_date?: string;\n  end_date?: string;\n}\n\n/**\n * Update session body\n */\ninterface UpdateSessionBody {\n  duration_minutes?: number;\n  average_heart_rate?: number;\n  peak_heart_rate?: number;\n  estimated_vo2max?: number;\n  intervals_completed?: number;\n  rpe?: number;\n  notes?: string;\n  completion_status?: 'completed' | 'incomplete';\n}\n\n/**\n * Create VO2max session schema\n */\nconst createSessionSchema = {\n  schema: {\n    body: {\n      type: 'object',\n      required: ['date', 'duration_minutes', 'protocol_type'],\n      properties: {\n        workout_id: { type: 'integer' },\n        date: {\n          type: 'string',\n          pattern: '^\\\\d{4}-\\\\d{2}-\\\\d{2}$',\n        },\n        duration_minutes: {\n          type: 'integer',\n          minimum: 10,\n          maximum: 120,\n        },\n        protocol_type: {\n          type: 'string',\n          enum: ['norwegian_4x4', 'zone2'],\n        },\n        average_heart_rate: {\n          type: 'integer',\n          minimum: 60,\n          maximum: 220,\n        },\n        peak_heart_rate: {\n          type: 'integer',\n          minimum: 60,\n          maximum: 220,\n        },\n        estimated_vo2max: {\n          type: 'number',\n          minimum: 20.0,\n          maximum: 80.0,\n        },\n        intervals_completed: {\n          type: 'integer',\n          minimum: 0,\n          maximum: 4,\n        },\n        rpe: {\n          type: 'integer',\n          minimum: 1,\n          maximum: 10,\n        },\n        notes: {\n          type: 'string',\n          maxLength: 500,\n        },\n      },\n    },\n  },\n};\n\n/**\n * List sessions schema\n */\nconst listSessionsSchema = {\n  schema: {\n    querystring: {\n      type: 'object',\n      properties: {\n        start_date: {\n          type: 'string',\n          pattern: '^\\\\d{4}-\\\\d{2}-\\\\d{2}$',\n        },\n        end_date: {\n          type: 'string',\n          pattern: '^\\\\d{4}-\\\\d{2}-\\\\d{2}$',\n        },\n        protocol_type: {\n          type: 'string',\n          enum: ['norwegian_4x4', 'zone2'],\n        },\n        limit: {\n          type: 'integer',\n          minimum: 1,\n        },\n        offset: {\n          type: 'integer',\n          minimum: 0,\n        },\n      },\n    },\n  },\n};\n\n/**\n * Progression schema\n */\nconst progressionSchema = {\n  schema: {\n    querystring: {\n      type: 'object',\n      properties: {\n        start_date: {\n          type: 'string',\n          pattern: '^\\\\d{4}-\\\\d{2}-\\\\d{2}$',\n        },\n        end_date: {\n          type: 'string',\n          pattern: '^\\\\d{4}-\\\\d{2}-\\\\d{2}$',\n        },\n      },\n    },\n  },\n};\n\n/**\n * Update session schema\n */\nconst updateSessionSchema = {\n  schema: {\n    params: {\n      type: 'object',\n      required: ['id'],\n      properties: {\n        id: { type: 'string' },\n      },\n    },\n    body: {\n      type: 'object',\n      minProperties: 1,\n      properties: {\n        duration_minutes: {\n          type: 'integer',\n          minimum: 10,\n          maximum: 120,\n        },\n        average_heart_rate: {\n          type: 'integer',\n          minimum: 60,\n          maximum: 220,\n        },\n        peak_heart_rate: {\n          type: 'integer',\n          minimum: 60,\n          maximum: 220,\n        },\n        estimated_vo2max: {\n          type: 'number',\n          minimum: 20.0,\n          maximum: 80.0,\n        },\n        intervals_completed: {\n          type: 'integer',\n          minimum: 0,\n          maximum: 4,\n        },\n        rpe: {\n          type: 'integer',\n          minimum: 1,\n          maximum: 10,\n        },\n        notes: {\n          type: 'string',\n          maxLength: 500,\n        },\n        completion_status: {\n          type: 'string',\n          enum: ['completed', 'incomplete'],\n        },\n      },\n    },\n  },\n};\n\n/**\n * Transform database row to API response format\n */\nfunction transformSessionToResponse(row: any): any {\n  return {\n    id: row.id,\n    user_id: row.user_id,\n    workout_id: row.workout_id,\n    date: row.date,\n    duration_minutes: Math.floor(row.duration_seconds / 60),\n    protocol_type: row.protocol === '4x4' ? 'norwegian_4x4' : 'zone2',\n    average_heart_rate: row.average_hr,\n    peak_heart_rate: row.peak_hr,\n    estimated_vo2max: row.estimated_vo2max,\n    intervals_completed: row.intervals_completed,\n    rpe: row.rpe,\n    completion_status: row.completion_status || 'incomplete',\n    notes: row.notes,\n    created_at: row.created_at,\n  };\n}\n\n/**\n * Register VO2max routes\n */\nexport default async function vo2maxRoutes(fastify: FastifyInstance) {\n  /**\n   * POST /api/vo2max-sessions\n   *\n   * Create a new VO2max cardio session\n   * Auto-calculates estimated_vo2max using Cooper formula if not provided\n   *\n   * Requires JWT authentication\n   */\n  fastify.post<{ Body: CreateVO2maxSessionBody }>(\n    '/vo2max-sessions',\n    {\n      ...createSessionSchema,\n      preHandler: authenticateJWT,\n    },\n    async (\n      request: FastifyRequest<{ Body: CreateVO2maxSessionBody }>,\n      reply: FastifyReply\n    ) => {\n      try {\n        const authenticatedUser = (request as AuthenticatedRequest).user;\n        const {\n          workout_id,\n          date,\n          duration_minutes,\n          protocol_type,\n          average_heart_rate,\n          peak_heart_rate,\n          estimated_vo2max,\n          intervals_completed,\n          rpe,\n          notes,\n        } = request.body;\n\n        // Create or get workout for this session\n        let workoutId = workout_id;\n\n        if (!workoutId) {\n          // Create a placeholder workout for this cardio session\n          // Find or create a VO2max program day\n          const vo2maxDay = db\n            .prepare(\n              `\n              SELECT pd.id\n              FROM program_days pd\n              JOIN programs p ON pd.program_id = p.id\n              WHERE p.user_id = ? AND pd.day_type = 'vo2max'\n              LIMIT 1\n            `\n            )\n            .get(authenticatedUser.userId) as { id: number } | undefined;\n\n          if (!vo2maxDay) {\n            return reply.status(400).send({\n              error:\n                'No VO2max program day found. Please create a program with VO2max days first.',\n            });\n          }\n\n          // Create workout\n          const workoutResult = db\n            .prepare(\n              `\n              INSERT INTO workouts (user_id, program_day_id, date, status, synced)\n              VALUES (?, ?, ?, 'completed', 1)\n            `\n            )\n            .run(authenticatedUser.userId, vo2maxDay.id, date);\n\n          workoutId = workoutResult.lastInsertRowid as number;\n        } else {\n          // Verify workout ownership\n          const workout = db\n            .prepare('SELECT user_id FROM workouts WHERE id = ?')\n            .get(workoutId) as { user_id: number } | undefined;\n\n          if (!workout || workout.user_id !== authenticatedUser.userId) {\n            return reply.status(403).send({\n              error: 'Not authorized to access this workout',\n            });\n          }\n        }\n\n        // Determine completion status\n        let completionStatus: 'completed' | 'incomplete' = 'incomplete';\n        if (protocol_type === 'norwegian_4x4') {\n          // Norwegian 4x4 is complete if all 4 intervals done\n          if (intervals_completed === 4) {\n            completionStatus = 'completed';\n          }\n        } else {\n          // Zone 2 is complete if duration >= 45 minutes\n          if (duration_minutes >= 45) {\n            completionStatus = 'completed';\n          }\n        }\n\n        // Create session data\n        const sessionData: VO2maxSessionData = {\n          workout_id: workoutId,\n          user_id: authenticatedUser.userId,\n          protocol_type,\n          duration_minutes,\n          intervals_completed,\n          average_heart_rate,\n          peak_heart_rate,\n          estimated_vo2max,\n        };\n\n        // Create VO2max session (service handles auto-calculation)\n        const sessionId = createVO2maxSession(sessionData);\n\n        // Update additional fields (rpe, notes, completion_status, created_at)\n        db.prepare(\n          `\n          UPDATE vo2max_sessions\n          SET rpe = ?, notes = ?, completion_status = ?, created_at = ?\n          WHERE id = ?\n        `\n        ).run(rpe ?? null, notes ?? null, completionStatus, Date.now(), sessionId);\n\n        // Fetch the created session\n        const createdSession = db\n          .prepare(\n            `\n            SELECT v.*, w.date, w.user_id\n            FROM vo2max_sessions v\n            JOIN workouts w ON v.workout_id = w.id\n            WHERE v.id = ?\n          `\n          )\n          .get(sessionId);\n\n        const response = transformSessionToResponse(createdSession);\n\n        return reply.status(201).send({\n          session_id: sessionId,\n          estimated_vo2max: response.estimated_vo2max,\n          completion_status: response.completion_status,\n        });\n      } catch (error) {\n        // Handle validation errors from service or database triggers\n        if (error instanceof Error) {\n          if (\n            error.message.includes('must be between') ||\n            error.message.includes('Invalid') ||\n            error.message.includes('ABORT')\n          ) {\n            return reply.status(400).send({\n              error: error.message,\n            });\n          }\n        }\n\n        fastify.log.error(error);\n        return reply.status(500).send({\n          error: 'Failed to create VO2max session',\n        });\n      }\n    }\n  );\n\n  /**\n   * GET /api/vo2max-sessions\n   *\n   * List VO2max sessions for the authenticated user\n   * Supports filtering by date range, protocol type, and pagination\n   *\n   * Requires JWT authentication\n   */\n  fastify.get<{ Querystring: ListVO2maxSessionsQuery }>(\n    '/vo2max-sessions',\n    {\n      ...listSessionsSchema,\n      preHandler: authenticateJWT,\n    },\n    async (\n      request: FastifyRequest<{ Querystring: ListVO2maxSessionsQuery }>,\n      reply: FastifyReply\n    ) => {\n      try {\n        const authenticatedUser = (request as AuthenticatedRequest).user;\n        const { start_date, end_date, protocol_type, limit = 50, offset = 0 } = request.query;\n\n        const filters: VO2maxSessionFilters = {\n          user_id: authenticatedUser.userId,\n          start_date,\n          end_date,\n          protocol_type,\n          limit: Math.min(limit, 200), // Enforce max limit\n          offset,\n        };\n\n        const sessions = getVO2maxSessions(filters);\n        const transformedSessions = sessions.map(transformSessionToResponse);\n\n        // Get total count for has_more flag\n        const totalCount = db\n          .prepare(\n            `\n            SELECT COUNT(*) as count\n            FROM vo2max_sessions v\n            JOIN workouts w ON v.workout_id = w.id\n            WHERE w.user_id = ?\n          `\n          )\n          .get(authenticatedUser.userId) as { count: number };\n\n        const hasMore = offset + transformedSessions.length < totalCount.count;\n\n        return reply.status(200).send({\n          sessions: transformedSessions,\n          count: transformedSessions.length,\n          has_more: hasMore,\n        });\n      } catch (error) {\n        fastify.log.error(error);\n        return reply.status(500).send({\n          error: 'Failed to list VO2max sessions',\n        });\n      }\n    }\n  );\n\n  /**\n   * GET /api/vo2max-sessions/progression\n   *\n   * Get VO2max progression over time\n   * Returns sessions with estimated VO2max ordered by date (oldest first)\n   *\n   * Requires JWT authentication\n   */\n  fastify.get<{ Querystring: ProgressionQuery }>(\n    '/vo2max-sessions/progression',\n    {\n      ...progressionSchema,\n      preHandler: authenticateJWT,\n    },\n    async (\n      request: FastifyRequest<{ Querystring: ProgressionQuery }>,\n      reply: FastifyReply\n    ) => {\n      try {\n        const authenticatedUser = (request as AuthenticatedRequest).user;\n        const { start_date, end_date } = request.query;\n\n        const progression = getVO2maxProgression(\n          authenticatedUser.userId,\n          start_date,\n          end_date\n        );\n\n        // Transform protocol format\n        const transformedProgression = progression.map((point) => ({\n          date: point.date,\n          estimated_vo2max: point.estimated_vo2max,\n          protocol_type: point.protocol === '4x4' ? 'norwegian_4x4' : 'zone2',\n        }));\n\n        return reply.status(200).send({\n          sessions: transformedProgression,\n        });\n      } catch (error) {\n        fastify.log.error(error);\n        return reply.status(500).send({\n          error: 'Failed to get VO2max progression',\n        });\n      }\n    }\n  );\n\n  /**\n   * GET /api/vo2max-sessions/:id\n   *\n   * Get a single VO2max session by ID\n   * Verifies user ownership\n   *\n   * Requires JWT authentication\n   */\n  fastify.get<{ Params: { id: string } }>(\n    '/vo2max-sessions/:id',\n    {\n      preHandler: authenticateJWT,\n      schema: {\n        params: {\n          type: 'object',\n          required: ['id'],\n          properties: {\n            id: { type: 'string' },\n          },\n        },\n      },\n    },\n    async (request: FastifyRequest<{ Params: { id: string } }>, reply: FastifyReply) => {\n      try {\n        const sessionId = parseInt(request.params.id, 10);\n        const authenticatedUser = (request as AuthenticatedRequest).user;\n\n        const session = getVO2maxSessionById(sessionId, authenticatedUser.userId);\n\n        if (!session) {\n          return reply.status(404).send({\n            error: 'VO2max session not found',\n          });\n        }\n\n        const response = transformSessionToResponse(session);\n\n        return reply.status(200).send(response);\n      } catch (error) {\n        fastify.log.error(error);\n        return reply.status(500).send({\n          error: 'Failed to get VO2max session',\n        });\n      }\n    }\n  );\n\n  /**\n   * PATCH /api/vo2max-sessions/:id\n   *\n   * Update a VO2max session\n   * Verifies user ownership\n   *\n   * Requires JWT authentication\n   */\n  fastify.patch<{ Params: { id: string }; Body: UpdateSessionBody }>(\n    '/vo2max-sessions/:id',\n    {\n      ...updateSessionSchema,\n      preHandler: authenticateJWT,\n    },\n    async (\n      request: FastifyRequest<{ Params: { id: string }; Body: UpdateSessionBody }>,\n      reply: FastifyReply\n    ) => {\n      try {\n        const sessionId = parseInt(request.params.id, 10);\n        const authenticatedUser = (request as AuthenticatedRequest).user;\n\n        // Verify ownership\n        const session = getVO2maxSessionById(sessionId, authenticatedUser.userId);\n\n        if (!session) {\n          return reply.status(404).send({\n            error: 'VO2max session not found',\n          });\n        }\n\n        const {\n          duration_minutes,\n          average_heart_rate,\n          peak_heart_rate,\n          estimated_vo2max,\n          intervals_completed,\n          rpe,\n          notes,\n          completion_status,\n        } = request.body;\n\n        // Build dynamic update query\n        const updates: string[] = [];\n        const params: any[] = [];\n\n        if (duration_minutes !== undefined) {\n          updates.push('duration_seconds = ?');\n          params.push(duration_minutes * 60);\n        }\n\n        if (average_heart_rate !== undefined) {\n          updates.push('average_hr = ?');\n          params.push(average_heart_rate);\n        }\n\n        if (peak_heart_rate !== undefined) {\n          updates.push('peak_hr = ?');\n          params.push(peak_heart_rate);\n        }\n\n        if (estimated_vo2max !== undefined) {\n          updates.push('estimated_vo2max = ?');\n          params.push(estimated_vo2max);\n        }\n\n        if (intervals_completed !== undefined) {\n          updates.push('intervals_completed = ?');\n          params.push(intervals_completed);\n        }\n\n        if (rpe !== undefined) {\n          updates.push('rpe = ?');\n          params.push(rpe);\n        }\n\n        if (notes !== undefined) {\n          updates.push('notes = ?');\n          params.push(notes);\n        }\n\n        if (completion_status !== undefined) {\n          updates.push('completion_status = ?');\n          params.push(completion_status);\n        }\n\n        if (updates.length === 0) {\n          return reply.status(400).send({\n            error: 'No fields to update',\n          });\n        }\n\n        params.push(sessionId);\n\n        const query = `\n          UPDATE vo2max_sessions\n          SET ${updates.join(', ')}\n          WHERE id = ?\n        `;\n\n        db.prepare(query).run(...params);\n\n        // Fetch updated session\n        const updatedSession = getVO2maxSessionById(sessionId, authenticatedUser.userId);\n        const response = transformSessionToResponse(updatedSession);\n\n        return reply.status(200).send(response);\n      } catch (error) {\n        // Handle validation errors from database triggers\n        if (error instanceof Error) {\n          if (error.message.includes('must be between') || error.message.includes('ABORT')) {\n            return reply.status(400).send({\n              error: error.message,\n            });\n          }\n        }\n\n        fastify.log.error(error);\n        return reply.status(500).send({\n          error: 'Failed to update VO2max session',\n        });\n      }\n    }\n  );\n}\n"
        ],
        "sourceRoot": ""
      }
    },
    "file:///home/asigator/fitness2025/backend/src/services/authService.ts": {
      "lineLengths": [
        28,
        75,
        59,
        23,
        36,
        99,
        61,
        23,
        51,
        5,
        67,
        27,
        131,
        43,
        9,
        38,
        5,
        19,
        86,
        5,
        27,
        24,
        17,
        7,
        12,
        16,
        24,
        17,
        14,
        6,
        1,
        62,
        53,
        16,
        47,
        5,
        79,
        27,
        47,
        5,
        27,
        24,
        32,
        7,
        48,
        12,
        14,
        23,
        6,
        1,
        8188
      ],
      "data": {
        "version": 3,
        "file": "/home/asigator/fitness2025/backend/src/services/authService.ts",
        "sources": [
          "file:///home/asigator/fitness2025/backend/src/services/authService.ts"
        ],
        "names": [],
        "mappings": "AAOA,OAAO,MAAM,MAAM,QAAQ,CAAC;AAC5B,OAAO,EACL,qBAAqB,EACrB,cAAc,GACf,MAAM,mBAAmB,CAAC;AAC3B,OAAO,EAAE,oBAAoB,EAAE,MAAM,qBAAqB,CAAC;AAG3D,MAAM,WAAW,GAAG,EAAE,CAAC;AAGvB,MAAM,CAAC,MAAM,cAAc,GAAG,KAAK,CAAC;AA6CpC,MAAM,CAAC,KAAK,UAAU,YAAY,CAChC,QAAgB,EAChB,QAAgB,EAChB,GAAuB,EACvB,SAA6B,EAC7B,gBAAsE,EACtE,OAAkE;IAGlE,MAAM,YAAY,GAAG,qBAAqB,CAAC,GAAG,CAAC,QAAQ,CAAqB,CAAC;IAC7E,IAAI,YAAY,EAAE,CAAC;QACjB,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC7C,CAAC;IAGD,MAAM,aAAa,GAAG,MAAM,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC;IAG/D,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;IACvB,MAAM,MAAM,GAAG,cAAc,CAAC,GAAG,CAC/B,QAAQ,EACR,aAAa,EACb,GAAG,IAAI,IAAI,EACX,SAAS,IAAI,IAAI,EACjB,gBAAgB,IAAI,IAAI,EACxB,GAAG,EACH,GAAG,CACJ,CAAC;IAEF,MAAM,OAAO,GAAG,MAAM,CAAC,eAAyB,CAAC;IAGjD,IAAI,CAAC;QACH,oBAAoB,CAAC,OAAO,CAAC,CAAC;IAChC,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QAEf,OAAO,CAAC,KAAK,CAAC,6CAA6C,OAAO,GAAG,EAAE,KAAK,CAAC,CAAC;IAChF,CAAC;IAGD,MAAM,KAAK,GAAG,OAAO,CAAC;QACpB,MAAM,EAAE,OAAO;QACf,QAAQ;KACT,CAAC,CAAC;IAEH,OAAO;QACL,OAAO;QACP,MAAM,EAAE,OAAO;QACf,QAAQ;QACR,KAAK;KACN,CAAC;AACJ,CAAC;AAWD,MAAM,CAAC,KAAK,UAAU,SAAS,CAC7B,QAAgB,EAChB,QAAgB,EAChB,OAAkE;IAGlE,MAAM,IAAI,GAAG,qBAAqB,CAAC,GAAG,CAAC,QAAQ,CAElC,CAAC;IAEd,IAAI,CAAC,IAAI,EAAE,CAAC;QACV,MAAM,IAAI,KAAK,CAAC,qBAAqB,CAAC,CAAC;IACzC,CAAC;IAGD,MAAM,eAAe,GAAG,MAAM,MAAM,CAAC,OAAO,CAAC,QAAQ,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;IAC3E,IAAI,CAAC,eAAe,EAAE,CAAC;QACrB,MAAM,IAAI,KAAK,CAAC,qBAAqB,CAAC,CAAC;IACzC,CAAC;IAGD,MAAM,KAAK,GAAG,OAAO,CAAC;QACpB,MAAM,EAAE,IAAI,CAAC,EAAE;QACf,QAAQ,EAAE,IAAI,CAAC,QAAQ;KACxB,CAAC,CAAC;IAGH,MAAM,EAAE,aAAa,EAAE,GAAG,QAAQ,EAAE,GAAG,IAAI,CAAC;IAE5C,OAAO;QACL,KAAK;QACL,IAAI,EAAE,QAAQ;KACf,CAAC;AACJ,CAAC",
        "sourcesContent": [
          "/**\n * Authentication Service\n *\n * Implements user registration and login with bcrypt password hashing\n * and JWT token generation (30-day expiration per justified constitutional violation)\n */\n\nimport bcrypt from 'bcrypt';\nimport {\n  stmtGetUserByUsername,\n  stmtCreateUser,\n} from '../database/db.js';\nimport { createDefaultProgram } from './programService.js';\n\n// Bcrypt cost factor (constitutional requirement)\nconst BCRYPT_COST = 12;\n\n// JWT expiration (30 days - justified violation for home server use case)\nexport const JWT_EXPIRATION = '30d';\n\n/**\n * User interface (excluding password_hash for security)\n */\nexport interface User {\n  id: number;\n  username: string;\n  age?: number;\n  weight_kg?: number;\n  experience_level?: 'beginner' | 'intermediate' | 'advanced';\n  created_at: number;\n  updated_at: number;\n}\n\n/**\n * Registration response\n */\nexport interface RegisterResponse {\n  user_id: number;\n  userId: number; // Alias for compatibility\n  username: string;\n  token: string;\n}\n\n/**\n * Login response\n */\nexport interface LoginResponse {\n  token: string;\n  user: User;\n}\n\n/**\n * Register a new user\n *\n * @param username - User's email address (used as username)\n * @param password - Plain text password (will be hashed with bcrypt cost=12)\n * @param age - Optional user age (13-100)\n * @param weight_kg - Optional user weight in kg (30-300)\n * @param experience_level - Optional experience level\n * @param jwtSign - Fastify JWT sign function\n * @returns Object containing user_id and JWT token\n * @throws Error if username already exists or database error occurs\n */\nexport async function registerUser(\n  username: string,\n  password: string,\n  age: number | undefined,\n  weight_kg: number | undefined,\n  experience_level: 'beginner' | 'intermediate' | 'advanced' | undefined,\n  jwtSign: (payload: { userId: number; username: string }) => string\n): Promise<RegisterResponse> {\n  // Check if username already exists\n  const existingUser = stmtGetUserByUsername.get(username) as User | undefined;\n  if (existingUser) {\n    throw new Error('Username already exists');\n  }\n\n  // Hash password with bcrypt (cost=12)\n  const password_hash = await bcrypt.hash(password, BCRYPT_COST);\n\n  // Insert user into database\n  const now = Date.now();\n  const result = stmtCreateUser.run(\n    username,\n    password_hash,\n    age ?? null,\n    weight_kg ?? null,\n    experience_level ?? null,\n    now,\n    now\n  );\n\n  const user_id = result.lastInsertRowid as number;\n\n  // Create default 6-day Renaissance Periodization program for new user\n  try {\n    createDefaultProgram(user_id);\n  } catch (error) {\n    // Log error but don't fail registration - user can still use the app\n    console.error(`Failed to create default program for user ${user_id}:`, error);\n  }\n\n  // Generate JWT token with 30-day expiration\n  const token = jwtSign({\n    userId: user_id,\n    username,\n  });\n\n  return {\n    user_id,\n    userId: user_id, // Alias for compatibility\n    username,\n    token,\n  };\n}\n\n/**\n * Login existing user\n *\n * @param username - User's email address\n * @param password - Plain text password\n * @param jwtSign - Fastify JWT sign function\n * @returns Object containing JWT token and user data\n * @throws Error if credentials are invalid\n */\nexport async function loginUser(\n  username: string,\n  password: string,\n  jwtSign: (payload: { userId: number; username: string }) => string\n): Promise<LoginResponse> {\n  // Get user by username\n  const user = stmtGetUserByUsername.get(username) as\n    | (User & { password_hash: string })\n    | undefined;\n\n  if (!user) {\n    throw new Error('Invalid credentials');\n  }\n\n  // Verify password with bcrypt\n  const isValidPassword = await bcrypt.compare(password, user.password_hash);\n  if (!isValidPassword) {\n    throw new Error('Invalid credentials');\n  }\n\n  // Generate JWT token\n  const token = jwtSign({\n    userId: user.id,\n    username: user.username,\n  });\n\n  // Return user data (excluding password_hash)\n  const { password_hash, ...userData } = user;\n\n  return {\n    token,\n    user: userData,\n  };\n}\n"
        ],
        "sourceRoot": ""
      }
    },
    "file:///home/asigator/fitness2025/backend/src/middleware/auth.ts": {
      "lineLengths": [
        55,
        9,
        34,
        5,
        19,
        39,
        61,
        11,
        5,
        1,
        2556
      ],
      "data": {
        "version": 3,
        "file": "/home/asigator/fitness2025/backend/src/middleware/auth.ts",
        "sources": [
          "file:///home/asigator/fitness2025/backend/src/middleware/auth.ts"
        ],
        "names": [],
        "mappings": "AA8BA,MAAM,CAAC,KAAK,UAAU,eAAe,CACnC,OAAuB,EACvB,KAAmB;IAEnB,IAAI,CAAC;QAEH,MAAM,OAAO,CAAC,SAAS,EAAE,CAAC;IAK5B,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QAEf,OAAO,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;YAC5B,KAAK,EAAE,yCAAyC;SACjD,CAAC,CAAC;IACL,CAAC;AACH,CAAC",
        "sourcesContent": [
          "/**\n * JWT Authentication Middleware\n *\n * Verifies JWT tokens from Authorization header and attaches user info to request\n */\n\nimport { FastifyRequest, FastifyReply } from 'fastify';\n\n/**\n * Extended FastifyRequest with authenticated user information\n */\nexport interface AuthenticatedRequest extends FastifyRequest {\n  user: {\n    userId: number;\n    username: string;\n  };\n}\n\n/**\n * JWT Authentication Middleware\n *\n * Verifies JWT from Authorization header (Bearer token format)\n * Attaches decoded user info to req.user for authenticated routes\n * Returns 401 if token is invalid, expired, or missing\n *\n * Usage:\n * fastify.addHook('preHandler', authenticateJWT)\n * OR\n * fastify.get('/protected', { preHandler: authenticateJWT }, handler)\n */\nexport async function authenticateJWT(\n  request: FastifyRequest,\n  reply: FastifyReply\n): Promise<void> {\n  try {\n    // Verify JWT token - Fastify JWT plugin automatically checks Authorization header\n    await request.jwtVerify();\n\n    // Token is valid, user payload is attached by @fastify/jwt\n    // The plugin attaches the decoded payload to request.user\n    // Type assertion needed because Fastify types don't know our payload structure\n  } catch (error) {\n    // Token is invalid, expired, or missing\n    return reply.status(401).send({\n      error: 'Unauthorized - Invalid or expired token',\n    });\n  }\n}\n"
        ],
        "sourceRoot": ""
      }
    },
    "file:///home/asigator/fitness2025/backend/src/database/db.ts": {
      "lineLengths": [
        38,
        57,
        37,
        36,
        50,
        38,
        57,
        69,
        33,
        27,
        44,
        1,
        41,
        78,
        3,
        32,
        33,
        35,
        31,
        32,
        54,
        20,
        47,
        2,
        29,
        9,
        25,
        90,
        19,
        24,
        5,
        11,
        21,
        5,
        2,
        23,
        23,
        1,
        90,
        78,
        42,
        103,
        30,
        3,
        75,
        45,
        70,
        36,
        3,
        49,
        38,
        17,
        55,
        21,
        22,
        3,
        58,
        38,
        17,
        55,
        53,
        22,
        3,
        51,
        17,
        88,
        14,
        3,
        55,
        17,
        24,
        14,
        3,
        46,
        37,
        3,
        59,
        14,
        22,
        41,
        35,
        3,
        38,
        104,
        36,
        3,
        48,
        37,
        13,
        42,
        24,
        23,
        3,
        47,
        52,
        3,
        47,
        45,
        3,
        45,
        41,
        3,
        56,
        36,
        69,
        53,
        3,
        36,
        3,
        59,
        36,
        32,
        3,
        51,
        31,
        64,
        49,
        3,
        33,
        3,
        57,
        52,
        3,
        46,
        8,
        11,
        69,
        13,
        40,
        75,
        17,
        17,
        3,
        44,
        8,
        38,
        29,
        13,
        40,
        42,
        21,
        35,
        44,
        15,
        15,
        3,
        50,
        8,
        75,
        31,
        102,
        15,
        19,
        3,
        48,
        49,
        3,
        51,
        42,
        84,
        3,
        27,
        3,
        51,
        24,
        65,
        19,
        3,
        51,
        47,
        3,
        46,
        78,
        24,
        3,
        50,
        26,
        19,
        25,
        9,
        3,
        58,
        44,
        2,
        58,
        25,
        22,
        24,
        30,
        24,
        31,
        22,
        2,
        48,
        29,
        24,
        40,
        23,
        96,
        5,
        18,
        2,
        36,
        32,
        2,
        47,
        46,
        35,
        27,
        9,
        7,
        20,
        2,
        36,
        15,
        46,
        2,
        26,
        20,
        3,
        28,
        20,
        20,
        3,
        29,
        20,
        20,
        3,
        18,
        20808
      ],
      "data": {
        "version": 3,
        "file": "/home/asigator/fitness2025/backend/src/database/db.ts",
        "sources": [
          "file:///home/asigator/fitness2025/backend/src/database/db.ts"
        ],
        "names": [],
        "mappings": "AAUA,OAAO,QAAuB,MAAM,gBAAgB,CAAC;AACrD,OAAO,EAAE,YAAY,EAAE,SAAS,EAAE,UAAU,EAAE,MAAM,IAAI,CAAC;AACzD,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,MAAM,MAAM,CAAC;AACrC,OAAO,EAAE,aAAa,EAAE,MAAM,KAAK,CAAC;AAGpC,MAAM,UAAU,GAAG,aAAa,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AAClD,MAAM,SAAS,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC;AAGtC,MAAM,OAAO,GAAG,IAAI,CAAC,SAAS,EAAE,uBAAuB,CAAC,CAAC;AACzD,MAAM,WAAW,GAAG,IAAI,CAAC,SAAS,EAAE,+BAA+B,CAAC,CAAC;AAGrE,MAAM,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC;AACjC,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,EAAE,CAAC;IACzB,SAAS,CAAC,OAAO,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC;AAC1C,CAAC;AAGD,MAAM,CAAC,MAAM,EAAE,GAAsB,IAAI,QAAQ,CAAC,OAAO,EAAE;IACzD,OAAO,EAAE,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,aAAa,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,SAAS;CAC1E,CAAC,CAAC;AAGH,EAAE,CAAC,MAAM,CAAC,oBAAoB,CAAC,CAAC;AAChC,EAAE,CAAC,MAAM,CAAC,qBAAqB,CAAC,CAAC;AACjC,EAAE,CAAC,MAAM,CAAC,uBAAuB,CAAC,CAAC;AACnC,EAAE,CAAC,MAAM,CAAC,mBAAmB,CAAC,CAAC;AAG/B,MAAM,gBAAgB,GAAG,GAAS,EAAE;IAClC,MAAM,MAAM,GAAG,YAAY,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC;IAClD,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IAChB,OAAO,CAAC,GAAG,CAAC,6BAA6B,CAAC,CAAC;AAC7C,CAAC,CAAC;AAGF,MAAM,aAAa,GAAG,GAAY,EAAE;IAClC,IAAI,CAAC;QACH,MAAM,MAAM,GAAG,EAAE;aACd,OAAO,CACN,oEAAoE,CACrE;aACA,GAAG,EAAE,CAAC;QACT,OAAO,CAAC,CAAC,MAAM,CAAC;IAClB,CAAC;IAAC,MAAM,CAAC;QACP,OAAO,KAAK,CAAC;IACf,CAAC;AACH,CAAC,CAAC;AAGF,IAAI,CAAC,aAAa,EAAE,EAAE,CAAC;IACrB,gBAAgB,EAAE,CAAC;AACrB,CAAC;AAOD,MAAM,CAAC,MAAM,qBAAqB,GAAc,EAAE,CAAC,OAAO,CACxD,wCAAwC,CACzC,CAAC;AAEF,MAAM,CAAC,MAAM,eAAe,GAAc,EAAE,CAAC,OAAO,CAAC,kCAAkC,CAAC,CAAC;AAEzF,MAAM,CAAC,MAAM,cAAc,GAAc,EAAE,CAAC,OAAO,CAAC;;;CAGnD,CAAC,CAAC;AAEH,MAAM,CAAC,MAAM,cAAc,GAAc,EAAE,CAAC,OAAO,CAAC,gCAAgC,CAAC,CAAC;AAGtF,MAAM,CAAC,MAAM,iBAAiB,GAAc,EAAE,CAAC,OAAO,CAAC;;;CAGtD,CAAC,CAAC;AAEH,MAAM,CAAC,MAAM,qBAAqB,GAAc,EAAE,CAAC,OAAO,CAAC;;;;;;CAM1D,CAAC,CAAC;AAEH,MAAM,CAAC,MAAM,8BAA8B,GAAc,EAAE,CAAC,OAAO,CAAC;;;;;;CAMnE,CAAC,CAAC;AAEH,MAAM,CAAC,MAAM,uBAAuB,GAAc,EAAE,CAAC,OAAO,CAAC;;;;CAI5D,CAAC,CAAC;AAEH,MAAM,CAAC,MAAM,2BAA2B,GAAc,EAAE,CAAC,OAAO,CAAC;;;;CAIhE,CAAC,CAAC;AAEH,MAAM,CAAC,MAAM,kBAAkB,GAAc,EAAE,CAAC,OAAO,CAAC;;CAEvD,CAAC,CAAC;AAEH,MAAM,CAAC,MAAM,+BAA+B,GAAc,EAAE,CAAC,OAAO,CAAC;;;;;CAKpE,CAAC,CAAC;AAGH,MAAM,CAAC,MAAM,UAAU,GAAc,EAAE,CAAC,OAAO,CAAC;;;CAG/C,CAAC,CAAC;AAEH,MAAM,CAAC,MAAM,oBAAoB,GAAc,EAAE,CAAC,OAAO,CAAC;;;;;;CAMzD,CAAC,CAAC;AAEH,MAAM,CAAC,MAAM,mBAAmB,GAAc,EAAE,CAAC,OAAO,CAAC;;CAExD,CAAC,CAAC;AAEH,MAAM,CAAC,MAAM,mBAAmB,GAAc,EAAE,CAAC,OAAO,CAAC;;CAExD,CAAC,CAAC;AAEH,MAAM,CAAC,MAAM,iBAAiB,GAAc,EAAE,CAAC,OAAO,CAAC;;CAEtD,CAAC,CAAC;AAGH,MAAM,CAAC,MAAM,4BAA4B,GAAc,EAAE,CAAC,OAAO,CAAC;;;;;;CAMjE,CAAC,CAAC;AAEH,MAAM,CAAC,MAAM,+BAA+B,GAAc,EAAE,CAAC,OAAO,CAAC;;;CAGpE,CAAC,CAAC;AAGH,MAAM,CAAC,MAAM,uBAAuB,GAAc,EAAE,CAAC,OAAO,CAAC;;;;;;CAM5D,CAAC,CAAC;AAEH,MAAM,CAAC,MAAM,6BAA6B,GAAc,EAAE,CAAC,OAAO,CAAC;;CAElE,CAAC,CAAC;AAGH,MAAM,CAAC,MAAM,kBAAkB,GAAc,EAAE,CAAC,OAAO,CAAC;;;;;;;;;CASvD,CAAC,CAAC;AAEH,MAAM,CAAC,MAAM,gBAAgB,GAAc,EAAE,CAAC,OAAO,CAAC;;;;;;;;;;;;CAYrD,CAAC,CAAC;AAEH,MAAM,CAAC,MAAM,sBAAsB,GAAc,EAAE,CAAC,OAAO,CAAC;;;;;;;CAO3D,CAAC,CAAC;AAGH,MAAM,CAAC,MAAM,oBAAoB,GAAc,EAAE,CAAC,OAAO,CAAC;;CAEzD,CAAC,CAAC;AAEH,MAAM,CAAC,MAAM,uBAAuB,GAAc,EAAE,CAAC,OAAO,CAAC;;;;;CAK5D,CAAC,CAAC;AAEH,MAAM,CAAC,MAAM,uBAAuB,GAAc,EAAE,CAAC,OAAO,CAAC;;;;CAI5D,CAAC,CAAC;AAEH,MAAM,CAAC,MAAM,uBAAuB,GAAc,EAAE,CAAC,OAAO,CAAC;;CAE5D,CAAC,CAAC;AAGH,MAAM,CAAC,MAAM,kBAAkB,GAAc,EAAE,CAAC,OAAO,CAAC;;;CAGvD,CAAC,CAAC;AAEH,MAAM,CAAC,MAAM,sBAAsB,GAAc,EAAE,CAAC,OAAO,CAAC;;;;;CAK3D,CAAC,CAAC;AAUH,MAAM,CAAC,MAAM,kBAAkB,GAAG,CAChC,MAAc,EACd,IAAY,EACZ,GAAW,EACH,EAAE;IACV,OAAO,MAAM,GAAG,CAAC,CAAC,GAAG,CAAC,IAAI,GAAG,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC;AAC1C,CAAC,CAAC;AAMF,MAAM,CAAC,MAAM,yBAAyB,GAAG,CACvC,UAAkB,EACsC,EAAE;IAC1D,IAAI,UAAU,IAAI,EAAE;QAAE,OAAO,MAAM,CAAC;IACpC,IAAI,UAAU,IAAI,CAAC;QAAE,OAAO,cAAc,CAAC;IAC3C,IAAI,UAAU,IAAI,CAAC;QAAE,OAAO,eAAe,CAAC;IAC5C,OAAO,UAAU,CAAC;AACpB,CAAC,CAAC;AAKF,MAAM,CAAC,MAAM,iBAAiB,GAAG,CAC/B,IAAY,EACZ,EAAW,EACR,EAAE;IACL,MAAM,KAAK,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;IACzB,MAAM,MAAM,GAAG,EAAE,EAAE,CAAC;IACpB,MAAM,QAAQ,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,KAAK,CAAC;IAEpC,IAAI,QAAQ,GAAG,CAAC,EAAE,CAAC;QACjB,OAAO,CAAC,IAAI,CACV,gCAAgC,IAAI,UAAU,QAAQ,mBAAmB,CAC1E,CAAC;IACJ,CAAC;IAED,OAAO,MAAM,CAAC;AAChB,CAAC,CAAC;AASF,MAAM,CAAC,MAAM,WAAW,GAAG,CAAI,EAAW,EAAK,EAAE;IAC/C,OAAO,EAAE,CAAC,WAAW,CAAC,EAAE,CAAC,EAAE,CAAC;AAC9B,CAAC,CAAC;AAKF,MAAM,CAAC,MAAM,WAAW,GAAG,CACzB,IAAwB,EACxB,OAAY,EACN,EAAE;IACR,MAAM,MAAM,GAAG,EAAE,CAAC,WAAW,CAAC,CAAC,KAAU,EAAE,EAAE;QAC3C,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE,CAAC;YACzB,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QACjB,CAAC;IACH,CAAC,CAAC,CAAC;IAEH,MAAM,CAAC,OAAO,CAAC,CAAC;AAClB,CAAC,CAAC;AASF,MAAM,CAAC,MAAM,aAAa,GAAG,GAAS,EAAE;IACtC,EAAE,CAAC,KAAK,EAAE,CAAC;IACX,OAAO,CAAC,GAAG,CAAC,4BAA4B,CAAC,CAAC;AAC5C,CAAC,CAAC;AAGF,OAAO,CAAC,EAAE,CAAC,MAAM,EAAE,GAAG,EAAE;IACtB,aAAa,EAAE,CAAC;AAClB,CAAC,CAAC,CAAC;AAEH,OAAO,CAAC,EAAE,CAAC,QAAQ,EAAE,GAAG,EAAE;IACxB,aAAa,EAAE,CAAC;IAChB,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AAClB,CAAC,CAAC,CAAC;AAEH,OAAO,CAAC,EAAE,CAAC,SAAS,EAAE,GAAG,EAAE;IACzB,aAAa,EAAE,CAAC;IAChB,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AAClB,CAAC,CAAC,CAAC;AAEH,eAAe,EAAE,CAAC",
        "sourcesContent": [
          "/**\n * Backend Database Initialization\n *\n * Initializes better-sqlite3 with performance optimizations:\n * - WAL mode for concurrent reads\n * - 64MB cache for query performance\n * - 256MB memory-mapped I/O\n * - Prepared statements for common queries\n */\n\nimport Database, { Statement } from 'better-sqlite3';\nimport { readFileSync, mkdirSync, existsSync } from 'fs';\nimport { join, dirname } from 'path';\nimport { fileURLToPath } from 'url';\n\n// Get the directory of this module file\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\n\n// Database file path - from dist/database to backend root\nconst DB_PATH = join(__dirname, '../../data/fitflow.db');\nconst SCHEMA_PATH = join(__dirname, '../../src/database/schema.sql');\n\n// Ensure data directory exists\nconst dataDir = dirname(DB_PATH);\nif (!existsSync(dataDir)) {\n  mkdirSync(dataDir, { recursive: true });\n}\n\n// Initialize database\nexport const db: Database.Database = new Database(DB_PATH, {\n  verbose: process.env.NODE_ENV === 'development' ? console.log : undefined,\n});\n\n// Apply performance optimizations\ndb.pragma('journal_mode = WAL');\ndb.pragma('cache_size = -64000'); // 64MB cache\ndb.pragma('mmap_size = 268435456'); // 256MB memory-mapped I/O\ndb.pragma('foreign_keys = ON');\n\n// Initialize schema on first run\nconst initializeSchema = (): void => {\n  const schema = readFileSync(SCHEMA_PATH, 'utf-8');\n  db.exec(schema);\n  console.log('Database schema initialized');\n};\n\n// Check if database is initialized (check for users table)\nconst isInitialized = (): boolean => {\n  try {\n    const result = db\n      .prepare(\n        \"SELECT name FROM sqlite_master WHERE type='table' AND name='users'\"\n      )\n      .get();\n    return !!result;\n  } catch {\n    return false;\n  }\n};\n\n// Initialize if needed\nif (!isInitialized()) {\n  initializeSchema();\n}\n\n// ============================================================================\n// Prepared Statements (Common Queries)\n// ============================================================================\n\n// User Operations\nexport const stmtGetUserByUsername: Statement = db.prepare(\n  'SELECT * FROM users WHERE username = ?'\n);\n\nexport const stmtGetUserById: Statement = db.prepare('SELECT * FROM users WHERE id = ?');\n\nexport const stmtCreateUser: Statement = db.prepare(`\n  INSERT INTO users (username, password_hash, age, weight_kg, experience_level, created_at, updated_at)\n  VALUES (?, ?, ?, ?, ?, ?, ?)\n`);\n\nexport const stmtDeleteUser: Statement = db.prepare('DELETE FROM users WHERE id = ?');\n\n// Workout Operations\nexport const stmtCreateWorkout: Statement = db.prepare(`\n  INSERT INTO workouts (user_id, program_day_id, date, status, synced)\n  VALUES (?, ?, ?, 'not_started', 1)\n`);\n\nexport const stmtGetWorkoutsByUser: Statement = db.prepare(`\n  SELECT w.*, pd.day_name, pd.day_type\n  FROM workouts w\n  LEFT JOIN program_days pd ON w.program_day_id = pd.id\n  WHERE w.user_id = ?\n  ORDER BY w.date DESC\n`);\n\nexport const stmtGetWorkoutsByUserDateRange: Statement = db.prepare(`\n  SELECT w.*, pd.day_name, pd.day_type\n  FROM workouts w\n  LEFT JOIN program_days pd ON w.program_day_id = pd.id\n  WHERE w.user_id = ? AND w.date >= ? AND w.date <= ?\n  ORDER BY w.date DESC\n`);\n\nexport const stmtUpdateWorkoutStatus: Statement = db.prepare(`\n  UPDATE workouts\n  SET status = ?, started_at = ?, completed_at = ?, total_volume_kg = ?, average_rir = ?\n  WHERE id = ?\n`);\n\nexport const stmtUpdateWorkoutProgramDay: Statement = db.prepare(`\n  UPDATE workouts\n  SET program_day_id = ?\n  WHERE id = ?\n`);\n\nexport const stmtGetWorkoutById: Statement = db.prepare(`\n  SELECT * FROM workouts WHERE id = ?\n`);\n\nexport const stmtValidateProgramDayOwnership: Statement = db.prepare(`\n  SELECT pd.id\n  FROM program_days pd\n  JOIN programs p ON pd.program_id = p.id\n  WHERE pd.id = ? AND p.user_id = ?\n`);\n\n// Set Operations\nexport const stmtLogSet: Statement = db.prepare(`\n  INSERT INTO sets (workout_id, exercise_id, set_number, weight_kg, reps, rir, timestamp, notes, synced)\n  VALUES (?, ?, ?, ?, ?, ?, ?, ?, 1)\n`);\n\nexport const stmtGetSetsByWorkout: Statement = db.prepare(`\n  SELECT s.*, e.name as exercise_name\n  FROM sets s\n  JOIN exercises e ON s.exercise_id = e.id\n  WHERE s.workout_id = ?\n  ORDER BY s.set_number\n`);\n\nexport const stmtGetSetByLocalId: Statement = db.prepare(`\n  SELECT * FROM sets WHERE id = ? AND workout_id = ?\n`);\n\nexport const stmtGetUnsyncedSets: Statement = db.prepare(`\n  SELECT * FROM sets WHERE synced = 0 LIMIT ?\n`);\n\nexport const stmtMarkSetSynced: Statement = db.prepare(`\n  UPDATE sets SET synced = 1 WHERE id = ?\n`);\n\n// Recovery Assessment Operations\nexport const stmtCreateRecoveryAssessment: Statement = db.prepare(`\n  INSERT INTO recovery_assessments (\n    user_id, date, sleep_quality, muscle_soreness, mental_motivation,\n    total_score, volume_adjustment, timestamp, synced\n  )\n  VALUES (?, ?, ?, ?, ?, ?, ?, ?, 1)\n`);\n\nexport const stmtGetRecoveryAssessmentByDate: Statement = db.prepare(`\n  SELECT * FROM recovery_assessments\n  WHERE user_id = ? AND date = ?\n`);\n\n// VO2max Session Operations\nexport const stmtCreateVO2maxSession: Statement = db.prepare(`\n  INSERT INTO vo2max_sessions (\n    workout_id, protocol, duration_seconds, intervals_completed,\n    average_hr, peak_hr, estimated_vo2max, synced\n  )\n  VALUES (?, ?, ?, ?, ?, ?, ?, 1)\n`);\n\nexport const stmtGetVO2maxSessionByWorkout: Statement = db.prepare(`\n  SELECT * FROM vo2max_sessions WHERE workout_id = ?\n`);\n\n// Analytics Queries\nexport const stmt1RMProgression: Statement = db.prepare(`\n  SELECT\n    w.date,\n    MAX(s.weight_kg * (1 + (s.reps - s.rir) / 30.0)) as estimated_1rm\n  FROM sets s\n  JOIN workouts w ON s.workout_id = w.id\n  WHERE w.user_id = ? AND s.exercise_id = ? AND w.date >= ? AND w.date <= ?\n  GROUP BY w.date\n  ORDER BY w.date\n`);\n\nexport const stmtVolumeTrends: Statement = db.prepare(`\n  SELECT\n    strftime('%Y-%W', w.date) as week,\n    COUNT(s.id) as total_sets\n  FROM sets s\n  JOIN workouts w ON s.workout_id = w.id\n  JOIN exercises e ON s.exercise_id = e.id\n  WHERE w.user_id = ?\n    AND w.date >= ? AND w.date <= ?\n    AND e.muscle_groups LIKE '%' || ? || '%'\n  GROUP BY week\n  ORDER BY week\n`);\n\nexport const stmtConsistencyMetrics: Statement = db.prepare(`\n  SELECT\n    COUNT(CASE WHEN status = 'completed' THEN 1 END) as completed_workouts,\n    COUNT(*) as total_workouts,\n    AVG(CASE WHEN completed_at IS NOT NULL THEN completed_at - started_at END) as avg_session_duration\n  FROM workouts\n  WHERE user_id = ?\n`);\n\n// Active Session Operations\nexport const stmtGetActiveSession: Statement = db.prepare(`\n  SELECT * FROM active_sessions WHERE user_id = ?\n`);\n\nexport const stmtCreateActiveSession: Statement = db.prepare(`\n  INSERT OR REPLACE INTO active_sessions (\n    user_id, workout_id, current_exercise_index, started_at, last_activity_at, state\n  )\n  VALUES (?, ?, ?, ?, ?, ?)\n`);\n\nexport const stmtUpdateActiveSession: Statement = db.prepare(`\n  UPDATE active_sessions\n  SET current_exercise_index = ?, last_activity_at = ?, state = ?\n  WHERE user_id = ?\n`);\n\nexport const stmtDeleteActiveSession: Statement = db.prepare(`\n  DELETE FROM active_sessions WHERE user_id = ?\n`);\n\n// Audit Log Operations\nexport const stmtCreateAuditLog: Statement = db.prepare(`\n  INSERT INTO audit_logs (user_id, event_type, ip_address, timestamp, details)\n  VALUES (?, ?, ?, ?, ?)\n`);\n\nexport const stmtGetAuditLogsByUser: Statement = db.prepare(`\n  SELECT * FROM audit_logs\n  WHERE user_id = ?\n  ORDER BY timestamp DESC\n  LIMIT ?\n`);\n\n// ============================================================================\n// Helper Functions\n// ============================================================================\n\n/**\n * Calculate estimated 1RM using Epley formula with RIR adjustment\n * Formula: 1RM = weight × (1 + (reps - rir) / 30)\n */\nexport const calculateOneRepMax = (\n  weight: number,\n  reps: number,\n  rir: number\n): number => {\n  return weight * (1 + (reps - rir) / 30);\n};\n\n/**\n * Calculate recovery score auto-regulation adjustment\n * Ranges: 12-15 = none, 9-11 = reduce_1_set, 6-8 = reduce_2_sets, 3-5 = rest_day\n */\nexport const calculateVolumeAdjustment = (\n  totalScore: number\n): 'none' | 'reduce_1_set' | 'reduce_2_sets' | 'rest_day' => {\n  if (totalScore >= 12) return 'none';\n  if (totalScore >= 9) return 'reduce_1_set';\n  if (totalScore >= 6) return 'reduce_2_sets';\n  return 'rest_day';\n};\n\n/**\n * Execute query with performance timing\n */\nexport const executeWithTiming = <T>(\n  name: string,\n  fn: () => T\n): T => {\n  const start = Date.now();\n  const result = fn();\n  const duration = Date.now() - start;\n\n  if (duration > 5) {\n    console.warn(\n      `[PERFORMANCE WARNING] Query \"${name}\" took ${duration}ms (target: <5ms)`\n    );\n  }\n\n  return result;\n};\n\n// ============================================================================\n// Transaction Helpers\n// ============================================================================\n\n/**\n * Execute function within transaction\n */\nexport const transaction = <T>(fn: () => T): T => {\n  return db.transaction(fn)();\n};\n\n/**\n * Batch insert with transaction\n */\nexport const batchInsert = <T>(\n  stmt: Database.Statement,\n  records: T[]\n): void => {\n  const insert = db.transaction((items: T[]) => {\n    for (const item of items) {\n      stmt.run(item);\n    }\n  });\n\n  insert(records);\n};\n\n// ============================================================================\n// Cleanup\n// ============================================================================\n\n/**\n * Close database connection\n */\nexport const closeDatabase = (): void => {\n  db.close();\n  console.log('Database connection closed');\n};\n\n// Handle process termination\nprocess.on('exit', () => {\n  closeDatabase();\n});\n\nprocess.on('SIGINT', () => {\n  closeDatabase();\n  process.exit(0);\n});\n\nprocess.on('SIGTERM', () => {\n  closeDatabase();\n  process.exit(0);\n});\n\nexport default db;\n"
        ],
        "sourceRoot": ""
      }
    },
    "file:///home/asigator/fitness2025/backend/src/services/auditService.ts": {
      "lineLengths": [
        55,
        80,
        85,
        1,
        73,
        64,
        94,
        1,
        74,
        75,
        99,
        1,
        57,
        54,
        28,
        21,
        27,
        11,
        5,
        35,
        1,
        84,
        54,
        28,
        43,
        27,
        11,
        5,
        57,
        1,
        6552
      ],
      "data": {
        "version": 3,
        "file": "/home/asigator/fitness2025/backend/src/services/auditService.ts",
        "sources": [
          "file:///home/asigator/fitness2025/backend/src/services/auditService.ts"
        ],
        "names": [],
        "mappings": "AAOA,OAAO,EAAE,kBAAkB,EAAE,MAAM,mBAAmB,CAAC;AAqBvD,MAAM,UAAU,YAAY,CAC1B,MAAc,EACd,SAAyD,EACzD,SAAiB,EACjB,SAAiB,EACjB,OAAgB;IAEhB,kBAAkB,CAAC,GAAG,CACpB,MAAM,EACN,SAAS,EACT,SAAS,EACT,SAAS,EACT,OAAO,IAAI,IAAI,CAChB,CAAC;AACJ,CAAC;AAUD,MAAM,UAAU,aAAa,CAC3B,MAAc,EACd,UAAkB,EAClB,SAAiB,EACjB,SAAkB;IAElB,MAAM,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,EAAE,WAAW,EAAE,UAAU,EAAE,CAAC,CAAC;IAC5D,kBAAkB,CAAC,GAAG,CACpB,MAAM,EACN,aAAa,EACb,SAAS,IAAI,SAAS,EACtB,SAAS,EACT,OAAO,CACR,CAAC;AACJ,CAAC;AAUD,MAAM,UAAU,kBAAkB,CAChC,MAAc,EACd,SAAiB,EACjB,SAAkB,EAClB,MAAe;IAEf,MAAM,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,EAAE,MAAM,EAAE,MAAM,IAAI,gBAAgB,EAAE,CAAC,CAAC;IACvE,kBAAkB,CAAC,GAAG,CACpB,MAAM,EACN,kBAAkB,EAClB,SAAS,IAAI,SAAS,EACtB,SAAS,EACT,OAAO,CACR,CAAC;AACJ,CAAC;AASD,MAAM,UAAU,kBAAkB,CAAC,MAAc,EAAE,QAAgB,GAAG;IACpE,MAAM,IAAI,GAAG,kBAAkB,CAAC,QAAQ,CAAC,OAAO,CAAC;;;;;GAKhD,CAAC,CAAC;IAEH,OAAO,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;AACjC,CAAC;AAUD,MAAM,UAAU,uBAAuB,CACrC,cAAsB,EACtB,YAAoB,EACpB,QAAgB,GAAG;IAEnB,MAAM,IAAI,GAAG,kBAAkB,CAAC,QAAQ,CAAC,OAAO,CAAC;;;;;GAKhD,CAAC,CAAC;IAEH,OAAO,IAAI,CAAC,GAAG,CAAC,cAAc,EAAE,YAAY,EAAE,KAAK,CAAC,CAAC;AACvD,CAAC",
        "sourcesContent": [
          "/**\n * Audit Logging Service\n *\n * Implements security audit logging for authentication events, data exports, and account deletions\n * Constitutional requirement: Security First (V) - audit logging\n */\n\nimport { stmtCreateAuditLog } from '../database/db.js';\n\n/**\n * Event types for audit logging\n */\nexport type AuditEventType =\n  | 'auth_login'\n  | 'auth_register'\n  | 'auth_logout'\n  | 'data_export'\n  | 'account_deletion';\n\n/**\n * Log authentication event (login, register, logout)\n *\n * @param userId - User ID who performed the action\n * @param eventType - Type of authentication event\n * @param ipAddress - IP address of the request\n * @param timestamp - Event timestamp (UTC milliseconds)\n * @param details - Optional additional context (JSON string)\n */\nexport function logAuthEvent(\n  userId: number,\n  eventType: 'auth_login' | 'auth_register' | 'auth_logout',\n  ipAddress: string,\n  timestamp: number,\n  details?: string\n): void {\n  stmtCreateAuditLog.run(\n    userId,\n    eventType,\n    ipAddress,\n    timestamp,\n    details ?? null\n  );\n}\n\n/**\n * Log data export event\n *\n * @param userId - User ID who performed the export\n * @param exportType - Type of data exported (e.g., 'csv_workouts', 'csv_analytics', 'database')\n * @param timestamp - Event timestamp (UTC milliseconds)\n * @param ipAddress - Optional IP address of the request\n */\nexport function logDataExport(\n  userId: number,\n  exportType: string,\n  timestamp: number,\n  ipAddress?: string\n): void {\n  const details = JSON.stringify({ export_type: exportType });\n  stmtCreateAuditLog.run(\n    userId,\n    'data_export',\n    ipAddress ?? 'unknown',\n    timestamp,\n    details\n  );\n}\n\n/**\n * Log account deletion event\n *\n * @param userId - User ID of the account being deleted\n * @param timestamp - Event timestamp (UTC milliseconds)\n * @param ipAddress - Optional IP address of the request\n * @param reason - Optional reason for deletion (e.g., 'user_initiated', 'admin_action')\n */\nexport function logAccountDeletion(\n  userId: number,\n  timestamp: number,\n  ipAddress?: string,\n  reason?: string\n): void {\n  const details = JSON.stringify({ reason: reason ?? 'user_initiated' });\n  stmtCreateAuditLog.run(\n    userId,\n    'account_deletion',\n    ipAddress ?? 'unknown',\n    timestamp,\n    details\n  );\n}\n\n/**\n * Get audit logs for a specific user\n *\n * @param userId - User ID to retrieve logs for\n * @param limit - Maximum number of logs to retrieve (default: 100)\n * @returns Array of audit log entries\n */\nexport function getAuditLogsByUser(userId: number, limit: number = 100) {\n  const stmt = stmtCreateAuditLog.database.prepare(`\n    SELECT * FROM audit_logs\n    WHERE user_id = ?\n    ORDER BY timestamp DESC\n    LIMIT ?\n  `);\n\n  return stmt.all(userId, limit);\n}\n\n/**\n * Get all audit logs within a date range\n *\n * @param startTimestamp - Start of date range (UTC milliseconds)\n * @param endTimestamp - End of date range (UTC milliseconds)\n * @param limit - Maximum number of logs to retrieve (default: 100)\n * @returns Array of audit log entries\n */\nexport function getAuditLogsByDateRange(\n  startTimestamp: number,\n  endTimestamp: number,\n  limit: number = 100\n) {\n  const stmt = stmtCreateAuditLog.database.prepare(`\n    SELECT * FROM audit_logs\n    WHERE timestamp >= ? AND timestamp <= ?\n    ORDER BY timestamp DESC\n    LIMIT ?\n  `);\n\n  return stmt.all(startTimestamp, endTimestamp, limit);\n}\n"
        ],
        "sourceRoot": ""
      }
    },
    "file:///home/asigator/fitness2025/backend/src/services/workoutService.ts": {
      "lineLengths": [
        221,
        59,
        44,
        68,
        5,
        69,
        45,
        22,
        55,
        24,
        19,
        1,
        44,
        13,
        54,
        32,
        48,
        34,
        36,
        27,
        1,
        58,
        17,
        31,
        82,
        5,
        25,
        62,
        66,
        5,
        23,
        62,
        64,
        5,
        10,
        53,
        5,
        39,
        19,
        63,
        8,
        1,
        105,
        61,
        26,
        66,
        5,
        44,
        65,
        5,
        37,
        54,
        154,
        9,
        85,
        26,
        123,
        9,
        65,
        5,
        31,
        22,
        24,
        39,
        29,
        31,
        9,
        44,
        64,
        54,
        9,
        42,
        50,
        68,
        9,
        14,
        50,
        54,
        9,
        122,
        5,
        54,
        19,
        1,
        13704
      ],
      "data": {
        "version": 3,
        "file": "/home/asigator/fitness2025/backend/src/services/workoutService.ts",
        "sources": [
          "file:///home/asigator/fitness2025/backend/src/services/workoutService.ts"
        ],
        "names": [],
        "mappings": "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",
        "sourcesContent": [
          "/**\n * Workout Service\n *\n * Business logic for workout session management:\n * - Creating new workout sessions\n * - Listing workouts with optional date filtering\n * - Updating workout status and metrics\n */\n\nimport {\n  stmtCreateWorkout,\n  stmtGetWorkoutsByUser,\n  stmtGetWorkoutsByUserDateRange,\n  stmtUpdateWorkoutStatus,\n  stmtUpdateWorkoutProgramDay,\n  stmtGetWorkoutById,\n  stmtValidateProgramDayOwnership,\n  db,\n} from '../database/db.js';\n\n/**\n * Workout interface matching database schema + program day info\n */\nexport interface Workout {\n  id: number;\n  user_id: number;\n  program_day_id: number;\n  date: string; // ISO format: YYYY-MM-DD\n  started_at: number | null;\n  completed_at: number | null;\n  status: 'not_started' | 'in_progress' | 'completed' | 'cancelled';\n  total_volume_kg: number | null;\n  average_rir: number | null;\n  synced: number;\n  day_name: string | null; // Program day name (e.g., \"Push A (Chest-Focused)\")\n  day_type: 'strength' | 'vo2max' | null; // Program day type\n}\n\n/**\n * Create a new workout session\n *\n * @param userId - ID of the user creating the workout\n * @param programDayId - ID of the program day (e.g., Push A, Pull A)\n * @param date - Date in ISO format (YYYY-MM-DD)\n * @returns The created workout object\n */\nexport function createWorkout(\n  userId: number,\n  programDayId: number,\n  date: string\n): Workout {\n  // Validate date format (basic check)\n  if (!/^\\d{4}-\\d{2}-\\d{2}$/.test(date)) {\n    throw new Error('Invalid date format. Expected YYYY-MM-DD');\n  }\n\n  // Insert workout with default status=not_started\n  const result = stmtCreateWorkout.run(userId, programDayId, date);\n  const workoutId = result.lastInsertRowid as number;\n\n  // Return the created workout\n  const workout = db\n    .prepare('SELECT * FROM workouts WHERE id = ?')\n    .get(workoutId) as Workout;\n\n  return workout;\n}\n\n/**\n * Get exercises for a program day\n *\n * @param programDayId - Program day ID\n * @returns Array of exercises with sets/reps\n */\nfunction getProgramExercises(programDayId: number) {\n  return db\n    .prepare(\n      `SELECT pe.*, e.name as exercise_name\n       FROM program_exercises pe\n       JOIN exercises e ON pe.exercise_id = e.id\n       WHERE pe.program_day_id = ?\n       ORDER BY pe.order_index ASC`\n    )\n    .all(programDayId);\n}\n\n/**\n * List workouts for a user with optional date filtering\n * Includes program exercises for each workout\n *\n * @param userId - ID of the user\n * @param startDate - Optional start date filter (YYYY-MM-DD)\n * @param endDate - Optional end date filter (YYYY-MM-DD)\n * @returns Array of workout objects with exercises\n */\nexport function listWorkouts(\n  userId: number,\n  startDate?: string,\n  endDate?: string\n): any[] {\n  let workouts: Workout[];\n\n  // If both date filters provided, use date range query\n  if (startDate && endDate) {\n    workouts = stmtGetWorkoutsByUserDateRange.all(\n      userId,\n      startDate,\n      endDate\n    ) as Workout[];\n  } else if (startDate) {\n    // If only start date, filter in application layer\n    const allWorkouts = stmtGetWorkoutsByUser.all(userId) as Workout[];\n    workouts = allWorkouts.filter((w) => w.date >= startDate);\n  } else if (endDate) {\n    // If only end date, filter in application layer\n    const allWorkouts = stmtGetWorkoutsByUser.all(userId) as Workout[];\n    workouts = allWorkouts.filter((w) => w.date <= endDate);\n  } else {\n    // No filters, return all workouts\n    workouts = stmtGetWorkoutsByUser.all(userId) as Workout[];\n  }\n\n  // Attach exercises to each workout\n  return workouts.map((workout) => ({\n    ...workout,\n    exercises: getProgramExercises(workout.program_day_id),\n  }));\n}\n\n/**\n * Update workout status and metrics, and optionally change program_day_id\n *\n * @param userId - ID of the user (for validation)\n * @param workoutId - ID of the workout to update\n * @param status - Optional new status (in_progress, completed, cancelled)\n * @param programDayId - Optional new program_day_id (only allowed if status is not_started)\n * @param totalVolumeKg - Optional total volume in kg (sets × reps × weight)\n * @param averageRir - Optional average RIR across all sets\n * @returns The updated workout object\n */\nexport function updateWorkoutStatus(\n  userId: number,\n  workoutId: number,\n  status?: 'not_started' | 'in_progress' | 'completed' | 'cancelled',\n  programDayId?: number,\n  totalVolumeKg?: number,\n  averageRir?: number\n): Workout {\n  // Get current workout to check status\n  const currentWorkout = stmtGetWorkoutById.get(workoutId) as Workout | undefined;\n\n  if (!currentWorkout) {\n    throw new Error(`Workout with ID ${workoutId} not found`);\n  }\n\n  // Verify ownership\n  if (currentWorkout.user_id !== userId) {\n    throw new Error('Not authorized to update this workout');\n  }\n\n  // Handle program_day_id change\n  if (programDayId !== undefined) {\n    // Only allow changing program_day_id if workout is not started\n    if (currentWorkout.status !== 'not_started') {\n      throw new Error(\n        `Cannot change program_day_id: workout status is \"${currentWorkout.status}\". Only \"not_started\" workouts can be reassigned.`\n      );\n    }\n\n    // Validate that program_day_id exists and belongs to user's program\n    const programDay = stmtValidateProgramDayOwnership.get(\n      programDayId,\n      userId\n    ) as { id: number } | undefined;\n\n    if (!programDay) {\n      throw new Error(\n        `Invalid program_day_id ${programDayId}: does not exist or does not belong to user's program`\n      );\n    }\n\n    // Update program_day_id\n    stmtUpdateWorkoutProgramDay.run(programDayId, workoutId);\n  }\n\n  // Handle status update\n  if (status !== undefined) {\n    // Calculate timestamps based on status\n    let startedAt: number | null;\n    let completedAt: number | null;\n\n    if (status === 'not_started') {\n      // Reset timestamps when returning to not_started (e.g., after cancel)\n      startedAt = null;\n      completedAt = null;\n    } else if (status === 'in_progress') {\n      // Set started_at if not already set\n      startedAt = currentWorkout.started_at || Date.now();\n      completedAt = currentWorkout.completed_at;\n    } else if (status === 'completed') {\n      // Preserve started_at, set completed_at if not already set\n      startedAt = currentWorkout.started_at;\n      completedAt = currentWorkout.completed_at || Date.now();\n    } else {\n      // For 'cancelled' status, preserve existing timestamps\n      startedAt = currentWorkout.started_at;\n      completedAt = currentWorkout.completed_at;\n    }\n\n    // Update workout status and metrics\n    stmtUpdateWorkoutStatus.run(\n      status,\n      startedAt,\n      completedAt,\n      totalVolumeKg ?? null,\n      averageRir ?? null,\n      workoutId\n    );\n  }\n\n  // Return updated workout\n  const workout = stmtGetWorkoutById.get(workoutId) as Workout;\n\n  return workout;\n}\n"
        ],
        "sourceRoot": ""
      }
    },
    "file:///home/asigator/fitness2025/backend/src/services/setService.ts": {
      "lineLengths": [
        71,
        106,
        41,
        63,
        5,
        32,
        57,
        5,
        29,
        55,
        5,
        38,
        64,
        5,
        18,
        30,
        63,
        42,
        37,
        26,
        110,
        20,
        35,
        33,
        29,
        44,
        49,
        39,
        37,
        14,
        9,
        5,
        115,
        41,
        65,
        78,
        89,
        12,
        18,
        33,
        21,
        36,
        28,
        19,
        17,
        6,
        1,
        46,
        19,
        112,
        16,
        27,
        24,
        24,
        16,
        1,
        8812
      ],
      "data": {
        "version": 3,
        "file": "/home/asigator/fitness2025/backend/src/services/setService.ts",
        "sources": [
          "file:///home/asigator/fitness2025/backend/src/services/setService.ts"
        ],
        "names": [],
        "mappings": "AASA,OAAO,EAAE,UAAU,EAAE,EAAE,EAAE,kBAAkB,EAAE,MAAM,mBAAmB,CAAC;AAgDvE,MAAM,UAAU,MAAM,CACpB,SAAiB,EACjB,UAAkB,EAClB,SAAiB,EACjB,QAAgB,EAChB,IAAY,EACZ,GAAW,EACX,SAAiB,EACjB,OAAgB,EAChB,KAAc;IAGd,IAAI,QAAQ,GAAG,CAAC,IAAI,QAAQ,GAAG,GAAG,EAAE,CAAC;QACnC,MAAM,IAAI,KAAK,CAAC,qCAAqC,CAAC,CAAC;IACzD,CAAC;IACD,IAAI,IAAI,GAAG,CAAC,IAAI,IAAI,GAAG,EAAE,EAAE,CAAC;QAC1B,MAAM,IAAI,KAAK,CAAC,+BAA+B,CAAC,CAAC;IACnD,CAAC;IACD,IAAI,GAAG,GAAG,CAAC,IAAI,GAAG,GAAG,CAAC,EAAE,CAAC;QACvB,MAAM,IAAI,KAAK,CAAC,6BAA6B,CAAC,CAAC;IACjD,CAAC;IAGD,IAAI,KAAK,IAAI,KAAK,CAAC,MAAM,GAAG,GAAG,EAAE,CAAC;QAChC,MAAM,IAAI,KAAK,CAAC,sCAAsC,CAAC,CAAC;IAC1D,CAAC;IAID,IAAI,OAAO,EAAE,CAAC;QACZ,MAAM,WAAW,GAAG,EAAE;aACnB,OAAO,CACN;yCACiC,CAClC;aACA,GAAG,CAAC,SAAS,EAAE,OAAO,CAA6E,CAAC;QAEvG,IAAI,WAAW,EAAE,CAAC;YAEhB,MAAM,YAAY,GAAG,kBAAkB,CAAC,WAAW,CAAC,SAAS,EAAE,WAAW,CAAC,IAAI,EAAE,WAAW,CAAC,GAAG,CAAC,CAAC;YAClG,OAAO;gBACL,EAAE,EAAE,WAAW,CAAC,EAAE;gBAClB,OAAO,EAAE,OAAO;gBAChB,MAAM,EAAE,IAAI;gBACZ,aAAa,EAAE,YAAY;gBAC3B,SAAS,EAAE,WAAW,CAAC,SAAS;gBAChC,IAAI,EAAE,WAAW,CAAC,IAAI;gBACtB,GAAG,EAAE,WAAW,CAAC,GAAG;aACrB,CAAC;QACJ,CAAC;IACH,CAAC;IAGD,MAAM,MAAM,GAAG,UAAU,CAAC,GAAG,CAC3B,SAAS,EACT,UAAU,EACV,SAAS,EACT,QAAQ,EACR,IAAI,EACJ,GAAG,EACH,SAAS,EACT,KAAK,IAAI,IAAI,CACd,CAAC;IAEF,MAAM,KAAK,GAAG,MAAM,CAAC,eAAyB,CAAC;IAI/C,MAAM,YAAY,GAAG,kBAAkB,CAAC,QAAQ,EAAE,IAAI,EAAE,GAAG,CAAC,CAAC;IAG7D,OAAO,CAAC,GAAG,CACT,uBAAuB,SAAS,cAAc,UAAU,IAAI;QAC1D,GAAG,QAAQ,QAAQ,IAAI,UAAU,GAAG,eAAe,YAAY,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,CAClF,CAAC;IAEF,OAAO;QACL,EAAE,EAAE,KAAK;QACT,OAAO,EAAE,OAAO,IAAI,IAAI;QACxB,MAAM,EAAE,IAAI;QACZ,aAAa,EAAE,YAAY;QAC3B,SAAS,EAAE,QAAQ;QACnB,IAAI,EAAE,IAAI;QACV,GAAG,EAAE,GAAG;KACT,CAAC;AACJ,CAAC;AAQD,MAAM,UAAU,iBAAiB,CAAC,SAAiB;IACjD,MAAM,IAAI,GAAG,EAAE;SACZ,OAAO,CACN;;;uBAGiB,CAClB;SACA,GAAG,CAAC,SAAS,CAAU,CAAC;IAE3B,OAAO,IAAI,CAAC;AACd,CAAC",
        "sourcesContent": [
          "/**\n * Set Logging Service\n *\n * Business logic for exercise set tracking:\n * - Logging individual sets with weight, reps, RIR\n * - Deduplication via localId for idempotent sync\n * - 1RM calculation using Epley formula with RIR adjustment\n */\n\nimport { stmtLogSet, db, calculateOneRepMax } from '../database/db.js';\n\n/**\n * Set interface matching database schema\n */\nexport interface Set {\n  id: number;\n  workout_id: number;\n  exercise_id: number;\n  set_number: number;\n  weight_kg: number;\n  reps: number;\n  rir: number;\n  timestamp: number;\n  notes: string | null;\n  synced: number;\n}\n\n/**\n * Set logging response (for sync confirmation)\n */\nexport interface LogSetResponse {\n  id: number;\n  localId: number | null;\n  synced: boolean;\n  estimated_1rm: number;\n  weight_kg: number;\n  reps: number;\n  rir: number;\n}\n\n/**\n * Log a new exercise set\n *\n * Implements idempotent sync: if localId exists for this workout,\n * returns existing set instead of creating duplicate.\n *\n * @param workoutId - ID of the workout session\n * @param exerciseId - ID of the exercise being performed\n * @param setNumber - Set number within the workout (1, 2, 3, etc.)\n * @param weightKg - Weight lifted in kilograms (0-500)\n * @param reps - Number of repetitions completed (1-50)\n * @param rir - Reps in Reserve (0-4)\n * @param timestamp - UTC milliseconds when set was completed\n * @param localId - Optional local ID from mobile app for deduplication\n * @param notes - Optional notes about the set (max 500 chars)\n * @returns LogSetResponse with id, localId, and synced status\n */\nexport function logSet(\n  workoutId: number,\n  exerciseId: number,\n  setNumber: number,\n  weightKg: number,\n  reps: number,\n  rir: number,\n  timestamp: number,\n  localId?: number,\n  notes?: string\n): LogSetResponse {\n  // Validate input ranges (per FR-005)\n  if (weightKg < 0 || weightKg > 500) {\n    throw new Error('Weight must be between 0 and 500 kg');\n  }\n  if (reps < 1 || reps > 50) {\n    throw new Error('Reps must be between 1 and 50');\n  }\n  if (rir < 0 || rir > 4) {\n    throw new Error('RIR must be between 0 and 4');\n  }\n\n  // Validate notes length\n  if (notes && notes.length > 500) {\n    throw new Error('Notes must be 500 characters or less');\n  }\n\n  // Deduplication check: if localId provided, check if set already exists\n  // This enables idempotent sync from mobile app\n  if (localId) {\n    const existingSet = db\n      .prepare(\n        `SELECT id, weight_kg, reps, rir FROM sets\n         WHERE workout_id = ? AND id = ?`\n      )\n      .get(workoutId, localId) as { id: number; weight_kg: number; reps: number; rir: number } | undefined;\n\n    if (existingSet) {\n      // Set already exists, return existing ID with calculated 1RM\n      const estimated1RM = calculateOneRepMax(existingSet.weight_kg, existingSet.reps, existingSet.rir);\n      return {\n        id: existingSet.id,\n        localId: localId,\n        synced: true,\n        estimated_1rm: estimated1RM,\n        weight_kg: existingSet.weight_kg,\n        reps: existingSet.reps,\n        rir: existingSet.rir,\n      };\n    }\n  }\n\n  // Insert new set with synced=1 (server is source of truth)\n  const result = stmtLogSet.run(\n    workoutId,\n    exerciseId,\n    setNumber,\n    weightKg,\n    reps,\n    rir,\n    timestamp,\n    notes ?? null\n  );\n\n  const setId = result.lastInsertRowid as number;\n\n  // Calculate estimated 1RM for analytics (Epley formula with RIR)\n  // Formula: 1RM = weight × (1 + (reps - rir) / 30)\n  const estimated1RM = calculateOneRepMax(weightKg, reps, rir);\n\n  // Log for performance monitoring (should be < 5ms per CLAUDE.md)\n  console.log(\n    `Set logged: workout=${workoutId}, exercise=${exerciseId}, ` +\n      `${weightKg}kg × ${reps} @ RIR ${rir} (Est. 1RM: ${estimated1RM.toFixed(1)}kg)`\n  );\n\n  return {\n    id: setId,\n    localId: localId ?? null,\n    synced: true,\n    estimated_1rm: estimated1RM,\n    weight_kg: weightKg,\n    reps: reps,\n    rir: rir,\n  };\n}\n\n/**\n * Get all sets for a workout\n *\n * @param workoutId - ID of the workout session\n * @returns Array of sets\n */\nexport function getSetsForWorkout(workoutId: number): Set[] {\n  const sets = db\n    .prepare(\n      `SELECT id, workout_id, exercise_id, set_number, weight_kg, reps, rir, timestamp, notes, synced\n       FROM sets\n       WHERE workout_id = ?\n       ORDER BY id ASC`\n    )\n    .all(workoutId) as Set[];\n\n  return sets;\n}\n"
        ],
        "sourceRoot": ""
      }
    },
    "file:///home/asigator/fitness2025/backend/src/services/recoveryService.ts": {
      "lineLengths": [
        96,
        96,
        47,
        65,
        5,
        51,
        67,
        5,
        55,
        69,
        5,
        44,
        32,
        67,
        5,
        72,
        67,
        23,
        86,
        27,
        33,
        19,
        20,
        33,
        28,
        30,
        32,
        26,
        32,
        23,
        18,
        113,
        100,
        5,
        10,
        144,
        81,
        5,
        79,
        84,
        75,
        12,
        32,
        44,
        6,
        1,
        7848
      ],
      "data": {
        "version": 3,
        "file": "/home/asigator/fitness2025/backend/src/services/recoveryService.ts",
        "sources": [
          "file:///home/asigator/fitness2025/backend/src/services/recoveryService.ts"
        ],
        "names": [],
        "mappings": "AASA,OAAO,EAAE,4BAA4B,EAAE,yBAAyB,EAAE,EAAE,EAAE,MAAM,mBAAmB,CAAC;AA8BhG,MAAM,UAAU,gBAAgB,CAC9B,MAAc,EACd,IAAY,EACZ,YAAoB,EACpB,cAAsB,EACtB,gBAAwB;IAGxB,IAAI,YAAY,GAAG,CAAC,IAAI,YAAY,GAAG,CAAC,EAAE,CAAC;QACzC,MAAM,IAAI,KAAK,CAAC,uCAAuC,CAAC,CAAC;IAC3D,CAAC;IACD,IAAI,cAAc,GAAG,CAAC,IAAI,cAAc,GAAG,CAAC,EAAE,CAAC;QAC7C,MAAM,IAAI,KAAK,CAAC,yCAAyC,CAAC,CAAC;IAC7D,CAAC;IACD,IAAI,gBAAgB,GAAG,CAAC,IAAI,gBAAgB,GAAG,CAAC,EAAE,CAAC;QACjD,MAAM,IAAI,KAAK,CAAC,2CAA2C,CAAC,CAAC;IAC/D,CAAC;IAGD,MAAM,SAAS,GAAG,qBAAqB,CAAC;IACxC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC;QAC1B,MAAM,IAAI,KAAK,CAAC,yCAAyC,CAAC,CAAC;IAC7D,CAAC;IAGD,MAAM,UAAU,GAAG,YAAY,GAAG,cAAc,GAAG,gBAAgB,CAAC;IAGpE,MAAM,gBAAgB,GAAG,yBAAyB,CAAC,UAAU,CAAC,CAAC;IAG/D,MAAM,QAAQ,GAAG,EAAE;SAChB,OAAO,CAAC,oEAAoE,CAAC;SAC7E,GAAG,CAAC,MAAM,EAAE,IAAI,CAA+B,CAAC;IAEnD,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;IAE7B,IAAI,QAAQ,EAAE,CAAC;QAEb,EAAE,CAAC,OAAO,CAAC;;;;;;;;;KASV,CAAC,CAAC,GAAG,CACJ,YAAY,EACZ,cAAc,EACd,gBAAgB,EAChB,UAAU,EACV,gBAAgB,EAChB,SAAS,EACT,QAAQ,CAAC,EAAE,CACZ,CAAC;QACF,OAAO,CAAC,GAAG,CAAC,mCAAmC,QAAQ,CAAC,EAAE,UAAU,MAAM,UAAU,IAAI,EAAE,CAAC,CAAC;IAC9F,CAAC;SAAM,CAAC;QAEN,4BAA4B,CAAC,GAAG,CAC9B,MAAM,EACN,IAAI,EACJ,YAAY,EACZ,cAAc,EACd,gBAAgB,EAChB,UAAU,EACV,gBAAgB,EAChB,SAAS,CACV,CAAC;QACF,OAAO,CAAC,GAAG,CAAC,qCAAqC,MAAM,UAAU,IAAI,EAAE,CAAC,CAAC;IAC3E,CAAC;IAGD,OAAO,CAAC,GAAG,CACT,qCAAqC,MAAM,UAAU,IAAI,IAAI;QAC3D,SAAS,UAAU,WAAW,YAAY,cAAc,cAAc,IAAI;QAC1E,cAAc,gBAAgB,iBAAiB,gBAAgB,EAAE,CACpE,CAAC;IAEF,OAAO;QACL,WAAW,EAAE,UAAU;QACvB,iBAAiB,EAAE,gBAAgB;KACpC,CAAC;AACJ,CAAC",
        "sourcesContent": [
          "/**\n * Recovery Assessment Service\n *\n * Business logic for daily recovery check-in and auto-regulation:\n * - 3-question assessment (sleep, soreness, motivation) on 1-5 scale\n * - Total score calculation (3-15 range)\n * - Volume adjustment logic per FR-009\n */\n\nimport { stmtCreateRecoveryAssessment, calculateVolumeAdjustment, db } from '../database/db.js';\n\n/**\n * Recovery assessment response interface\n */\nexport interface RecoveryAssessmentResponse {\n  total_score: number;\n  volume_adjustment: 'none' | 'reduce_1_set' | 'reduce_2_sets' | 'rest_day';\n}\n\n/**\n * Create a new recovery assessment\n *\n * Calculates total recovery score from 3 subscores (sleep quality,\n * muscle soreness, mental motivation) and determines volume adjustment\n * based on auto-regulation logic per FR-008 and FR-009.\n *\n * Auto-Regulation Logic (FR-009):\n * - Score 12-15: No adjustment (good recovery)\n * - Score 9-11: Reduce by 1 set per exercise\n * - Score 6-8: Reduce by 2 sets per exercise\n * - Score 3-5: Rest day recommended\n *\n * @param userId - ID of the user submitting assessment\n * @param date - Assessment date in ISO format (YYYY-MM-DD)\n * @param sleepQuality - Sleep quality rating (1-5 scale)\n * @param muscleSoreness - Muscle soreness rating (1-5 scale, inverted)\n * @param mentalMotivation - Mental motivation rating (1-5 scale)\n * @returns RecoveryAssessmentResponse with total_score and volume_adjustment\n */\nexport function createAssessment(\n  userId: number,\n  date: string,\n  sleepQuality: number,\n  muscleSoreness: number,\n  mentalMotivation: number\n): RecoveryAssessmentResponse {\n  // Validate input ranges (1-5 per FR-008)\n  if (sleepQuality < 1 || sleepQuality > 5) {\n    throw new Error('Sleep quality must be between 1 and 5');\n  }\n  if (muscleSoreness < 1 || muscleSoreness > 5) {\n    throw new Error('Muscle soreness must be between 1 and 5');\n  }\n  if (mentalMotivation < 1 || mentalMotivation > 5) {\n    throw new Error('Mental motivation must be between 1 and 5');\n  }\n\n  // Validate date format (ISO YYYY-MM-DD)\n  const dateRegex = /^\\d{4}-\\d{2}-\\d{2}$/;\n  if (!dateRegex.test(date)) {\n    throw new Error('Date must be in ISO format (YYYY-MM-DD)');\n  }\n\n  // Calculate total score (sum of 3 subscores, range 3-15)\n  const totalScore = sleepQuality + muscleSoreness + mentalMotivation;\n\n  // Determine volume adjustment based on total score (FR-009)\n  const volumeAdjustment = calculateVolumeAdjustment(totalScore);\n\n  // Check if assessment already exists for this user and date\n  const existing = db\n    .prepare('SELECT id FROM recovery_assessments WHERE user_id = ? AND date = ?')\n    .get(userId, date) as { id: number } | undefined;\n\n  const timestamp = Date.now();\n\n  if (existing) {\n    // Update existing assessment\n    db.prepare(`\n      UPDATE recovery_assessments\n      SET sleep_quality = ?,\n          muscle_soreness = ?,\n          mental_motivation = ?,\n          total_score = ?,\n          volume_adjustment = ?,\n          timestamp = ?\n      WHERE id = ?\n    `).run(\n      sleepQuality,\n      muscleSoreness,\n      mentalMotivation,\n      totalScore,\n      volumeAdjustment,\n      timestamp,\n      existing.id\n    );\n    console.log(`Recovery assessment updated: id=${existing.id}, user=${userId}, date=${date}`);\n  } else {\n    // Insert new recovery assessment\n    stmtCreateRecoveryAssessment.run(\n      userId,\n      date,\n      sleepQuality,\n      muscleSoreness,\n      mentalMotivation,\n      totalScore,\n      volumeAdjustment,\n      timestamp\n    );\n    console.log(`Recovery assessment created: user=${userId}, date=${date}`);\n  }\n\n  // Log assessment for monitoring\n  console.log(\n    `Recovery assessment created: user=${userId}, date=${date}, ` +\n      `score=${totalScore} (sleep=${sleepQuality}, soreness=${muscleSoreness}, ` +\n      `motivation=${mentalMotivation}), adjustment=${volumeAdjustment}`\n  );\n\n  return {\n    total_score: totalScore,\n    volume_adjustment: volumeAdjustment,\n  };\n}\n"
        ],
        "sourceRoot": ""
      }
    },
    "file:///home/asigator/fitness2025/backend/src/services/analyticsService.ts": {
      "lineLengths": [
        98,
        26,
        40,
        45,
        45,
        49,
        49,
        49,
        41,
        42,
        40,
        45,
        41,
        41,
        38,
        2,
        75,
        83,
        34,
        23,
        63,
        8,
        1,
        74,
        82,
        82,
        34,
        23,
        35,
        27,
        27,
        27,
        8,
        1,
        47,
        54,
        108,
        12,
        64,
        63,
        46,
        6,
        1,
        9320
      ],
      "data": {
        "version": 3,
        "file": "/home/asigator/fitness2025/backend/src/services/analyticsService.ts",
        "sources": [
          "file:///home/asigator/fitness2025/backend/src/services/analyticsService.ts"
        ],
        "names": [],
        "mappings": "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",
        "sourcesContent": [
          "/**\n * Analytics Service (T047-T049)\n *\n * Provides analytics data for 1RM progression, volume trends, and consistency metrics.\n * Uses prepared statements from db.ts for optimal performance.\n */\n\nimport {\n  stmt1RMProgression,\n  stmtVolumeTrends,\n  stmtConsistencyMetrics,\n} from '../database/db.js';\n\n/**\n * Volume landmarks for muscle groups (from mobile constants)\n */\nconst VOLUME_LANDMARKS: Record<string, { mev: number; mav: number; mrv: number }> = {\n  chest: { mev: 8, mav: 14, mrv: 22 },\n  back_lats: { mev: 10, mav: 16, mrv: 26 },\n  back_traps: { mev: 6, mav: 12, mrv: 20 },\n  shoulders_front: { mev: 4, mav: 8, mrv: 14 },\n  shoulders_side: { mev: 8, mav: 16, mrv: 26 },\n  shoulders_rear: { mev: 8, mav: 14, mrv: 22 },\n  biceps: { mev: 6, mav: 12, mrv: 20 },\n  triceps: { mev: 6, mav: 12, mrv: 22 },\n  quads: { mev: 8, mav: 14, mrv: 24 },\n  hamstrings: { mev: 6, mav: 12, mrv: 20 },\n  glutes: { mev: 6, mav: 12, mrv: 20 },\n  calves: { mev: 8, mav: 14, mrv: 22 },\n  abs: { mev: 8, mav: 16, mrv: 28 },\n};\n\n/**\n * 1RM Progression Data Point\n */\nexport interface OneRMProgressionPoint {\n  date: string;\n  estimated_1rm: number;\n}\n\n/**\n * Volume Trends Data Point\n */\nexport interface VolumeTrendsPoint {\n  week: string;\n  total_sets: number;\n  mev: number;\n  mav: number;\n  mrv: number;\n}\n\n/**\n * Consistency Metrics\n */\nexport interface ConsistencyMetrics {\n  adherence_rate: number;\n  avg_session_duration: number;\n  total_workouts: number;\n}\n\n/**\n * Get 1RM progression for a specific exercise over time (T047)\n *\n * Calculates estimated 1RM using Epley formula with RIR adjustment:\n * 1RM = weight * (1 + (reps - rir) / 30)\n *\n * @param userId User ID\n * @param exerciseId Exercise ID\n * @param startDate Start date (YYYY-MM-DD)\n * @param endDate End date (YYYY-MM-DD)\n * @returns Array of {date, estimated_1rm} sorted by date\n */\nexport function get1RMProgression(\n  userId: number,\n  exerciseId: number,\n  startDate: string,\n  endDate: string\n): OneRMProgressionPoint[] {\n  const results = stmt1RMProgression.all(userId, exerciseId, startDate, endDate) as Array<{\n    date: string;\n    estimated_1rm: number;\n  }>;\n\n  return results.map((row) => ({\n    date: row.date,\n    estimated_1rm: Math.round(row.estimated_1rm * 10) / 10, // Round to 1 decimal place\n  }));\n}\n\n/**\n * Get volume trends for a muscle group over time (T048)\n *\n * Groups sets by ISO week and includes MEV/MAV/MRV landmarks.\n *\n * @param userId User ID\n * @param muscleGroup Muscle group name (e.g., 'chest', 'back_lats')\n * @param startDate Start date (YYYY-MM-DD)\n * @param endDate End date (YYYY-MM-DD)\n * @returns Array of {week, total_sets, mev, mav, mrv} sorted by week\n */\nexport function getVolumeTrends(\n  userId: number,\n  muscleGroup: string,\n  startDate: string,\n  endDate: string\n): VolumeTrendsPoint[] {\n  const results = stmtVolumeTrends.all(userId, startDate, endDate, muscleGroup) as Array<{\n    week: string;\n    total_sets: number;\n  }>;\n\n  // Get volume landmarks for this muscle group\n  const landmarks = VOLUME_LANDMARKS[muscleGroup] || { mev: 0, mav: 0, mrv: 0 };\n\n  return results.map((row) => ({\n    week: row.week,\n    total_sets: row.total_sets,\n    mev: landmarks.mev,\n    mav: landmarks.mav,\n    mrv: landmarks.mrv,\n  }));\n}\n\n/**\n * Get consistency metrics for a user (T049)\n *\n * Calculates:\n * - adherence_rate: completed_workouts / total_workouts (scheduled)\n * - avg_session_duration: mean duration in seconds\n * - total_workouts: count of all workouts\n *\n * @param userId User ID\n * @returns Consistency metrics object\n */\nexport function getConsistencyMetrics(userId: number): ConsistencyMetrics {\n  const result = stmtConsistencyMetrics.get(userId) as {\n    completed_workouts: number;\n    total_workouts: number;\n    avg_session_duration: number | null;\n  };\n\n  // Calculate adherence rate (avoid division by zero)\n  const adherenceRate =\n    result.total_workouts > 0 ? result.completed_workouts / result.total_workouts : 0;\n\n  return {\n    adherence_rate: Math.round(adherenceRate * 1000) / 1000, // Round to 3 decimal places\n    avg_session_duration: result.avg_session_duration || 0,\n    total_workouts: result.total_workouts,\n  };\n}\n"
        ],
        "sourceRoot": ""
      }
    },
    "file:///home/asigator/fitness2025/backend/src/services/volumeService.ts": {
      "lineLengths": [
        39,
        26,
        40,
        41,
        42,
        40,
        45,
        41,
        41,
        38,
        40,
        40,
        44,
        45,
        45,
        45,
        45,
        39,
        43,
        42,
        44,
        45,
        40,
        44,
        2,
        37,
        36,
        34,
        62,
        50,
        36,
        41,
        57,
        55,
        33,
        67,
        5,
        12,
        30,
        26,
        6,
        1,
        53,
        30,
        27,
        5,
        35,
        26,
        5,
        36,
        25,
        5,
        10,
        27,
        5,
        1,
        77,
        89,
        26,
        5,
        88,
        26,
        5,
        54,
        1,
        45,
        31,
        106,
        5,
        36,
        103,
        5,
        16,
        1,
        46,
        27,
        63,
        39,
        10,
        31,
        35,
        15,
        42,
        44,
        38,
        23,
        32,
        21,
        21,
        21,
        5,
        78,
        43,
        27,
        21,
        28,
        11,
        5,
        57,
        28,
        24,
        41,
        12,
        33,
        36,
        31,
        55,
        47,
        40,
        29,
        23,
        7,
        60,
        5,
        37,
        39,
        91,
        46,
        43,
        47,
        28,
        30,
        31,
        31,
        31,
        37,
        30,
        26,
        11,
        7,
        37,
        91,
        62,
        23,
        53,
        9,
        14,
        50,
        47,
        34,
        47,
        34,
        35,
        35,
        35,
        41,
        34,
        30,
        15,
        9,
        7,
        28,
        36,
        77,
        54,
        79,
        16,
        102,
        63,
        30,
        7,
        78,
        12,
        19,
        17,
        36,
        6,
        1,
        72,
        34,
        68,
        5,
        31,
        33,
        55,
        30,
        10,
        13,
        31,
        35,
        15,
        42,
        44,
        38,
        23,
        32,
        21,
        21,
        52,
        29,
        19,
        5,
        104,
        28,
        39,
        5,
        41,
        30,
        30,
        40,
        58,
        39,
        47,
        9,
        55,
        70,
        79,
        7,
        25,
        53,
        32,
        66,
        91,
        31,
        29,
        31,
        35,
        35,
        35,
        15,
        11,
        82,
        24,
        23,
        40,
        11,
        7,
        71,
        12,
        25,
        6,
        1,
        50,
        43,
        30,
        17,
        21,
        28,
        11,
        5,
        57,
        25,
        20,
        5,
        37,
        10,
        31,
        41,
        29,
        53,
        45,
        38,
        27,
        21,
        5,
        55,
        47,
        91,
        104,
        16,
        43,
        57,
        31,
        31,
        31,
        17,
        61,
        10,
        7,
        78,
        12,
        37,
        55,
        36,
        6,
        1,
        33248
      ],
      "data": {
        "version": 3,
        "file": "/home/asigator/fitness2025/backend/src/services/volumeService.ts",
        "sources": [
          "file:///home/asigator/fitness2025/backend/src/services/volumeService.ts"
        ],
        "names": [],
        "mappings": "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",
        "sourcesContent": [
          "/**\n * Volume Analytics Service (T041-T045)\n *\n * Provides volume analytics:\n * - Current week volume tracking (completed + planned)\n * - Volume history over multiple weeks\n * - Zone classification (below_mev, adequate, optimal, above_mrv)\n */\n\nimport { db } from '../database/db.js';\n\n/**\n * Volume landmarks for muscle groups (from Renaissance Periodization)\n */\nconst VOLUME_LANDMARKS: Record<string, { mev: number; mav: number; mrv: number }> = {\n  // Primary muscle groups\n  chest: { mev: 8, mav: 14, mrv: 22 },\n  biceps: { mev: 6, mav: 12, mrv: 20 },\n  triceps: { mev: 6, mav: 12, mrv: 22 },\n  quads: { mev: 8, mav: 14, mrv: 24 },\n  hamstrings: { mev: 6, mav: 12, mrv: 20 },\n  glutes: { mev: 6, mav: 12, mrv: 20 },\n  calves: { mev: 8, mav: 14, mrv: 22 },\n  abs: { mev: 8, mav: 16, mrv: 28 },\n\n  // Back muscles (database uses lats, traps, mid_back, lower_back)\n  lats: { mev: 10, mav: 16, mrv: 26 },\n  traps: { mev: 6, mav: 12, mrv: 20 },\n  mid_back: { mev: 10, mav: 16, mrv: 26 },\n  lower_back: { mev: 6, mav: 12, mrv: 20 },\n\n  // Shoulder muscles (database uses front_delts, side_delts, rear_delts)\n  front_delts: { mev: 4, mav: 8, mrv: 14 },\n  side_delts: { mev: 8, mav: 16, mrv: 26 },\n  rear_delts: { mev: 8, mav: 14, mrv: 22 },\n\n  // Supporting muscles\n  core: { mev: 8, mav: 16, mrv: 28 },\n  obliques: { mev: 6, mav: 12, mrv: 20 },\n  forearms: { mev: 4, mav: 8, mrv: 16 },\n  brachialis: { mev: 4, mav: 8, mrv: 14 },\n  hip_flexors: { mev: 4, mav: 8, mrv: 14 },\n\n  // Legacy/compatibility names (may not be in database)\n  back: { mev: 10, mav: 16, mrv: 26 },\n  shoulders: { mev: 8, mav: 14, mrv: 22 },\n};\n\n/**\n * Muscle group volume tracking data\n */\nexport interface MuscleGroupVolumeTracking {\n  muscle_group: string;\n  completed_sets: number;\n  planned_sets: number;\n  remaining_sets: number;\n  mev: number;\n  mav: number;\n  mrv: number;\n  completion_percentage: number;\n  zone: 'below_mev' | 'adequate' | 'optimal' | 'above_mrv' | 'on_track';\n  warning: string | null;\n}\n\n/**\n * Current week volume response\n */\nexport interface CurrentWeekVolume {\n  week_start: string;\n  week_end: string;\n  muscle_groups: MuscleGroupVolumeTracking[];\n}\n\n/**\n * Historical volume data point\n */\nexport interface HistoricalVolume {\n  muscle_group: string;\n  completed_sets: number;\n  mev: number;\n  mav: number;\n  mrv: number;\n}\n\n/**\n * Volume trends response (historical)\n */\nexport interface VolumeTrendsResponse {\n  weeks: Array<{\n    week_start: string;\n    muscle_groups: HistoricalVolume[];\n  }>;\n}\n\n/**\n * Program volume analysis data\n */\nexport interface ProgramVolumeAnalysis {\n  program_id: number;\n  mesocycle_phase: 'mev' | 'mav' | 'mrv' | 'deload';\n  muscle_groups: Array<{\n    muscle_group: string;\n    planned_weekly_sets: number;\n    mev: number;\n    mav: number;\n    mrv: number;\n    zone: 'below_mev' | 'adequate' | 'optimal' | 'above_mrv';\n    warning: string | null;\n  }>;\n}\n\n/**\n * Get ISO week boundaries (Monday to Sunday) for a given date\n */\nfunction getISOWeekBoundaries(date: Date): { week_start: string; week_end: string } {\n  // Get day of week (0 = Sunday, 1 = Monday, ..., 6 = Saturday)\n  const dayOfWeek = date.getDay();\n\n  // Calculate Monday of the week (ISO week starts on Monday)\n  const monday = new Date(date);\n  const daysToMonday = dayOfWeek === 0 ? -6 : 1 - dayOfWeek; // If Sunday, go back 6 days\n  monday.setDate(date.getDate() + daysToMonday);\n\n  // Calculate Sunday of the week\n  const sunday = new Date(monday);\n  sunday.setDate(monday.getDate() + 6);\n\n  const weekStart = monday.toISOString().split('T')[0];\n  const weekEnd = sunday.toISOString().split('T')[0];\n\n  // Ensure non-undefined values\n  if (!weekStart || !weekEnd) {\n    throw new Error('Failed to calculate ISO week boundaries');\n  }\n\n  return {\n    week_start: weekStart,\n    week_end: weekEnd,\n  };\n}\n\n/**\n * Classify volume zone based on completed sets\n */\nfunction classifyZone(\n  completedSets: number,\n  mev: number,\n  mav: number,\n  mrv: number\n): 'below_mev' | 'adequate' | 'optimal' | 'above_mrv' {\n  if (completedSets < mev) {\n    return 'below_mev';\n  } else if (completedSets < mav) {\n    return 'adequate';\n  } else if (completedSets <= mrv) {\n    return 'optimal';\n  } else {\n    return 'above_mrv';\n  }\n}\n\n/**\n * Classify zone with on_track for current week tracking\n */\nfunction classifyZoneWithOnTrack(\n  completedSets: number,\n  plannedSets: number,\n  mev: number,\n  mav: number,\n  mrv: number\n): 'below_mev' | 'adequate' | 'optimal' | 'above_mrv' | 'on_track' {\n  // If planned sets are in optimal range and completion >= 50%, mark as on_track\n  if (plannedSets >= mav && plannedSets <= mrv && completedSets >= plannedSets * 0.5) {\n    return 'on_track';\n  }\n\n  // If planned sets are in adequate range and completion >= 50%, mark as on_track\n  if (plannedSets >= mev && plannedSets < mav && completedSets >= plannedSets * 0.5) {\n    return 'on_track';\n  }\n\n  // Otherwise use standard zone classification\n  return classifyZone(completedSets, mev, mav, mrv);\n}\n\n/**\n * Generate warning message based on zone\n */\nfunction generateWarning(zone: string, muscleGroup: string): string | null {\n  if (zone === 'below_mev') {\n    return `${muscleGroup} volume is below minimum effective volume (MEV). Increase sets for growth.`;\n  } else if (zone === 'above_mrv') {\n    return `${muscleGroup} volume exceeds maximum recoverable volume (MRV). Risk of overtraining.`;\n  }\n  return null;\n}\n\n/**\n * Get current week volume tracking (T017)\n *\n * Calculates:\n * - Completed sets from workouts with status='completed' in current ISO week\n * - Planned sets from program_exercises for all program_days in current week\n * - Zone classification based on completed sets\n * - Full set counting: Each set counts fully toward ALL muscle groups\n *\n * @param userId User ID\n * @returns Current week volume data with zone classification\n */\nexport function getCurrentWeekVolume(userId: number): CurrentWeekVolume {\n  const now = new Date();\n  const { week_start, week_end } = getISOWeekBoundaries(now);\n\n  // Query completed sets grouped by muscle group for current week\n  const completedQuery = db.prepare(`\n    SELECT\n      mg.value as muscle_group,\n      COUNT(s.id) as completed_sets\n    FROM sets s\n    JOIN workouts w ON s.workout_id = w.id\n    JOIN exercises e ON s.exercise_id = e.id\n    JOIN json_each(e.muscle_groups) mg\n    WHERE w.user_id = ?\n      AND w.status = 'completed'\n      AND w.date >= ?\n      AND w.date <= ?\n    GROUP BY mg.value\n  `);\n\n  const completedResults = completedQuery.all(userId, week_start, week_end) as Array<{\n    muscle_group: string;\n    completed_sets: number;\n  }>;\n\n  // Query planned sets from active program for current week\n  // Get active program first\n  const activeProgramQuery = db.prepare(`\n    SELECT id FROM programs\n    WHERE user_id = ?\n    ORDER BY created_at DESC\n    LIMIT 1\n  `);\n\n  const activeProgram = activeProgramQuery.get(userId) as { id: number } | undefined;\n\n  let plannedResults: Array<{ muscle_group: string; planned_sets: number }> = [];\n\n  if (activeProgram) {\n    // Calculate day of week for current week (1-7, Monday = 1)\n    // Get all program days for this week and sum their planned sets\n    const plannedQuery = db.prepare(`\n      SELECT\n        mg.value as muscle_group,\n        SUM(pe.sets) as planned_sets\n      FROM program_exercises pe\n      JOIN program_days pd ON pe.program_day_id = pd.id\n      JOIN exercises e ON pe.exercise_id = e.id\n      JOIN json_each(e.muscle_groups) mg\n      WHERE pd.program_id = ?\n      GROUP BY mg.value\n    `);\n\n    plannedResults = plannedQuery.all(activeProgram.id) as Array<{\n      muscle_group: string;\n      planned_sets: number;\n    }>;\n  }\n\n  // Merge completed and planned data\n  const muscleGroupMap = new Map<string, MuscleGroupVolumeTracking>();\n\n  // Process completed sets\n  completedResults.forEach((row) => {\n    const landmarks = VOLUME_LANDMARKS[row.muscle_group] || { mev: 0, mav: 0, mrv: 0 };\n    muscleGroupMap.set(row.muscle_group, {\n      muscle_group: row.muscle_group,\n      completed_sets: row.completed_sets,\n      planned_sets: 0,\n      remaining_sets: 0,\n      mev: landmarks.mev,\n      mav: landmarks.mav,\n      mrv: landmarks.mrv,\n      completion_percentage: 0,\n      zone: 'below_mev',\n      warning: null,\n    });\n  });\n\n  // Process planned sets\n  plannedResults.forEach((row) => {\n    const landmarks = VOLUME_LANDMARKS[row.muscle_group] || { mev: 0, mav: 0, mrv: 0 };\n    const existing = muscleGroupMap.get(row.muscle_group);\n\n    if (existing) {\n      existing.planned_sets = row.planned_sets;\n    } else {\n      muscleGroupMap.set(row.muscle_group, {\n        muscle_group: row.muscle_group,\n        completed_sets: 0,\n        planned_sets: row.planned_sets,\n        remaining_sets: 0,\n        mev: landmarks.mev,\n        mav: landmarks.mav,\n        mrv: landmarks.mrv,\n        completion_percentage: 0,\n        zone: 'below_mev',\n        warning: null,\n      });\n    }\n  });\n\n  // Calculate derived fields and classify zones\n  const muscleGroups: MuscleGroupVolumeTracking[] = [];\n  muscleGroupMap.forEach((mg) => {\n    mg.remaining_sets = Math.max(0, mg.planned_sets - mg.completed_sets);\n    mg.completion_percentage = mg.planned_sets > 0\n      ? Math.round((mg.completed_sets / mg.planned_sets) * 100 * 10) / 10\n      : 0;\n\n    mg.zone = classifyZoneWithOnTrack(\n      mg.completed_sets,\n      mg.planned_sets,\n      mg.mev,\n      mg.mav,\n      mg.mrv\n    );\n\n    mg.warning = generateWarning(mg.zone, mg.muscle_group);\n\n    muscleGroups.push(mg);\n  });\n\n  // Sort by muscle group name\n  muscleGroups.sort((a, b) => a.muscle_group.localeCompare(b.muscle_group));\n\n  return {\n    week_start,\n    week_end,\n    muscle_groups: muscleGroups,\n  };\n}\n\n/**\n * Get volume history over multiple weeks (T018)\n *\n * @param userId User ID\n * @param weeks Number of weeks to retrieve (default: 8, max: 52)\n * @param muscleGroupFilter Optional muscle group filter\n * @returns Historical volume data grouped by week\n */\nexport function getVolumeHistory(\n  userId: number,\n  weeks: number = 8,\n  muscleGroupFilter?: string\n): VolumeTrendsResponse {\n  // Validate weeks parameter\n  if (weeks < 1 || weeks > 52) {\n    throw new Error('Weeks parameter must be between 1 and 52');\n  }\n\n  // Calculate start date (weeks ago from today)\n  const endDate = new Date();\n  const startDate = new Date();\n  startDate.setDate(endDate.getDate() - (weeks * 7));\n\n  // Query volume by week\n  const query = db.prepare(`\n    SELECT\n      w.date,\n      mg.value as muscle_group,\n      COUNT(s.id) as completed_sets\n    FROM sets s\n    JOIN workouts w ON s.workout_id = w.id\n    JOIN exercises e ON s.exercise_id = e.id\n    JOIN json_each(e.muscle_groups) mg\n    WHERE w.user_id = ?\n      AND w.status = 'completed'\n      AND w.date >= ?\n      AND w.date <= ?\n      ${muscleGroupFilter ? 'AND mg.value = ?' : ''}\n    GROUP BY w.date, mg.value\n    ORDER BY w.date\n  `);\n\n  const params = [userId, startDate.toISOString().split('T')[0], endDate.toISOString().split('T')[0]];\n  if (muscleGroupFilter) {\n    params.push(muscleGroupFilter);\n  }\n\n  const results = query.all(...params) as Array<{\n    date: string;\n    muscle_group: string;\n    completed_sets: number;\n  }>;\n\n  // Group by week\n  const weekMap = new Map<string, Map<string, number>>();\n\n  results.forEach((row) => {\n    const date = new Date(row.date);\n    const { week_start } = getISOWeekBoundaries(date);\n\n    if (!weekMap.has(week_start)) {\n      weekMap.set(week_start, new Map());\n    }\n\n    const muscleGroupMap = weekMap.get(week_start)!;\n    const currentSets = muscleGroupMap.get(row.muscle_group) || 0;\n    muscleGroupMap.set(row.muscle_group, currentSets + row.completed_sets);\n  });\n\n  // Convert to response format\n  const weekArray: Array<{\n    week_start: string;\n    muscle_groups: HistoricalVolume[];\n  }> = [];\n\n  weekMap.forEach((muscleGroupMap, week_start) => {\n    const muscleGroups: HistoricalVolume[] = [];\n\n    muscleGroupMap.forEach((completed_sets, muscle_group) => {\n      const landmarks = VOLUME_LANDMARKS[muscle_group] || { mev: 0, mav: 0, mrv: 0 };\n      muscleGroups.push({\n        muscle_group,\n        completed_sets,\n        mev: landmarks.mev,\n        mav: landmarks.mav,\n        mrv: landmarks.mrv,\n      });\n    });\n\n    // Sort muscle groups alphabetically\n    muscleGroups.sort((a, b) => a.muscle_group.localeCompare(b.muscle_group));\n\n    weekArray.push({\n      week_start,\n      muscle_groups: muscleGroups,\n    });\n  });\n\n  // Sort weeks chronologically (oldest first)\n  weekArray.sort((a, b) => a.week_start.localeCompare(b.week_start));\n\n  return {\n    weeks: weekArray,\n  };\n}\n\n/**\n * Get program volume analysis (T019)\n *\n * Analyzes planned volume for the active program and classifies zones.\n *\n * @param userId User ID\n * @returns Program volume analysis or null if no active program\n */\nexport function getProgramVolumeAnalysis(userId: number): ProgramVolumeAnalysis | null {\n  // Get active program\n  const activeProgramQuery = db.prepare(`\n    SELECT id, mesocycle_phase\n    FROM programs\n    WHERE user_id = ?\n    ORDER BY created_at DESC\n    LIMIT 1\n  `);\n\n  const activeProgram = activeProgramQuery.get(userId) as\n    { id: number; mesocycle_phase: 'mev' | 'mav' | 'mrv' | 'deload' } | undefined;\n\n  if (!activeProgram) {\n    return null;\n  }\n\n  // Query planned weekly sets by muscle group\n  const plannedQuery = db.prepare(`\n    SELECT\n      mg.value as muscle_group,\n      SUM(pe.sets) as planned_weekly_sets\n    FROM program_exercises pe\n    JOIN program_days pd ON pe.program_day_id = pd.id\n    JOIN exercises e ON pe.exercise_id = e.id\n    JOIN json_each(e.muscle_groups) mg\n    WHERE pd.program_id = ?\n    GROUP BY mg.value\n  `);\n\n  const results = plannedQuery.all(activeProgram.id) as Array<{\n    muscle_group: string;\n    planned_weekly_sets: number;\n  }>;\n\n  // Classify zones\n  const muscleGroups = results.map((row) => {\n    const landmarks = VOLUME_LANDMARKS[row.muscle_group] || { mev: 0, mav: 0, mrv: 0 };\n    const zone = classifyZone(row.planned_weekly_sets, landmarks.mev, landmarks.mav, landmarks.mrv);\n\n    return {\n      muscle_group: row.muscle_group,\n      planned_weekly_sets: row.planned_weekly_sets,\n      mev: landmarks.mev,\n      mav: landmarks.mav,\n      mrv: landmarks.mrv,\n      zone,\n      warning: generateWarning(zone, row.muscle_group),\n    };\n  });\n\n  // Sort by muscle group name\n  muscleGroups.sort((a, b) => a.muscle_group.localeCompare(b.muscle_group));\n\n  return {\n    program_id: activeProgram.id,\n    mesocycle_phase: activeProgram.mesocycle_phase,\n    muscle_groups: muscleGroups,\n  };\n}\n"
        ],
        "sourceRoot": ""
      }
    },
    "file:///home/asigator/fitness2025/backend/src/services/exerciseService.ts": {
      "lineLengths": [
        39,
        29,
        12,
        11,
        11,
        15,
        17,
        18,
        17,
        14,
        13,
        15,
        12,
        17,
        13,
        13,
        10,
        15,
        2,
        44,
        86,
        123,
        5,
        26,
        22,
        31,
        46,
        132,
        72,
        9,
        14,
        92,
        46,
        55,
        9,
        5,
        28,
        41,
        39,
        5,
        35,
        48,
        46,
        5,
        29,
        42,
        40,
        5,
        89,
        17,
        10,
        9,
        11,
        27,
        30,
        16,
        23,
        17,
        19,
        19,
        18,
        17,
        18,
        18,
        17,
        4,
        48,
        31,
        15,
        81,
        8,
        1,
        37,
        17,
        10,
        9,
        11,
        27,
        30,
        16,
        23,
        17,
        19,
        19,
        18,
        17,
        18,
        16,
        4,
        40,
        15,
        25,
        5,
        12,
        15,
        81,
        6,
        1,
        9160
      ],
      "data": {
        "version": 3,
        "file": "/home/asigator/fitness2025/backend/src/services/exerciseService.ts",
        "sources": [
          "file:///home/asigator/fitness2025/backend/src/services/exerciseService.ts"
        ],
        "names": [],
        "mappings": "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",
        "sourcesContent": [
          "/**\n * Exercise Service\n *\n * Handles exercise library filtering and retrieval for program planning\n */\n\nimport { db } from '../database/db.js';\n\n/**\n * Exercise entity with typed fields\n */\nexport interface Exercise {\n  id: number;\n  name: string;\n  primary_muscle_group: string;\n  secondary_muscle_groups: string[]; // Parsed from JSON\n  equipment: 'barbell' | 'dumbbell' | 'cable' | 'machine' | 'bodyweight';\n  movement_pattern: 'compound' | 'isolation';\n  difficulty: 'beginner' | 'intermediate' | 'advanced';\n  default_sets: number;\n  default_reps: string;\n  default_rir: number;\n  description: string;\n}\n\n/**\n * Exercise filters\n */\nexport interface ExerciseFilters {\n  muscle_group?: string;\n  equipment?: 'barbell' | 'dumbbell' | 'cable' | 'machine' | 'bodyweight';\n  movement_pattern?: 'compound' | 'isolation';\n  difficulty?: 'beginner' | 'intermediate' | 'advanced';\n}\n\n/**\n * Valid muscle groups for validation\n */\nconst VALID_MUSCLE_GROUPS = [\n  'chest',\n  'back', // Alias for lats/mid_back exercises\n  'lats',\n  'mid_back',\n  'rear_delts',\n  'front_delts',\n  'side_delts',\n  'triceps',\n  'biceps',\n  'forearms',\n  'quads',\n  'hamstrings',\n  'glutes',\n  'calves',\n  'abs',\n  'obliques',\n];\n\n/**\n * Get exercises with optional filtering\n *\n * @param filters - Optional filters for muscle_group, equipment, movement_pattern, difficulty\n * @returns Array of exercises matching filters\n */\nexport function getExercises(filters: ExerciseFilters = {}): Exercise[] {\n  // Validate muscle_group if provided\n  if (filters.muscle_group && !VALID_MUSCLE_GROUPS.includes(filters.muscle_group)) {\n    throw new Error(\n      `Invalid muscle_group: ${filters.muscle_group}. Valid options: ${VALID_MUSCLE_GROUPS.join(', ')}`\n    );\n  }\n\n  // Build WHERE clause dynamically\n  const conditions: string[] = [];\n  const params: any[] = [];\n\n  // Filter by muscle group (check both primary and secondary)\n  if (filters.muscle_group) {\n    // Handle \"back\" as an alias for lats/mid_back exercises\n    if (filters.muscle_group === 'back') {\n      conditions.push(\n        '(primary_muscle_group IN (?, ?) OR secondary_muscle_groups LIKE ? OR secondary_muscle_groups LIKE ?)'\n      );\n      params.push('lats', 'mid_back', '%\"lats\"%', '%\"mid_back\"%');\n    } else {\n      conditions.push(\n        '(primary_muscle_group = ? OR secondary_muscle_groups LIKE ?)'\n      );\n      params.push(filters.muscle_group);\n      params.push(`%\"${filters.muscle_group}\"%`); // JSON array contains check\n    }\n  }\n\n  // Filter by equipment\n  if (filters.equipment) {\n    conditions.push('equipment = ?');\n    params.push(filters.equipment);\n  }\n\n  // Filter by movement pattern\n  if (filters.movement_pattern) {\n    conditions.push('movement_pattern = ?');\n    params.push(filters.movement_pattern);\n  }\n\n  // Filter by difficulty\n  if (filters.difficulty) {\n    conditions.push('difficulty = ?');\n    params.push(filters.difficulty);\n  }\n\n  // Build SQL query\n  const whereClause = conditions.length > 0 ? `WHERE ${conditions.join(' AND ')}` : '';\n  const sql = `\n    SELECT\n      id,\n      name,\n      primary_muscle_group,\n      secondary_muscle_groups,\n      equipment,\n      movement_pattern,\n      difficulty,\n      default_sets,\n      default_reps,\n      default_rir,\n      description\n    FROM exercises\n    ${whereClause}\n    ORDER BY name\n  `;\n\n  // Execute query\n  const rows = db.prepare(sql).all(...params) as any[];\n\n  // Parse secondary_muscle_groups JSON for each exercise\n  return rows.map((row) => ({\n    ...row,\n    secondary_muscle_groups: JSON.parse(row.secondary_muscle_groups || '[]'),\n  }));\n}\n\n/**\n * Get exercise by ID\n *\n * @param id - Exercise ID\n * @returns Exercise details or undefined if not found\n */\nexport function getExerciseById(id: number): Exercise | undefined {\n  const sql = `\n    SELECT\n      id,\n      name,\n      primary_muscle_group,\n      secondary_muscle_groups,\n      equipment,\n      movement_pattern,\n      difficulty,\n      default_sets,\n      default_reps,\n      default_rir,\n      description\n    FROM exercises\n    WHERE id = ?\n  `;\n\n  const row = db.prepare(sql).get(id) as any;\n\n  if (!row) {\n    return undefined;\n  }\n\n  // Parse secondary_muscle_groups JSON\n  return {\n    ...row,\n    secondary_muscle_groups: JSON.parse(row.secondary_muscle_groups || '[]'),\n  };\n}\n"
        ],
        "sourceRoot": ""
      }
    },
    "file:///home/asigator/fitness2025/backend/src/services/programService.ts": {
      "lineLengths": [
        39,
        30,
        81,
        79,
        81,
        84,
        89,
        83,
        2,
        55,
        37,
        54,
        5,
        34,
        34,
        34,
        34,
        12,
        96,
        95,
        96,
        97,
        98,
        98,
        96,
        96,
        97,
        98,
        98,
        97,
        97,
        96,
        96,
        98,
        98,
        97,
        96,
        96,
        98,
        98,
        98,
        98,
        6,
        2,
        46,
        48,
        31,
        46,
        87,
        28,
        7,
        116,
        56,
        49,
        76,
        25,
        7,
        33,
        49,
        111,
        58,
        9,
        54,
        95,
        31,
        7,
        68,
        43,
        155,
        9,
        46,
        49,
        71,
        46,
        74,
        50,
        7,
        57,
        25,
        7,
        27,
        1,
        40,
        29,
        77,
        5,
        36,
        1,
        43,
        29,
        72,
        5,
        31,
        1,
        54,
        29,
        10,
        11,
        30,
        22,
        17,
        29,
        45,
        31,
        27,
        5,
        34,
        1,
        70,
        33,
        69,
        5,
        80,
        64,
        5,
        42,
        78,
        51,
        23,
        70,
        9,
        54,
        21,
        29,
        36,
        35,
        64,
        39,
        13,
        69,
        40,
        13,
        72,
        39,
        13,
        72,
        39,
        13,
        50,
        39,
        13,
        18,
        93,
        13,
        9,
        14,
        38,
        54,
        55,
        57,
        57,
        14,
        64,
        31,
        75,
        13,
        40,
        54,
        9,
        32,
        72,
        27,
        34,
        33,
        51,
        32,
        91,
        35,
        96,
        47,
        77,
        53,
        35,
        13,
        9,
        120,
        16,
        42,
        32,
        48,
        48,
        10,
        7,
        21,
        1,
        63,
        26,
        17,
        17,
        18,
        21,
        6,
        54,
        50,
        33,
        1,
        30544
      ],
      "data": {
        "version": 3,
        "file": "/home/asigator/fitness2025/backend/src/services/programService.ts",
        "sources": [
          "file:///home/asigator/fitness2025/backend/src/services/programService.ts"
        ],
        "names": [],
        "mappings": "AAOA,OAAO,EAAE,EAAE,EAAE,MAAM,mBAAmB,CAAC;AA2BvC,MAAM,oBAAoB,GAAiB;IACzC,EAAE,WAAW,EAAE,CAAC,EAAE,QAAQ,EAAE,wBAAwB,EAAE,QAAQ,EAAE,UAAU,EAAE;IAC5E,EAAE,WAAW,EAAE,CAAC,EAAE,QAAQ,EAAE,sBAAsB,EAAE,QAAQ,EAAE,UAAU,EAAE;IAC1E,EAAE,WAAW,EAAE,CAAC,EAAE,QAAQ,EAAE,0BAA0B,EAAE,QAAQ,EAAE,QAAQ,EAAE;IAC5E,EAAE,WAAW,EAAE,CAAC,EAAE,QAAQ,EAAE,2BAA2B,EAAE,QAAQ,EAAE,UAAU,EAAE;IAC/E,EAAE,WAAW,EAAE,CAAC,EAAE,QAAQ,EAAE,gCAAgC,EAAE,QAAQ,EAAE,UAAU,EAAE;IACpF,EAAE,WAAW,EAAE,CAAC,EAAE,QAAQ,EAAE,4BAA4B,EAAE,QAAQ,EAAE,QAAQ,EAAE;CAC/E,CAAC;AAMF,MAAM,0BAA0B,GAAG,CAAC,aAAuB,EAAqB,EAAE;IAEhF,IAAI,aAAa,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;QAC/B,MAAM,IAAI,KAAK,CAAC,4BAA4B,CAAC,CAAC;IAChD,CAAC;IAED,MAAM,IAAI,GAAG,aAAa,CAAC,CAAC,CAAE,CAAC;IAC/B,MAAM,IAAI,GAAG,aAAa,CAAC,CAAC,CAAE,CAAC;IAE/B,MAAM,IAAI,GAAG,aAAa,CAAC,CAAC,CAAE,CAAC;IAC/B,MAAM,IAAI,GAAG,aAAa,CAAC,CAAC,CAAE,CAAC;IAE/B,OAAO;QAEL,EAAE,cAAc,EAAE,IAAI,EAAE,WAAW,EAAE,EAAE,EAAE,WAAW,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,EAAE,CAAC,EAAE;QACvF,EAAE,cAAc,EAAE,IAAI,EAAE,WAAW,EAAE,CAAC,EAAE,WAAW,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,EAAE,CAAC,EAAE;QACtF,EAAE,cAAc,EAAE,IAAI,EAAE,WAAW,EAAE,CAAC,EAAE,WAAW,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,GAAG,EAAE,CAAC,EAAE;QACvF,EAAE,cAAc,EAAE,IAAI,EAAE,WAAW,EAAE,CAAC,EAAE,WAAW,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,GAAG,EAAE,CAAC,EAAE;QACxF,EAAE,cAAc,EAAE,IAAI,EAAE,WAAW,EAAE,EAAE,EAAE,WAAW,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,GAAG,EAAE,CAAC,EAAE;QACzF,EAAE,cAAc,EAAE,IAAI,EAAE,WAAW,EAAE,EAAE,EAAE,WAAW,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,GAAG,EAAE,CAAC,EAAE;QAGzF,EAAE,cAAc,EAAE,IAAI,EAAE,WAAW,EAAE,EAAE,EAAE,WAAW,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,EAAE,CAAC,EAAE;QACvF,EAAE,cAAc,EAAE,IAAI,EAAE,WAAW,EAAE,EAAE,EAAE,WAAW,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,EAAE,CAAC,EAAE;QACvF,EAAE,cAAc,EAAE,IAAI,EAAE,WAAW,EAAE,EAAE,EAAE,WAAW,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,GAAG,EAAE,CAAC,EAAE;QACxF,EAAE,cAAc,EAAE,IAAI,EAAE,WAAW,EAAE,EAAE,EAAE,WAAW,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,GAAG,EAAE,CAAC,EAAE;QACzF,EAAE,cAAc,EAAE,IAAI,EAAE,WAAW,EAAE,EAAE,EAAE,WAAW,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,GAAG,EAAE,CAAC,EAAE;QACzF,EAAE,cAAc,EAAE,IAAI,EAAE,WAAW,EAAE,EAAE,EAAE,WAAW,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,GAAG,EAAE,CAAC,EAAE;QAKxF,EAAE,cAAc,EAAE,IAAI,EAAE,WAAW,EAAE,EAAE,EAAE,WAAW,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,GAAG,EAAE,CAAC,EAAE;QACxF,EAAE,cAAc,EAAE,IAAI,EAAE,WAAW,EAAE,EAAE,EAAE,WAAW,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,EAAE,CAAC,EAAE;QACvF,EAAE,cAAc,EAAE,IAAI,EAAE,WAAW,EAAE,CAAC,EAAE,WAAW,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,GAAG,EAAE,CAAC,EAAE;QACvF,EAAE,cAAc,EAAE,IAAI,EAAE,WAAW,EAAE,EAAE,EAAE,WAAW,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,GAAG,EAAE,CAAC,EAAE;QACzF,EAAE,cAAc,EAAE,IAAI,EAAE,WAAW,EAAE,EAAE,EAAE,WAAW,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,GAAG,EAAE,CAAC,EAAE;QACzF,EAAE,cAAc,EAAE,IAAI,EAAE,WAAW,EAAE,EAAE,EAAE,WAAW,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,GAAG,EAAE,CAAC,EAAE;QAGxF,EAAE,cAAc,EAAE,IAAI,EAAE,WAAW,EAAE,EAAE,EAAE,WAAW,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,EAAE,CAAC,EAAE;QACvF,EAAE,cAAc,EAAE,IAAI,EAAE,WAAW,EAAE,EAAE,EAAE,WAAW,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,EAAE,CAAC,EAAE;QACvF,EAAE,cAAc,EAAE,IAAI,EAAE,WAAW,EAAE,EAAE,EAAE,WAAW,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,GAAG,EAAE,CAAC,EAAE;QACzF,EAAE,cAAc,EAAE,IAAI,EAAE,WAAW,EAAE,EAAE,EAAE,WAAW,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,GAAG,EAAE,CAAC,EAAE;QACzF,EAAE,cAAc,EAAE,IAAI,EAAE,WAAW,EAAE,EAAE,EAAE,WAAW,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,GAAG,EAAE,CAAC,EAAE;QACzF,EAAE,cAAc,EAAE,IAAI,EAAE,WAAW,EAAE,EAAE,EAAE,WAAW,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,GAAG,EAAE,CAAC,EAAE;KAG1F,CAAC;AACJ,CAAC,CAAC;AASF,MAAM,UAAU,oBAAoB,CAAC,MAAc;IAEjD,MAAM,aAAa,GAAG,EAAE,CAAC,WAAW,CAAC,GAAG,EAAE;QACxC,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;QAGvB,MAAM,iBAAiB,GAAc,EAAE,CAAC,OAAO,CAAC;;;KAG/C,CAAC,CAAC;QAEH,MAAM,aAAa,GAAG,iBAAiB,CAAC,GAAG,CACzC,MAAM,EACN,uCAAuC,EACvC,CAAC,EACD,KAAK,EACL,GAAG,CACJ,CAAC;QAEF,MAAM,SAAS,GAAG,aAAa,CAAC,eAAyB,CAAC;QAG1D,MAAM,oBAAoB,GAAc,EAAE,CAAC,OAAO,CAAC;;;KAGlD,CAAC,CAAC;QAEH,MAAM,aAAa,GAAa,EAAE,CAAC;QAEnC,KAAK,MAAM,GAAG,IAAI,oBAAoB,EAAE,CAAC;YACvC,MAAM,SAAS,GAAG,oBAAoB,CAAC,GAAG,CACxC,SAAS,EACT,GAAG,CAAC,WAAW,EACf,GAAG,CAAC,QAAQ,EACZ,GAAG,CAAC,QAAQ,CACb,CAAC;YACF,aAAa,CAAC,IAAI,CAAC,SAAS,CAAC,eAAyB,CAAC,CAAC;QAC1D,CAAC;QAGD,MAAM,yBAAyB,GAAc,EAAE,CAAC,OAAO,CAAC;;;KAGvD,CAAC,CAAC;QAEH,MAAM,SAAS,GAAG,0BAA0B,CAAC,aAAa,CAAC,CAAC;QAE5D,KAAK,MAAM,QAAQ,IAAI,SAAS,EAAE,CAAC;YACjC,yBAAyB,CAAC,GAAG,CAC3B,QAAQ,CAAC,cAAc,EACvB,QAAQ,CAAC,WAAW,EACpB,QAAQ,CAAC,WAAW,EACpB,QAAQ,CAAC,IAAI,EACb,QAAQ,CAAC,IAAI,EACb,QAAQ,CAAC,GAAG,CACb,CAAC;QACJ,CAAC;QAID,MAAM,SAAS,GAAG,IAAI,IAAI,EAAE,CAAC,MAAM,EAAE,CAAC;QAMtC,MAAM,UAAU,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QACzC,MAAM,iBAAiB,GAAG,aAAa,CAAC,UAAU,CAAC,SAAS,CAAE,CAAE,CAAC;QAEjE,MAAM,iBAAiB,GAAc,EAAE,CAAC,OAAO,CAAC;;;KAG/C,CAAC,CAAC;QAEH,iBAAiB,CAAC,GAAG,CAAC,MAAM,EAAE,iBAAiB,CAAC,CAAC;QAEjD,OAAO,SAAS,CAAC;IACnB,CAAC,CAAC,CAAC;IAEH,OAAO,aAAa,EAAE,CAAC;AACzB,CAAC;AAQD,MAAM,UAAU,cAAc,CAAC,MAAc;IAC3C,MAAM,IAAI,GAAG,EAAE,CAAC,OAAO,CAAC;;GAEvB,CAAC,CAAC;IAEH,OAAO,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,IAAI,CAAC;AAClC,CAAC;AAQD,MAAM,UAAU,cAAc,CAAC,SAAiB;IAC9C,MAAM,IAAI,GAAG,EAAE,CAAC,OAAO,CAAC;;GAEvB,CAAC,CAAC;IAEH,OAAO,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;AAC7B,CAAC;AAQD,MAAM,UAAU,sBAAsB,CAAC,YAAoB;IACzD,MAAM,IAAI,GAAG,EAAE,CAAC,OAAO,CAAC;;;;;;;;;;GAUvB,CAAC,CAAC;IAEH,OAAO,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;AAChC,CAAC;AA6BD,MAAM,UAAU,YAAY,CAC1B,SAAiB,EACjB,SAAkB,KAAK,EACvB,WAAoB;IAGpB,IAAI,MAAM,IAAI,CAAC,WAAW,EAAE,CAAC;QAC3B,MAAM,IAAI,KAAK,CAAC,2CAA2C,CAAC,CAAC;IAC/D,CAAC;IAED,IAAI,WAAW,IAAI,CAAC,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC,QAAQ,CAAC,WAAW,CAAC,EAAE,CAAC;QAC1E,MAAM,IAAI,KAAK,CAAC,yBAAyB,WAAW,EAAE,CAAC,CAAC;IAC1D,CAAC;IAGD,MAAM,OAAO,GAAG,EAAE,CAAC,WAAW,CAAC,GAAG,EAAE;QAElC,MAAM,WAAW,GAAG,EAAE,CAAC,OAAO,CAAC,qCAAqC,CAAC,CAAC;QACtE,MAAM,OAAO,GAAG,WAAW,CAAC,GAAG,CAAC,SAAS,CAAQ,CAAC;QAElD,IAAI,CAAC,OAAO,EAAE,CAAC;YACb,MAAM,IAAI,KAAK,CAAC,mBAAmB,SAAS,YAAY,CAAC,CAAC;QAC5D,CAAC;QAED,MAAM,aAAa,GAAG,OAAO,CAAC,eAAe,CAAC;QAG9C,IAAI,QAAgB,CAAC;QACrB,IAAI,gBAAwB,CAAC;QAE7B,IAAI,MAAM,IAAI,WAAW,EAAE,CAAC;YAE1B,QAAQ,GAAG,WAAW,CAAC;YAGvB,IAAI,aAAa,KAAK,KAAK,IAAI,QAAQ,KAAK,KAAK,EAAE,CAAC;gBAClD,gBAAgB,GAAG,GAAG,CAAC;YACzB,CAAC;iBAAM,IAAI,aAAa,KAAK,KAAK,IAAI,QAAQ,KAAK,KAAK,EAAE,CAAC;gBACzD,gBAAgB,GAAG,IAAI,CAAC;YAC1B,CAAC;iBAAM,IAAI,aAAa,KAAK,KAAK,IAAI,QAAQ,KAAK,QAAQ,EAAE,CAAC;gBAC5D,gBAAgB,GAAG,GAAG,CAAC;YACzB,CAAC;iBAAM,IAAI,aAAa,KAAK,QAAQ,IAAI,QAAQ,KAAK,KAAK,EAAE,CAAC;gBAC5D,gBAAgB,GAAG,GAAG,CAAC;YACzB,CAAC;iBAAM,IAAI,aAAa,KAAK,QAAQ,EAAE,CAAC;gBAEtC,gBAAgB,GAAG,GAAG,CAAC;YACzB,CAAC;iBAAM,CAAC;gBAEN,gBAAgB,GAAG,gCAAgC,CAAC,aAAa,EAAE,QAAQ,CAAC,CAAC;YAC/E,CAAC;QACH,CAAC;aAAM,CAAC;YAEN,MAAM,gBAAgB,GAAyD;gBAC7E,GAAG,EAAE,EAAE,IAAI,EAAE,KAAK,EAAE,UAAU,EAAE,GAAG,EAAE;gBACrC,GAAG,EAAE,EAAE,IAAI,EAAE,KAAK,EAAE,UAAU,EAAE,IAAI,EAAE;gBACtC,GAAG,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,UAAU,EAAE,GAAG,EAAE;gBACxC,MAAM,EAAE,EAAE,IAAI,EAAE,KAAK,EAAE,UAAU,EAAE,GAAG,EAAE;aACzC,CAAC;YAEF,MAAM,WAAW,GAAG,gBAAgB,CAAC,aAAa,CAAC,CAAC;YACpD,IAAI,CAAC,WAAW,EAAE,CAAC;gBACjB,MAAM,IAAI,KAAK,CAAC,0BAA0B,aAAa,EAAE,CAAC,CAAC;YAC7D,CAAC;YAED,QAAQ,GAAG,WAAW,CAAC,IAAI,CAAC;YAC5B,gBAAgB,GAAG,WAAW,CAAC,UAAU,CAAC;QAC5C,CAAC;QAGD,MAAM,aAAa,GAAG,EAAE;aACrB,OAAO,CAAC,kDAAkD,CAAC;aAC3D,GAAG,CAAC,SAAS,CAAC;aACd,GAAG,CAAC,CAAC,GAAQ,EAAE,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;QAE7B,IAAI,gBAAgB,GAAG,CAAC,CAAC;QAEzB,KAAK,MAAM,YAAY,IAAI,aAAa,EAAE,CAAC;YACzC,MAAM,SAAS,GAAG,EAAE;iBACjB,OAAO,CAAC,iEAAiE,CAAC;iBAC1E,GAAG,CAAC,YAAY,CAAwC,CAAC;YAE5D,MAAM,UAAU,GAAG,EAAE,CAAC,OAAO,CAAC,oDAAoD,CAAC,CAAC;YAEpF,KAAK,MAAM,QAAQ,IAAI,SAAS,EAAE,CAAC;gBACjC,MAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,GAAG,gBAAgB,CAAC,CAAC;gBAC7D,UAAU,CAAC,GAAG,CAAC,OAAO,EAAE,QAAQ,CAAC,EAAE,CAAC,CAAC;gBACrC,gBAAgB,EAAE,CAAC;YACrB,CAAC;QACH,CAAC;QAGD,EAAE,CAAC,OAAO,CAAC,0EAA0E,CAAC,CAAC,GAAG,CACxF,QAAQ,EACR,SAAS,CACV,CAAC;QAEF,OAAO;YACL,cAAc,EAAE,aAAa;YAC7B,SAAS,EAAE,QAAQ;YACnB,iBAAiB,EAAE,gBAAgB;YACnC,iBAAiB,EAAE,gBAAgB;SACpC,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,OAAO,OAAO,EAAE,CAAC;AACnB,CAAC;AASD,SAAS,gCAAgC,CAAC,SAAiB,EAAE,OAAe;IAE1E,MAAM,YAAY,GAA2B;QAC3C,GAAG,EAAE,GAAG;QACR,GAAG,EAAE,GAAG;QACR,GAAG,EAAE,IAAI;QACT,MAAM,EAAE,IAAI;KACb,CAAC;IAEF,MAAM,UAAU,GAAG,YAAY,CAAC,SAAS,CAAC,IAAI,GAAG,CAAC;IAClD,MAAM,QAAQ,GAAG,YAAY,CAAC,OAAO,CAAC,IAAI,GAAG,CAAC;IAE9C,OAAO,QAAQ,GAAG,UAAU,CAAC;AAC/B,CAAC",
        "sourcesContent": [
          "/**\n * Program Service\n *\n * Manages training program creation and configuration.\n * Provides default 6-day Renaissance Periodization split for new users.\n */\n\nimport { db } from '../database/db.js';\nimport type { Statement } from 'better-sqlite3';\n\n/**\n * Program day configuration\n */\ninterface ProgramDay {\n  day_of_week: number;\n  day_name: string;\n  day_type: 'strength' | 'vo2max';\n}\n\n/**\n * Exercise configuration for program\n */\ninterface ProgramExercise {\n  program_day_id: number;\n  exercise_id: number;\n  order_index: number;\n  sets: number;\n  reps: string;\n  rir: number;\n}\n\n/**\n * Default 6-day program structure\n */\nconst DEFAULT_PROGRAM_DAYS: ProgramDay[] = [\n  { day_of_week: 1, day_name: 'Push A (Chest-Focused)', day_type: 'strength' },\n  { day_of_week: 2, day_name: 'Pull A (Lat-Focused)', day_type: 'strength' },\n  { day_of_week: 3, day_name: 'VO2max A (Norwegian 4x4)', day_type: 'vo2max' },\n  { day_of_week: 4, day_name: 'Push B (Shoulder-Focused)', day_type: 'strength' },\n  { day_of_week: 5, day_name: 'Pull B (Rhomboid/Trap-Focused)', day_type: 'strength' },\n  { day_of_week: 6, day_name: 'VO2max B (30/30 or Zone 2)', day_type: 'vo2max' },\n];\n\n/**\n * Default exercise template for 6-day split\n * Exercise IDs are from the pre-seeded exercises table\n */\nconst getProgramExerciseTemplate = (programDayIds: number[]): ProgramExercise[] => {\n  // Ensure we have all 6 program day IDs\n  if (programDayIds.length !== 6) {\n    throw new Error('Expected 6 program day IDs');\n  }\n\n  const day1 = programDayIds[0]!;\n  const day2 = programDayIds[1]!;\n  // day3 and day6 are VO2max days with no exercises, so we don't need them here\n  const day4 = programDayIds[3]!;\n  const day5 = programDayIds[4]!;\n\n  return [\n    // Day 1: Push A (Chest-Focused)\n    { program_day_id: day1, exercise_id: 25, order_index: 1, sets: 3, reps: '6-8', rir: 3 }, // Barbell Back Squat\n    { program_day_id: day1, exercise_id: 1, order_index: 2, sets: 4, reps: '6-8', rir: 3 },  // Barbell Bench Press\n    { program_day_id: day1, exercise_id: 5, order_index: 3, sets: 3, reps: '8-10', rir: 2 }, // Incline Dumbbell Press\n    { program_day_id: day1, exercise_id: 7, order_index: 4, sets: 3, reps: '12-15', rir: 1 }, // Cable Flyes\n    { program_day_id: day1, exercise_id: 20, order_index: 5, sets: 4, reps: '12-15', rir: 1 }, // Lateral Raises\n    { program_day_id: day1, exercise_id: 49, order_index: 6, sets: 3, reps: '15-20', rir: 0 }, // Tricep Pushdown\n\n    // Day 2: Pull A (Lat-Focused)\n    { program_day_id: day2, exercise_id: 68, order_index: 1, sets: 3, reps: '5-8', rir: 3 }, // Conventional Deadlift\n    { program_day_id: day2, exercise_id: 14, order_index: 2, sets: 4, reps: '5-8', rir: 3 }, // Pull-Ups\n    { program_day_id: day2, exercise_id: 10, order_index: 3, sets: 4, reps: '8-10', rir: 2 }, // Barbell Row\n    { program_day_id: day2, exercise_id: 13, order_index: 4, sets: 3, reps: '12-15', rir: 1 }, // Seated Cable Row\n    { program_day_id: day2, exercise_id: 16, order_index: 5, sets: 3, reps: '15-20', rir: 0 }, // Face Pulls\n    { program_day_id: day2, exercise_id: 39, order_index: 6, sets: 3, reps: '8-12', rir: 1 }, // Barbell Curl\n\n    // Day 3: VO2max A (Norwegian 4x4) - no exercises\n\n    // Day 4: Push B (Shoulder-Focused)\n    { program_day_id: day4, exercise_id: 27, order_index: 1, sets: 3, reps: '8-12', rir: 3 }, // Leg Press\n    { program_day_id: day4, exercise_id: 18, order_index: 2, sets: 4, reps: '5-8', rir: 3 }, // Overhead Press\n    { program_day_id: day4, exercise_id: 4, order_index: 3, sets: 3, reps: '8-12', rir: 2 }, // Dumbbell Bench Press\n    { program_day_id: day4, exercise_id: 21, order_index: 4, sets: 4, reps: '15-20', rir: 0 }, // Cable Lateral Raises\n    { program_day_id: day4, exercise_id: 22, order_index: 5, sets: 3, reps: '15-20', rir: 0 }, // Rear Delt Flyes\n    { program_day_id: day4, exercise_id: 46, order_index: 6, sets: 3, reps: '8-10', rir: 2 }, // Close-Grip Bench Press\n\n    // Day 5: Pull B (Rhomboid/Trap-Focused)\n    { program_day_id: day5, exercise_id: 26, order_index: 1, sets: 3, reps: '6-8', rir: 3 }, // Front Squat\n    { program_day_id: day5, exercise_id: 10, order_index: 2, sets: 4, reps: '6-8', rir: 3 }, // Barbell Row\n    { program_day_id: day5, exercise_id: 12, order_index: 3, sets: 3, reps: '10-12', rir: 2 }, // Lat Pulldown (wide grip)\n    { program_day_id: day5, exercise_id: 62, order_index: 4, sets: 4, reps: '12-15', rir: 1 }, // Barbell Shrugs\n    { program_day_id: day5, exercise_id: 22, order_index: 5, sets: 3, reps: '15-20', rir: 0 }, // Rear Delt Flyes\n    { program_day_id: day5, exercise_id: 41, order_index: 6, sets: 3, reps: '10-15', rir: 1 }, // Hammer Curl\n\n    // Day 6: VO2max B (30/30 or Zone 2) - no exercises\n  ];\n};\n\n/**\n * Create default 6-day Renaissance Periodization program for a new user\n *\n * @param userId - The user ID to create the program for\n * @returns The created program ID\n * @throws Error if program creation fails\n */\nexport function createDefaultProgram(userId: number): number {\n  // Execute as a single transaction for atomicity\n  const createProgram = db.transaction(() => {\n    const now = Date.now();\n\n    // 1. Create the program\n    const stmtCreateProgram: Statement = db.prepare(`\n      INSERT INTO programs (user_id, name, mesocycle_week, mesocycle_phase, created_at)\n      VALUES (?, ?, ?, ?, ?)\n    `);\n\n    const programResult = stmtCreateProgram.run(\n      userId,\n      'Renaissance Periodization 6-Day Split',\n      1,\n      'mev',\n      now\n    );\n\n    const programId = programResult.lastInsertRowid as number;\n\n    // 2. Create the 6 program days\n    const stmtCreateProgramDay: Statement = db.prepare(`\n      INSERT INTO program_days (program_id, day_of_week, day_name, day_type)\n      VALUES (?, ?, ?, ?)\n    `);\n\n    const programDayIds: number[] = [];\n\n    for (const day of DEFAULT_PROGRAM_DAYS) {\n      const dayResult = stmtCreateProgramDay.run(\n        programId,\n        day.day_of_week,\n        day.day_name,\n        day.day_type\n      );\n      programDayIds.push(dayResult.lastInsertRowid as number);\n    }\n\n    // 3. Create program exercises for all strength days\n    const stmtCreateProgramExercise: Statement = db.prepare(`\n      INSERT INTO program_exercises (program_day_id, exercise_id, order_index, sets, reps, rir)\n      VALUES (?, ?, ?, ?, ?, ?)\n    `);\n\n    const exercises = getProgramExerciseTemplate(programDayIds);\n\n    for (const exercise of exercises) {\n      stmtCreateProgramExercise.run(\n        exercise.program_day_id,\n        exercise.exercise_id,\n        exercise.order_index,\n        exercise.sets,\n        exercise.reps,\n        exercise.rir\n      );\n    }\n\n    // 4. Create today's workout for the user\n    // Determine which day of week it is (0=Sunday, 1=Monday, ..., 6=Saturday)\n    const dayOfWeek = new Date().getDay();\n\n    // Map day of week to program_day_id\n    // Sunday (0) -> Saturday's workout (index 5, VO2max B)\n    // Monday (1) -> Push A (index 0)\n    // etc.\n    const dayMapping = [5, 0, 1, 2, 3, 4, 5]; // Sunday maps to Saturday's workout\n    const todayProgramDayId = programDayIds[dayMapping[dayOfWeek]!]!;\n\n    const stmtCreateWorkout: Statement = db.prepare(`\n      INSERT INTO workouts (user_id, program_day_id, date, status, synced)\n      VALUES (?, ?, date('now'), 'not_started', 0)\n    `);\n\n    stmtCreateWorkout.run(userId, todayProgramDayId);\n\n    return programId;\n  });\n\n  return createProgram();\n}\n\n/**\n * Get program details for a user\n *\n * @param userId - The user ID\n * @returns Program details or null if no program exists\n */\nexport function getUserProgram(userId: number): any | null {\n  const stmt = db.prepare(`\n    SELECT * FROM programs WHERE user_id = ? ORDER BY created_at DESC LIMIT 1\n  `);\n\n  return stmt.get(userId) || null;\n}\n\n/**\n * Get program days for a program\n *\n * @param programId - The program ID\n * @returns Array of program days\n */\nexport function getProgramDays(programId: number): any[] {\n  const stmt = db.prepare(`\n    SELECT * FROM program_days WHERE program_id = ? ORDER BY day_of_week\n  `);\n\n  return stmt.all(programId);\n}\n\n/**\n * Get exercises for a program day\n *\n * @param programDayId - The program day ID\n * @returns Array of program exercises with exercise details\n */\nexport function getProgramDayExercises(programDayId: number): any[] {\n  const stmt = db.prepare(`\n    SELECT\n      pe.*,\n      e.name as exercise_name,\n      e.muscle_groups,\n      e.equipment\n    FROM program_exercises pe\n    JOIN exercises e ON pe.exercise_id = e.id\n    WHERE pe.program_day_id = ?\n    ORDER BY pe.order_index\n  `);\n\n  return stmt.all(programDayId);\n}\n\n/**\n * Phase transition result\n */\ninterface PhaseAdvancementResult {\n  previous_phase: string;\n  new_phase: string;\n  volume_multiplier: number;\n  exercises_updated: number;\n}\n\n/**\n * Advance program to the next mesocycle phase with automatic volume adjustment\n *\n * Phase progression cycle: mev → mav → mrv → deload → mev (repeats)\n *\n * Volume multipliers:\n * - MEV → MAV: +20% (1.2x)\n * - MAV → MRV: +15% (1.15x)\n * - MRV → Deload: -50% (0.5x)\n * - Deload → MEV: Reset to baseline (+100%, 2.0x)\n *\n * @param programId - The program ID to advance\n * @param manual - If true, requires target_phase parameter\n * @param targetPhase - Target phase for manual advancement\n * @returns Phase advancement result\n * @throws Error if program not found or invalid phase transition\n */\nexport function advancePhase(\n  programId: number,\n  manual: boolean = false,\n  targetPhase?: string\n): PhaseAdvancementResult {\n  // Validate target phase if manual\n  if (manual && !targetPhase) {\n    throw new Error('target_phase is required when manual=true');\n  }\n\n  if (targetPhase && !['mev', 'mav', 'mrv', 'deload'].includes(targetPhase)) {\n    throw new Error(`Invalid target_phase: ${targetPhase}`);\n  }\n\n  // Execute as atomic transaction\n  const advance = db.transaction(() => {\n    // 1. Get current program state\n    const programStmt = db.prepare('SELECT * FROM programs WHERE id = ?');\n    const program = programStmt.get(programId) as any;\n\n    if (!program) {\n      throw new Error(`Program with ID ${programId} not found`);\n    }\n\n    const previousPhase = program.mesocycle_phase;\n\n    // 2. Determine new phase\n    let newPhase: string;\n    let volumeMultiplier: number;\n\n    if (manual && targetPhase) {\n      // Manual phase transition\n      newPhase = targetPhase;\n\n      // Calculate multiplier based on transition\n      if (previousPhase === 'mev' && newPhase === 'mav') {\n        volumeMultiplier = 1.2;\n      } else if (previousPhase === 'mav' && newPhase === 'mrv') {\n        volumeMultiplier = 1.15;\n      } else if (previousPhase === 'mrv' && newPhase === 'deload') {\n        volumeMultiplier = 0.5;\n      } else if (previousPhase === 'deload' && newPhase === 'mev') {\n        volumeMultiplier = 2.0;\n      } else if (previousPhase === newPhase) {\n        // No change\n        volumeMultiplier = 1.0;\n      } else {\n        // For any other manual transition, calculate based on phases\n        volumeMultiplier = calculateMultiplierForTransition(previousPhase, newPhase);\n      }\n    } else {\n      // Automatic phase progression\n      const phaseProgression: Record<string, { next: string; multiplier: number }> = {\n        mev: { next: 'mav', multiplier: 1.2 },\n        mav: { next: 'mrv', multiplier: 1.15 },\n        mrv: { next: 'deload', multiplier: 0.5 },\n        deload: { next: 'mev', multiplier: 2.0 },\n      };\n\n      const progression = phaseProgression[previousPhase];\n      if (!progression) {\n        throw new Error(`Invalid current phase: ${previousPhase}`);\n      }\n\n      newPhase = progression.next;\n      volumeMultiplier = progression.multiplier;\n    }\n\n    // 3. Update all program exercises across all program days\n    const programDayIds = db\n      .prepare('SELECT id FROM program_days WHERE program_id = ?')\n      .all(programId)\n      .map((row: any) => row.id);\n\n    let exercisesUpdated = 0;\n\n    for (const programDayId of programDayIds) {\n      const exercises = db\n        .prepare('SELECT id, sets FROM program_exercises WHERE program_day_id = ?')\n        .all(programDayId) as Array<{ id: number; sets: number }>;\n\n      const updateStmt = db.prepare('UPDATE program_exercises SET sets = ? WHERE id = ?');\n\n      for (const exercise of exercises) {\n        const newSets = Math.round(exercise.sets * volumeMultiplier);\n        updateStmt.run(newSets, exercise.id);\n        exercisesUpdated++;\n      }\n    }\n\n    // 4. Update program phase and reset week counter\n    db.prepare('UPDATE programs SET mesocycle_phase = ?, mesocycle_week = 1 WHERE id = ?').run(\n      newPhase,\n      programId\n    );\n\n    return {\n      previous_phase: previousPhase,\n      new_phase: newPhase,\n      volume_multiplier: volumeMultiplier,\n      exercises_updated: exercisesUpdated,\n    };\n  });\n\n  return advance();\n}\n\n/**\n * Calculate volume multiplier for arbitrary phase transitions\n *\n * @param fromPhase - Current phase\n * @param toPhase - Target phase\n * @returns Volume multiplier\n */\nfunction calculateMultiplierForTransition(fromPhase: string, toPhase: string): number {\n  // Define relative volumes for each phase (baseline = mev = 1.0)\n  const phaseVolumes: Record<string, number> = {\n    mev: 1.0,\n    mav: 1.2,\n    mrv: 1.38, // 1.2 * 1.15\n    deload: 0.69, // 1.38 * 0.5\n  };\n\n  const fromVolume = phaseVolumes[fromPhase] || 1.0;\n  const toVolume = phaseVolumes[toPhase] || 1.0;\n\n  return toVolume / fromVolume;\n}\n"
        ],
        "sourceRoot": ""
      }
    },
    "file:///home/asigator/fitness2025/backend/src/services/programExerciseService.ts": {
      "lineLengths": [
        39,
        26,
        40,
        45,
        45,
        49,
        49,
        49,
        41,
        42,
        40,
        45,
        41,
        41,
        38,
        45,
        45,
        45,
        2,
        51,
        17,
        10,
        11,
        30,
        22,
        17,
        29,
        45,
        13,
        4,
        22,
        47,
        46,
        44,
        5,
        44,
        43,
        41,
        5,
        40,
        35,
        31,
        1,
        45,
        82,
        63,
        22,
        80,
        5,
        76,
        56,
        20,
        74,
        5,
        38,
        35,
        128,
        61,
        50,
        5,
        35,
        93,
        29,
        5,
        149,
        59,
        105,
        12,
        47,
        38,
        6,
        1,
        49,
        81,
        46,
        27,
        68,
        5,
        23,
        22,
        41,
        33,
        38,
        5,
        46,
        33,
        43,
        5,
        40,
        32,
        37,
        5,
        31,
        56,
        5,
        20,
        35,
        28,
        29,
        16,
        5,
        30,
        29,
        41,
        41,
        33,
        56,
        21,
        7,
        46,
        139,
        5,
        60,
        1,
        43,
        29,
        32,
        29,
        45,
        19,
        5,
        41,
        27,
        68,
        5,
        130,
        80,
        23,
        12,
        22,
        38,
        6,
        1,
        64,
        44,
        57,
        29,
        45,
        19,
        5,
        71,
        27,
        83,
        5,
        79,
        59,
        23,
        71,
        5,
        70,
        66,
        87,
        27,
        116,
        106,
        5,
        95,
        53,
        12,
        22,
        57,
        44,
        6,
        1,
        58,
        42,
        99,
        38,
        75,
        9,
        7,
        14,
        31,
        1,
        83,
        36,
        52,
        5,
        53,
        22,
        20,
        5,
        44,
        42,
        52,
        5,
        80,
        38,
        35,
        29,
        45,
        74,
        5,
        61,
        60,
        28,
        36,
        60,
        42,
        65,
        9,
        5,
        28,
        30,
        28,
        5,
        38,
        29,
        5,
        63,
        41,
        40,
        67,
        9,
        82,
        5,
        36,
        76,
        5,
        78,
        1,
        77,
        24,
        36,
        52,
        47,
        25,
        21,
        9,
        60,
        48,
        118,
        13,
        9,
        42,
        48,
        124,
        13,
        9,
        5,
        60,
        1,
        32732
      ],
      "data": {
        "version": 3,
        "file": "/home/asigator/fitness2025/backend/src/services/programExerciseService.ts",
        "sources": [
          "file:///home/asigator/fitness2025/backend/src/services/programExerciseService.ts"
        ],
        "names": [],
        "mappings": "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",
        "sourcesContent": [
          "/**\n * Program Exercise Service (T034-T038)\n *\n * Handles CRUD operations for program exercises with volume validation.\n * Provides exercise swapping, reordering, and MEV/MAV/MRV volume warnings.\n */\n\nimport { db } from '../database/db.js';\n\n/**\n * Volume landmarks for muscle groups (from analyticsService)\n */\nconst VOLUME_LANDMARKS: Record<string, { mev: number; mav: number; mrv: number }> = {\n  chest: { mev: 8, mav: 14, mrv: 22 },\n  back_lats: { mev: 10, mav: 16, mrv: 26 },\n  back_traps: { mev: 6, mav: 12, mrv: 20 },\n  shoulders_front: { mev: 4, mav: 8, mrv: 14 },\n  shoulders_side: { mev: 8, mav: 16, mrv: 26 },\n  shoulders_rear: { mev: 8, mav: 14, mrv: 22 },\n  biceps: { mev: 6, mav: 12, mrv: 20 },\n  triceps: { mev: 6, mav: 12, mrv: 22 },\n  quads: { mev: 8, mav: 14, mrv: 24 },\n  hamstrings: { mev: 6, mav: 12, mrv: 20 },\n  glutes: { mev: 6, mav: 12, mrv: 20 },\n  calves: { mev: 8, mav: 14, mrv: 22 },\n  abs: { mev: 8, mav: 16, mrv: 28 },\n  front_delts: { mev: 4, mav: 8, mrv: 14 }, // Alias for shoulders_front\n  side_delts: { mev: 8, mav: 16, mrv: 26 }, // Alias for shoulders_side\n  rear_delts: { mev: 8, mav: 14, mrv: 22 }, // Alias for shoulders_rear\n};\n\n/**\n * Program Exercise Data\n */\nexport interface ProgramExercise {\n  id: number;\n  program_day_id: number;\n  exercise_id: number;\n  order_index: number;\n  sets: number;\n  reps: string;\n  rir: number;\n}\n\n/**\n * Filters for getting program exercises\n */\nexport interface ProgramExerciseFilters {\n  program_day_id?: number;\n  exercise_id?: number;\n}\n\n/**\n * Data for creating a program exercise\n */\nexport interface CreateProgramExerciseData {\n  program_day_id: number;\n  exercise_id: number;\n  target_sets: number;\n  target_rep_range: string;\n  target_rir: number;\n  order_index?: number;\n}\n\n/**\n * Data for updating a program exercise\n */\nexport interface UpdateProgramExerciseData {\n  target_sets?: number;\n  target_rep_range?: string;\n  target_rir?: number;\n}\n\n/**\n * Exercise reorder item\n */\nexport interface ExerciseReorderItem {\n  program_exercise_id: number;\n  new_order_index: number;\n}\n\n/**\n * Get program exercises with optional filters\n *\n * @param filters - Optional filters (program_day_id or exercise_id)\n * @returns Array of program exercises with exercise details\n */\nexport function getProgramExercises(filters: ProgramExerciseFilters = {}): any[] {\n  let query = `\n    SELECT\n      pe.*,\n      e.name as exercise_name,\n      e.muscle_groups,\n      e.equipment\n    FROM program_exercises pe\n    JOIN exercises e ON pe.exercise_id = e.id\n    WHERE 1=1\n  `;\n\n  const params: any[] = [];\n\n  if (filters.program_day_id !== undefined) {\n    query += ' AND pe.program_day_id = ?';\n    params.push(filters.program_day_id);\n  }\n\n  if (filters.exercise_id !== undefined) {\n    query += ' AND pe.exercise_id = ?';\n    params.push(filters.exercise_id);\n  }\n\n  query += ' ORDER BY pe.order_index';\n\n  const stmt = db.prepare(query);\n  return stmt.all(...params);\n}\n\n/**\n * Create a new program exercise with volume warning\n *\n * @param data - Program exercise data\n * @returns Object with program_exercise_id and optional volume_warning\n * @throws Error if program_day_id or exercise_id doesn't exist\n */\nexport function createProgramExercise(data: CreateProgramExerciseData): {\n  program_exercise_id: number;\n  volume_warning: string | null;\n} {\n  // Validate program_day_id exists\n  const programDayStmt = db.prepare('SELECT id FROM program_days WHERE id = ?');\n  const programDay = programDayStmt.get(data.program_day_id);\n  if (!programDay) {\n    throw new Error(`Program day with ID ${data.program_day_id} not found`);\n  }\n\n  // Validate exercise_id exists\n  const exerciseStmt = db.prepare('SELECT * FROM exercises WHERE id = ?');\n  const exercise = exerciseStmt.get(data.exercise_id) as any;\n  if (!exercise) {\n    throw new Error(`Exercise with ID ${data.exercise_id} not found`);\n  }\n\n  // Determine order_index if not provided\n  let orderIndex = data.order_index;\n  if (orderIndex === undefined) {\n    const maxOrderStmt = db.prepare(\n      'SELECT MAX(order_index) as max_order FROM program_exercises WHERE program_day_id = ?'\n    );\n    const result = maxOrderStmt.get(data.program_day_id) as any;\n    orderIndex = (result?.max_order ?? 0) + 1;\n  }\n\n  // Insert program exercise\n  const insertStmt = db.prepare(`\n    INSERT INTO program_exercises (program_day_id, exercise_id, order_index, sets, reps, rir)\n    VALUES (?, ?, ?, ?, ?, ?)\n  `);\n\n  const insertResult = insertStmt.run(\n    data.program_day_id,\n    data.exercise_id,\n    orderIndex,\n    data.target_sets,\n    data.target_rep_range,\n    data.target_rir\n  );\n\n  const programExerciseId = insertResult.lastInsertRowid as number;\n\n  // Calculate volume warning\n  const volumeWarning = calculateVolumeWarning(data.program_day_id, 'add', data.target_sets, exercise);\n\n  return {\n    program_exercise_id: programExerciseId,\n    volume_warning: volumeWarning,\n  };\n}\n\n/**\n * Update a program exercise\n *\n * @param id - Program exercise ID\n * @param data - Update data (target_sets, target_rep_range, target_rir)\n * @returns Object with updated=true and optional volume_warning\n * @throws Error if program exercise doesn't exist\n */\nexport function updateProgramExercise(\n  id: number,\n  data: UpdateProgramExerciseData\n): { updated: boolean; volume_warning: string | null } {\n  // Check if program exercise exists\n  const checkStmt = db.prepare('SELECT * FROM program_exercises WHERE id = ?');\n  const programExercise = checkStmt.get(id) as any;\n  if (!programExercise) {\n    throw new Error(`Program exercise with ID ${id} not found`);\n  }\n\n  // Build dynamic update query\n  const updates: string[] = [];\n  const params: any[] = [];\n\n  if (data.target_sets !== undefined) {\n    updates.push('sets = ?');\n    params.push(data.target_sets);\n  }\n\n  if (data.target_rep_range !== undefined) {\n    updates.push('reps = ?');\n    params.push(data.target_rep_range);\n  }\n\n  if (data.target_rir !== undefined) {\n    updates.push('rir = ?');\n    params.push(data.target_rir);\n  }\n\n  if (updates.length === 0) {\n    // No updates to perform\n    return { updated: false, volume_warning: null };\n  }\n\n  params.push(id);\n\n  const updateStmt = db.prepare(`\n    UPDATE program_exercises\n    SET ${updates.join(', ')}\n    WHERE id = ?\n  `);\n\n  updateStmt.run(...params);\n\n  // Calculate volume warning if sets changed\n  let volumeWarning: string | null = null;\n  if (data.target_sets !== undefined) {\n    const exerciseStmt = db.prepare(`\n      SELECT e.* FROM exercises e\n      JOIN program_exercises pe ON e.id = pe.exercise_id\n      WHERE pe.id = ?\n    `);\n    const exercise = exerciseStmt.get(id) as any;\n\n    volumeWarning = calculateVolumeWarning(\n      programExercise.program_day_id,\n      'update',\n      data.target_sets,\n      exercise,\n      programExercise.sets\n    );\n  }\n\n  return { updated: true, volume_warning: volumeWarning };\n}\n\n/**\n * Delete a program exercise\n *\n * @param id - Program exercise ID\n * @returns Object with deleted=true and optional volume_warning\n * @throws Error if program exercise doesn't exist\n */\nexport function deleteProgramExercise(id: number): {\n  deleted: boolean;\n  volume_warning: string | null;\n} {\n  // Get program exercise details before deletion\n  const stmt = db.prepare(`\n    SELECT pe.*, e.muscle_groups\n    FROM program_exercises pe\n    JOIN exercises e ON pe.exercise_id = e.id\n    WHERE pe.id = ?\n  `);\n  const programExercise = stmt.get(id) as any;\n\n  if (!programExercise) {\n    throw new Error(`Program exercise with ID ${id} not found`);\n  }\n\n  // Calculate volume warning before deletion\n  const volumeWarning = calculateVolumeWarning(\n    programExercise.program_day_id,\n    'delete',\n    programExercise.sets,\n    programExercise\n  );\n\n  // Delete the program exercise\n  const deleteStmt = db.prepare('DELETE FROM program_exercises WHERE id = ?');\n  deleteStmt.run(id);\n\n  return {\n    deleted: true,\n    volume_warning: volumeWarning,\n  };\n}\n\n/**\n * Swap an exercise with a compatible alternative\n *\n * @param programExerciseId - Program exercise ID to swap\n * @param newExerciseId - New exercise ID\n * @returns Object with swapped=true, old_exercise_name, new_exercise_name\n * @throws Error if exercises are incompatible or don't exist\n */\nexport function swapExercise(programExerciseId: number, newExerciseId: number): {\n  swapped: boolean;\n  old_exercise_name: string;\n  new_exercise_name: string;\n} {\n  // Get current program exercise\n  const programExerciseStmt = db.prepare(`\n    SELECT pe.*, e.name as exercise_name, e.muscle_groups\n    FROM program_exercises pe\n    JOIN exercises e ON pe.exercise_id = e.id\n    WHERE pe.id = ?\n  `);\n  const programExercise = programExerciseStmt.get(programExerciseId) as any;\n\n  if (!programExercise) {\n    throw new Error(`Program exercise with ID ${programExerciseId} not found`);\n  }\n\n  // Get new exercise\n  const newExerciseStmt = db.prepare('SELECT * FROM exercises WHERE id = ?');\n  const newExercise = newExerciseStmt.get(newExerciseId) as any;\n\n  if (!newExercise) {\n    throw new Error(`Exercise with ID ${newExerciseId} not found`);\n  }\n\n  // Check compatibility (at least one shared muscle group)\n  const oldMuscleGroups = JSON.parse(programExercise.muscle_groups) as string[];\n  const newMuscleGroups = JSON.parse(newExercise.muscle_groups) as string[];\n\n  const hasSharedMuscle = oldMuscleGroups.some((mg) => newMuscleGroups.includes(mg));\n\n  if (!hasSharedMuscle) {\n    throw new Error(\n      `Exercise \"${newExercise.name}\" is incompatible with \"${programExercise.exercise_name}\". ` +\n        `Old targets: [${oldMuscleGroups.join(', ')}], New targets: [${newMuscleGroups.join(', ')}]`\n    );\n  }\n\n  // Perform swap (preserve order_index, sets, reps, rir)\n  const updateStmt = db.prepare('UPDATE program_exercises SET exercise_id = ? WHERE id = ?');\n  updateStmt.run(newExerciseId, programExerciseId);\n\n  return {\n    swapped: true,\n    old_exercise_name: programExercise.exercise_name,\n    new_exercise_name: newExercise.name,\n  };\n}\n\n/**\n * Reorder exercises within a program day\n *\n * @param programDayId - Program day ID\n * @param newOrder - Array of {program_exercise_id, new_order_index}\n * @returns Object with reordered=true\n */\nexport function reorderExercises(\n  programDayId: number,\n  newOrder: ExerciseReorderItem[]\n): { reordered: boolean } {\n  // Execute as transaction for atomicity\n  const reorder = db.transaction(() => {\n    const updateStmt = db.prepare('UPDATE program_exercises SET order_index = ? WHERE id = ?');\n\n    for (const item of newOrder) {\n      updateStmt.run(item.new_order_index, item.program_exercise_id);\n    }\n  });\n\n  reorder();\n\n  return { reordered: true };\n}\n\n/**\n * Calculate volume warning when adding/updating/deleting exercises\n *\n * @param programDayId - Program day ID\n * @param operation - 'add', 'update', or 'delete'\n * @param sets - Number of sets being added/removed\n * @param exercise - Exercise data with muscle_groups\n * @param oldSets - Previous sets count (for update operation)\n * @returns Volume warning message or null\n */\nfunction calculateVolumeWarning(\n  programDayId: number,\n  operation: 'add' | 'update' | 'delete',\n  sets: number,\n  exercise: any,\n  oldSets?: number\n): string | null {\n  // Get program_id from program_day_id\n  const programStmt = db.prepare(`\n    SELECT program_id FROM program_days WHERE id = ?\n  `);\n  const programDay = programStmt.get(programDayId) as any;\n  if (!programDay) {\n    return null;\n  }\n\n  const programId = programDay.program_id;\n\n  // Get all program days for this program\n  const programDayIdsStmt = db.prepare(`\n    SELECT id FROM program_days WHERE program_id = ?\n  `);\n  const programDayIds = (programDayIdsStmt.all(programId) as any[]).map((row) => row.id);\n\n  // Get all exercises across all program days\n  const exercisesStmt = db.prepare(`\n    SELECT pe.sets, e.muscle_groups\n    FROM program_exercises pe\n    JOIN exercises e ON pe.exercise_id = e.id\n    WHERE pe.program_day_id IN (${programDayIds.map(() => '?').join(',')})\n  `);\n  const allExercises = exercisesStmt.all(...programDayIds) as any[];\n\n  // Parse muscle groups from exercise being added/updated/deleted\n  const muscleGroups = JSON.parse(exercise.muscle_groups) as string[];\n\n  // Calculate current weekly volume per muscle group\n  const muscleVolume: Record<string, number> = {};\n\n  for (const ex of allExercises) {\n    const exMuscleGroups = JSON.parse(ex.muscle_groups) as string[];\n    for (const mg of exMuscleGroups) {\n      muscleVolume[mg] = (muscleVolume[mg] || 0) + ex.sets;\n    }\n  }\n\n  // Apply operation delta\n  let deltaMultiplier = 1;\n  if (operation === 'add') {\n    deltaMultiplier = 1; // Add sets\n  } else if (operation === 'delete') {\n    deltaMultiplier = -1; // Subtract sets\n  } else if (operation === 'update' && oldSets !== undefined) {\n    // Calculate net change\n    const netChange = sets - oldSets;\n    for (const mg of muscleGroups) {\n      muscleVolume[mg] = (muscleVolume[mg] || 0) + netChange;\n    }\n    return checkVolumeThresholds(muscleVolume, muscleGroups, sets, operation);\n  }\n\n  // Apply delta for add/delete\n  for (const mg of muscleGroups) {\n    muscleVolume[mg] = (muscleVolume[mg] || 0) + sets * deltaMultiplier;\n  }\n\n  return checkVolumeThresholds(muscleVolume, muscleGroups, sets, operation);\n}\n\n/**\n * Check volume against MEV/MAV/MRV thresholds\n *\n * @param muscleVolume - Current weekly volume per muscle group\n * @param muscleGroups - Muscle groups affected by operation\n * @param sets - Sets being added/removed\n * @param operation - 'add', 'update', or 'delete'\n * @returns Warning message or null\n */\nfunction checkVolumeThresholds(\n  muscleVolume: Record<string, number>,\n  muscleGroups: string[],\n  sets: number,\n  operation: 'add' | 'update' | 'delete'\n): string | null {\n  const warnings: string[] = [];\n\n  for (const mg of muscleGroups) {\n    const currentVolume = muscleVolume[mg] || 0;\n    const landmarks = VOLUME_LANDMARKS[mg];\n\n    if (!landmarks) {\n      continue; // Skip if no landmarks defined for this muscle group\n    }\n\n    if (operation === 'add' || operation === 'update') {\n      // Check if exceeding MRV\n      if (currentVolume > landmarks.mrv) {\n        warnings.push(\n          `Adding this exercise will exceed MRV for ${mg} (${currentVolume} > ${landmarks.mrv})`\n        );\n      }\n    } else if (operation === 'delete') {\n      // Check if dropping below MEV\n      if (currentVolume < landmarks.mev) {\n        warnings.push(\n          `Removing this exercise will drop below MEV for ${mg} (${currentVolume} < ${landmarks.mev})`\n        );\n      }\n    }\n  }\n\n  return warnings.length > 0 ? warnings.join('; ') : null;\n}\n"
        ],
        "sourceRoot": ""
      }
    },
    "file:///home/asigator/fitness2025/backend/src/services/vo2maxService.ts": {
      "lineLengths": [
        39,
        49,
        28,
        25,
        46,
        50,
        1,
        36,
        68,
        71,
        5,
        84,
        76,
        81,
        9,
        5,
        78,
        70,
        78,
        9,
        5,
        80,
        75,
        88,
        9,
        5,
        49,
        90,
        79,
        79,
        13,
        9,
        71,
        134,
        9,
        5,
        46,
        41,
        133,
        9,
        5,
        1,
        43,
        30,
        78,
        55,
        48,
        81,
        23,
        62,
        31,
        31,
        80,
        101,
        68,
        9,
        14,
        85,
        9,
        5,
        21,
        47,
        68,
        65,
        7,
        42,
        191,
        45,
        91,
        118,
        21,
        1,
        44,
        93,
        48,
        17,
        10,
        10,
        13,
        16,
        14,
        26,
        42,
        23,
        4,
        29,
        21,
        36,
        32,
        5,
        19,
        36,
        30,
        5,
        24,
        79,
        39,
        32,
        5,
        54,
        40,
        54,
        20,
        1,
        66,
        17,
        10,
        13,
        25,
        16,
        26,
        42,
        23,
        40,
        4,
        28,
        20,
        36,
        31,
        5,
        18,
        36,
        29,
        5,
        36,
        53,
        34,
        23,
        47,
        31,
        8,
        1,
        57,
        22,
        18,
        12,
        12,
        15,
        18,
        16,
        28,
        44,
        38,
        6,
        32,
        27,
        1,
        20592
      ],
      "data": {
        "version": 3,
        "file": "/home/asigator/fitness2025/backend/src/services/vo2maxService.ts",
        "sources": [
          "file:///home/asigator/fitness2025/backend/src/services/vo2maxService.ts"
        ],
        "names": [],
        "mappings": "AASA,OAAO,EAAE,EAAE,EAAE,MAAM,mBAAmB,CAAC;AAgEvC,MAAM,UAAU,cAAc,CAAC,GAAW,EAAE,UAAmB;IAC7D,MAAM,KAAK,GAAG,GAAG,GAAG,GAAG,CAAC;IACxB,MAAM,SAAS,GAAG,EAAE,CAAC;IAGrB,MAAM,MAAM,GAAG,IAAI,GAAG,CAAC,KAAK,GAAG,SAAS,CAAC,CAAC;IAG1C,OAAO,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC,CAAC;AAChD,CAAC;AAcD,SAAS,mBAAmB,CAAC,IAAuB;IAElD,IAAI,IAAI,CAAC,gBAAgB,GAAG,EAAE,IAAI,IAAI,CAAC,gBAAgB,GAAG,GAAG,EAAE,CAAC;QAC9D,MAAM,IAAI,KAAK,CAAC,6CAA6C,CAAC,CAAC;IACjE,CAAC;IAGD,IAAI,IAAI,CAAC,kBAAkB,KAAK,SAAS,IAAI,IAAI,CAAC,kBAAkB,KAAK,IAAI,EAAE,CAAC;QAC9E,IAAI,IAAI,CAAC,kBAAkB,GAAG,EAAE,IAAI,IAAI,CAAC,kBAAkB,GAAG,GAAG,EAAE,CAAC;YAClE,MAAM,IAAI,KAAK,CAAC,mDAAmD,CAAC,CAAC;QACvE,CAAC;IACH,CAAC;IAGD,IAAI,IAAI,CAAC,eAAe,KAAK,SAAS,IAAI,IAAI,CAAC,eAAe,KAAK,IAAI,EAAE,CAAC;QACxE,IAAI,IAAI,CAAC,eAAe,GAAG,EAAE,IAAI,IAAI,CAAC,eAAe,GAAG,GAAG,EAAE,CAAC;YAC5D,MAAM,IAAI,KAAK,CAAC,gDAAgD,CAAC,CAAC;QACpE,CAAC;IACH,CAAC;IAGD,IAAI,IAAI,CAAC,gBAAgB,KAAK,SAAS,IAAI,IAAI,CAAC,gBAAgB,KAAK,IAAI,EAAE,CAAC;QAC1E,IAAI,IAAI,CAAC,gBAAgB,GAAG,IAAI,IAAI,IAAI,CAAC,gBAAgB,GAAG,IAAI,EAAE,CAAC;YACjE,MAAM,IAAI,KAAK,CAAC,0DAA0D,CAAC,CAAC;QAC9E,CAAC;IACH,CAAC;IAGD,IAAI,IAAI,CAAC,aAAa,KAAK,eAAe,EAAE,CAAC;QAC3C,IAAI,IAAI,CAAC,mBAAmB,KAAK,SAAS,IAAI,IAAI,CAAC,mBAAmB,KAAK,IAAI,EAAE,CAAC;YAChF,IAAI,IAAI,CAAC,mBAAmB,GAAG,CAAC,IAAI,IAAI,CAAC,mBAAmB,GAAG,CAAC,EAAE,CAAC;gBACjE,MAAM,IAAI,KAAK,CAAC,6CAA6C,CAAC,CAAC;YACjE,CAAC;QACH,CAAC;QAID,IAAI,IAAI,CAAC,gBAAgB,GAAG,EAAE,IAAI,IAAI,CAAC,gBAAgB,GAAG,EAAE,EAAE,CAAC;YAC7D,OAAO,CAAC,IAAI,CACV,mCAAmC,IAAI,CAAC,gBAAgB,mDAAmD,CAC5G,CAAC;QACJ,CAAC;IACH,CAAC;SAAM,IAAI,IAAI,CAAC,aAAa,KAAK,OAAO,EAAE,CAAC;QAE1C,IAAI,IAAI,CAAC,gBAAgB,GAAG,EAAE,EAAE,CAAC;YAC/B,OAAO,CAAC,IAAI,CACV,4BAA4B,IAAI,CAAC,gBAAgB,yDAAyD,CAC3G,CAAC;QACJ,CAAC;IACH,CAAC;AACH,CAAC;AAWD,MAAM,UAAU,mBAAmB,CAAC,IAAuB;IAEzD,mBAAmB,CAAC,IAAI,CAAC,CAAC;IAG1B,MAAM,QAAQ,GAAoB,IAAI,CAAC,aAAa,KAAK,eAAe,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC;IAG3F,MAAM,eAAe,GAAG,IAAI,CAAC,gBAAgB,GAAG,EAAE,CAAC;IAGnD,IAAI,eAAe,GAAG,IAAI,CAAC,gBAAgB,CAAC;IAE5C,IAAI,eAAe,KAAK,SAAS,IAAI,IAAI,CAAC,kBAAkB,KAAK,SAAS,EAAE,CAAC;QAE3E,MAAM,IAAI,GAAG,EAAE;aACZ,OAAO,CAAC,wCAAwC,CAAC;aACjD,GAAG,CAAC,IAAI,CAAC,OAAO,CAA4C,CAAC;QAEhE,IAAI,IAAI,IAAI,IAAI,CAAC,GAAG,EAAE,CAAC;YACrB,eAAe,GAAG,cAAc,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,kBAAkB,CAAC,CAAC;YACpE,OAAO,CAAC,GAAG,CACT,oCAAoC,eAAe,CAAC,OAAO,CAAC,CAAC,CAAC,aAAa;gBAC3E,QAAQ,IAAI,CAAC,GAAG,QAAQ,IAAI,CAAC,kBAAkB,GAAG,CACnD,CAAC;QACJ,CAAC;aAAM,CAAC;YACN,OAAO,CAAC,IAAI,CAAC,0DAA0D,CAAC,CAAC;QAC3E,CAAC;IACH,CAAC;IAGD,MAAM,MAAM,GAAG,EAAE;SACd,OAAO,CACN;;;;yCAImC,CACpC;SACA,GAAG,CACF,IAAI,CAAC,UAAU,EACf,QAAQ,EACR,eAAe,EACf,IAAI,CAAC,mBAAmB,IAAI,IAAI,EAChC,IAAI,CAAC,kBAAkB,IAAI,IAAI,EAC/B,IAAI,CAAC,eAAe,IAAI,IAAI,EAC5B,eAAe,IAAI,IAAI,EACvB,IAAI,CAAC,GAAG,EAAE,CACX,CAAC;IAEJ,MAAM,SAAS,GAAG,MAAM,CAAC,eAAyB,CAAC;IAEnD,OAAO,CAAC,GAAG,CACT,gCAAgC,SAAS,aAAa,IAAI,CAAC,UAAU,IAAI;QACzE,YAAY,QAAQ,cAAc,IAAI,CAAC,gBAAgB,eAAe,eAAe,EAAE,OAAO,CAAC,CAAC,CAAC,IAAI,KAAK,EAAE,CAC7G,CAAC;IAEF,OAAO,SAAS,CAAC;AACnB,CAAC;AAaD,MAAM,UAAU,iBAAiB,CAAC,OAA6B;IAC7D,MAAM,EAAE,OAAO,EAAE,UAAU,EAAE,QAAQ,EAAE,aAAa,EAAE,KAAK,GAAG,EAAE,EAAE,MAAM,GAAG,CAAC,EAAE,GAAG,OAAO,CAAC;IAGzF,MAAM,cAAc,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;IAG5C,IAAI,KAAK,GAAG;;;;;;;;;GASX,CAAC;IAEF,MAAM,MAAM,GAAU,CAAC,OAAO,CAAC,CAAC;IAGhC,IAAI,UAAU,EAAE,CAAC;QACf,KAAK,IAAI,kBAAkB,CAAC;QAC5B,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IAC1B,CAAC;IAED,IAAI,QAAQ,EAAE,CAAC;QACb,KAAK,IAAI,kBAAkB,CAAC;QAC5B,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACxB,CAAC;IAGD,IAAI,aAAa,EAAE,CAAC;QAClB,MAAM,UAAU,GAAG,aAAa,KAAK,eAAe,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC;QACvE,KAAK,IAAI,qBAAqB,CAAC;QAC/B,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IAC1B,CAAC;IAGD,KAAK,IAAI,wCAAwC,CAAC;IAClD,MAAM,CAAC,IAAI,CAAC,cAAc,EAAE,MAAM,CAAC,CAAC;IAEpC,MAAM,QAAQ,GAAG,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,CAAC;IAElD,OAAO,QAAQ,CAAC;AAClB,CAAC;AAaD,MAAM,UAAU,oBAAoB,CAClC,MAAc,EACd,SAAkB,EAClB,OAAgB;IAEhB,IAAI,KAAK,GAAG;;;;;;;;;GASX,CAAC;IAEF,MAAM,MAAM,GAAU,CAAC,MAAM,CAAC,CAAC;IAE/B,IAAI,SAAS,EAAE,CAAC;QACd,KAAK,IAAI,kBAAkB,CAAC;QAC5B,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IACzB,CAAC;IAED,IAAI,OAAO,EAAE,CAAC;QACZ,KAAK,IAAI,kBAAkB,CAAC;QAC5B,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IACvB,CAAC;IAED,KAAK,IAAI,sBAAsB,CAAC;IAEhC,MAAM,OAAO,GAAG,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,GAAG,MAAM,CAI7C,CAAC;IAEH,OAAO,OAAO,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;QAC3B,IAAI,EAAE,GAAG,CAAC,IAAI;QACd,gBAAgB,EAAE,GAAG,CAAC,gBAAgB;QACtC,QAAQ,EAAE,GAAG,CAAC,QAAQ;KACvB,CAAC,CAAC,CAAC;AACN,CAAC;AASD,MAAM,UAAU,oBAAoB,CAAC,SAAiB,EAAE,MAAc;IACpE,MAAM,OAAO,GAAG,EAAE;SACf,OAAO,CACN;;;;;;;;;KASD,CACA;SACA,GAAG,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;IAE1B,OAAO,OAAO,IAAI,IAAI,CAAC;AACzB,CAAC",
        "sourcesContent": [
          "/**\n * VO2max Service\n *\n * Business logic for cardio session tracking with Norwegian 4x4 protocol:\n * - Creating VO2max sessions with Cooper formula estimation\n * - Filtering sessions by date range and protocol\n * - Tracking VO2max progression over time\n */\n\nimport { db } from '../database/db.js';\n\n/**\n * VO2max session interface matching database schema\n */\nexport interface VO2maxSession {\n  id: number;\n  workout_id: number;\n  protocol: '4x4' | 'zone2';\n  duration_seconds: number;\n  intervals_completed: number | null;\n  average_hr: number | null;\n  peak_hr: number | null;\n  estimated_vo2max: number | null;\n  synced: number;\n}\n\n/**\n * VO2max session creation data\n */\nexport interface VO2maxSessionData {\n  workout_id: number;\n  user_id: number; // For age lookup in Cooper formula\n  protocol_type: 'norwegian_4x4' | 'zone2';\n  duration_minutes: number;\n  intervals_completed?: number;\n  average_heart_rate?: number;\n  peak_heart_rate?: number;\n  estimated_vo2max?: number; // Optional - will be calculated if not provided\n}\n\n/**\n * VO2max session filter options\n */\nexport interface VO2maxSessionFilters {\n  user_id: number;\n  start_date?: string;\n  end_date?: string;\n  protocol_type?: 'norwegian_4x4' | 'zone2';\n  limit?: number;\n  offset?: number;\n}\n\n/**\n * VO2max progression data point\n */\nexport interface VO2maxProgressionPoint {\n  date: string;\n  estimated_vo2max: number;\n  protocol: string;\n}\n\n/**\n * Estimate VO2max using Cooper Formula\n *\n * Cooper Formula: VO2max = 15.3 × (max_hr / resting_hr)\n *\n * This is a simplified estimation that uses maximum heart rate (220 - age)\n * and assumes a standard resting heart rate of 60 bpm.\n *\n * @param age - User's age in years\n * @param averageHR - Average heart rate during session (optional, not used in Cooper formula)\n * @returns Estimated VO2max in ml/kg/min, clamped to physiological range 20-80\n */\nexport function estimateVO2max(age: number, _averageHR?: number): number {\n  const maxHR = 220 - age;\n  const restingHR = 60; // Standard assumption\n\n  // Cooper Formula\n  const vo2max = 15.3 * (maxHR / restingHR);\n\n  // Clamp to physiological range: 20.0 - 80.0 ml/kg/min\n  return Math.max(20.0, Math.min(80.0, vo2max));\n}\n\n/**\n * Validate VO2max session input data\n *\n * Enforces physiological constraints per Migration 003:\n * - Duration: 10-120 minutes (600-7200 seconds)\n * - Heart rate: 60-220 bpm\n * - VO2max: 20-80 ml/kg/min\n * - Norwegian 4x4: 4 intervals max\n *\n * @param data - Session data to validate\n * @throws Error if validation fails\n */\nfunction validateSessionData(data: VO2maxSessionData): void {\n  // Validate duration (10-120 minutes)\n  if (data.duration_minutes < 10 || data.duration_minutes > 120) {\n    throw new Error('Duration must be between 10 and 120 minutes');\n  }\n\n  // Validate average heart rate if provided\n  if (data.average_heart_rate !== undefined && data.average_heart_rate !== null) {\n    if (data.average_heart_rate < 60 || data.average_heart_rate > 220) {\n      throw new Error('Average heart rate must be between 60 and 220 bpm');\n    }\n  }\n\n  // Validate peak heart rate if provided\n  if (data.peak_heart_rate !== undefined && data.peak_heart_rate !== null) {\n    if (data.peak_heart_rate < 60 || data.peak_heart_rate > 220) {\n      throw new Error('Peak heart rate must be between 60 and 220 bpm');\n    }\n  }\n\n  // Validate estimated VO2max if provided\n  if (data.estimated_vo2max !== undefined && data.estimated_vo2max !== null) {\n    if (data.estimated_vo2max < 20.0 || data.estimated_vo2max > 80.0) {\n      throw new Error('Estimated VO2max must be between 20.0 and 80.0 ml/kg/min');\n    }\n  }\n\n  // Validate Norwegian 4x4 intervals\n  if (data.protocol_type === 'norwegian_4x4') {\n    if (data.intervals_completed !== undefined && data.intervals_completed !== null) {\n      if (data.intervals_completed < 0 || data.intervals_completed > 4) {\n        throw new Error('Norwegian 4x4 protocol allows 0-4 intervals');\n      }\n    }\n\n    // Norwegian 4x4 should be 28-32 minutes (4 × [4min work + 3min rest])\n    // Allow some flexibility but warn if duration is unusual\n    if (data.duration_minutes < 20 || data.duration_minutes > 40) {\n      console.warn(\n        `[VO2max] Norwegian 4x4 duration ${data.duration_minutes} minutes is outside typical range (28-32 minutes)`\n      );\n    }\n  } else if (data.protocol_type === 'zone2') {\n    // Zone 2 should be continuous, 45-120 minutes\n    if (data.duration_minutes < 30) {\n      console.warn(\n        `[VO2max] Zone 2 duration ${data.duration_minutes} minutes is shorter than typical range (45-120 minutes)`\n      );\n    }\n  }\n}\n\n/**\n * Create a new VO2max session with automatic VO2max estimation\n *\n * If estimated_vo2max is not provided and average_heart_rate is available,\n * the service will auto-calculate estimated_vo2max using the Cooper formula.\n *\n * @param data - VO2max session creation data\n * @returns The created VO2max session ID\n */\nexport function createVO2maxSession(data: VO2maxSessionData): number {\n  // Validate input data\n  validateSessionData(data);\n\n  // Convert protocol type to database format\n  const protocol: '4x4' | 'zone2' = data.protocol_type === 'norwegian_4x4' ? '4x4' : 'zone2';\n\n  // Convert duration from minutes to seconds\n  const durationSeconds = data.duration_minutes * 60;\n\n  // Auto-calculate estimated_vo2max if not provided and HR available\n  let estimatedVO2max = data.estimated_vo2max;\n\n  if (estimatedVO2max === undefined && data.average_heart_rate !== undefined) {\n    // Get user's age for Cooper formula\n    const user = db\n      .prepare('SELECT id, age FROM users WHERE id = ?')\n      .get(data.user_id) as { id: number; age: number } | undefined;\n\n    if (user && user.age) {\n      estimatedVO2max = estimateVO2max(user.age, data.average_heart_rate);\n      console.log(\n        `[VO2max] Auto-calculated VO2max: ${estimatedVO2max.toFixed(1)} ml/kg/min ` +\n        `(age=${user.age}, HR=${data.average_heart_rate})`\n      );\n    } else {\n      console.warn(`[VO2max] Cannot calculate VO2max: user age not available`);\n    }\n  }\n\n  // Insert VO2max session\n  const result = db\n    .prepare(\n      `INSERT INTO vo2max_sessions (\n        workout_id, protocol, duration_seconds, intervals_completed,\n        average_hr, peak_hr, estimated_vo2max, synced, created_at\n      )\n      VALUES (?, ?, ?, ?, ?, ?, ?, 1, ?)`\n    )\n    .run(\n      data.workout_id,\n      protocol,\n      durationSeconds,\n      data.intervals_completed ?? null,\n      data.average_heart_rate ?? null,\n      data.peak_heart_rate ?? null,\n      estimatedVO2max ?? null,\n      Date.now()\n    );\n\n  const sessionId = result.lastInsertRowid as number;\n\n  console.log(\n    `[VO2max] Session created: id=${sessionId}, workout=${data.workout_id}, ` +\n    `protocol=${protocol}, duration=${data.duration_minutes}min, VO2max=${estimatedVO2max?.toFixed(1) ?? 'N/A'}`\n  );\n\n  return sessionId;\n}\n\n/**\n * Get VO2max sessions with optional filtering\n *\n * Supports filtering by:\n * - Date range (start_date, end_date)\n * - Protocol type (norwegian_4x4, zone2)\n * - Pagination (limit, offset)\n *\n * @param filters - Filter options\n * @returns Array of VO2max sessions with workout and user data\n */\nexport function getVO2maxSessions(filters: VO2maxSessionFilters): any[] {\n  const { user_id, start_date, end_date, protocol_type, limit = 50, offset = 0 } = filters;\n\n  // Enforce maximum limit of 200\n  const effectiveLimit = Math.min(limit, 200);\n\n  // Build query with filters\n  let query = `\n    SELECT\n      v.*,\n      w.date,\n      w.user_id,\n      w.status\n    FROM vo2max_sessions v\n    JOIN workouts w ON v.workout_id = w.id\n    WHERE w.user_id = ?\n  `;\n\n  const params: any[] = [user_id];\n\n  // Add date range filters\n  if (start_date) {\n    query += ` AND w.date >= ?`;\n    params.push(start_date);\n  }\n\n  if (end_date) {\n    query += ` AND w.date <= ?`;\n    params.push(end_date);\n  }\n\n  // Add protocol filter (convert to database format)\n  if (protocol_type) {\n    const dbProtocol = protocol_type === 'norwegian_4x4' ? '4x4' : 'zone2';\n    query += ` AND v.protocol = ?`;\n    params.push(dbProtocol);\n  }\n\n  // Add ordering and pagination\n  query += ` ORDER BY w.date DESC LIMIT ? OFFSET ?`;\n  params.push(effectiveLimit, offset);\n\n  const sessions = db.prepare(query).all(...params);\n\n  return sessions;\n}\n\n/**\n * Get VO2max progression over time for a user\n *\n * Returns all VO2max estimates ordered by date, allowing tracking\n * of cardiovascular fitness improvements.\n *\n * @param userId - User ID\n * @param startDate - Optional start date filter (YYYY-MM-DD)\n * @param endDate - Optional end date filter (YYYY-MM-DD)\n * @returns Array of progression data points\n */\nexport function getVO2maxProgression(\n  userId: number,\n  startDate?: string,\n  endDate?: string\n): VO2maxProgressionPoint[] {\n  let query = `\n    SELECT\n      w.date,\n      v.estimated_vo2max,\n      v.protocol\n    FROM vo2max_sessions v\n    JOIN workouts w ON v.workout_id = w.id\n    WHERE w.user_id = ?\n      AND v.estimated_vo2max IS NOT NULL\n  `;\n\n  const params: any[] = [userId];\n\n  if (startDate) {\n    query += ` AND w.date >= ?`;\n    params.push(startDate);\n  }\n\n  if (endDate) {\n    query += ` AND w.date <= ?`;\n    params.push(endDate);\n  }\n\n  query += ` ORDER BY w.date ASC`;\n\n  const results = db.prepare(query).all(...params) as Array<{\n    date: string;\n    estimated_vo2max: number;\n    protocol: string;\n  }>;\n\n  return results.map((row) => ({\n    date: row.date,\n    estimated_vo2max: row.estimated_vo2max,\n    protocol: row.protocol,\n  }));\n}\n\n/**\n * Get a single VO2max session by ID\n *\n * @param sessionId - VO2max session ID\n * @param userId - User ID (for ownership validation)\n * @returns VO2max session or null if not found\n */\nexport function getVO2maxSessionById(sessionId: number, userId: number): any | null {\n  const session = db\n    .prepare(\n      `\n      SELECT\n        v.*,\n        w.date,\n        w.user_id,\n        w.status\n      FROM vo2max_sessions v\n      JOIN workouts w ON v.workout_id = w.id\n      WHERE v.id = ? AND w.user_id = ?\n    `\n    )\n    .get(sessionId, userId);\n\n  return session || null;\n}\n"
        ],
        "sourceRoot": ""
      }
    }
  }
}
