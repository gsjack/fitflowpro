{
  "result": [
    {
      "scriptId": "324",
      "url": "file:///home/asigator/fitness2025/backend/src/services/exerciseService.ts",
      "functions": [
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 0,
              "endOffset": 11960,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "getExercises",
          "ranges": [
            {
              "startOffset": 319,
              "endOffset": 2124,
              "count": 10
            },
            {
              "startOffset": 386,
              "endOffset": 440,
              "count": 4
            },
            {
              "startOffset": 442,
              "endOffset": 573,
              "count": 1
            },
            {
              "startOffset": 573,
              "endOffset": 654,
              "count": 9
            },
            {
              "startOffset": 654,
              "endOffset": 1145,
              "count": 3
            },
            {
              "startOffset": 701,
              "endOffset": 918,
              "count": 0
            },
            {
              "startOffset": 1145,
              "endOffset": 1173,
              "count": 9
            },
            {
              "startOffset": 1173,
              "endOffset": 1262,
              "count": 3
            },
            {
              "startOffset": 1262,
              "endOffset": 1297,
              "count": 9
            },
            {
              "startOffset": 1297,
              "endOffset": 1400,
              "count": 3
            },
            {
              "startOffset": 1400,
              "endOffset": 1429,
              "count": 9
            },
            {
              "startOffset": 1429,
              "endOffset": 1520,
              "count": 1
            },
            {
              "startOffset": 1520,
              "endOffset": 1567,
              "count": 9
            },
            {
              "startOffset": 1567,
              "endOffset": 1604,
              "count": 8
            },
            {
              "startOffset": 1605,
              "endOffset": 1609,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 2004,
              "endOffset": 2120,
              "count": 240
            },
            {
              "startOffset": 2104,
              "endOffset": 2111,
              "count": 0
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "getExerciseById",
          "ranges": [
            {
              "startOffset": 2132,
              "endOffset": 2675,
              "count": 3
            },
            {
              "startOffset": 2522,
              "endOffset": 2555,
              "count": 1
            },
            {
              "startOffset": 2555,
              "endOffset": 2657,
              "count": 2
            },
            {
              "startOffset": 2657,
              "endOffset": 2664,
              "count": 0
            }
          ],
          "isBlockCoverage": true
        }
      ]
    },
    {
      "scriptId": "326",
      "url": "file:///home/asigator/fitness2025/backend/src/database/db.ts",
      "functions": [
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 0,
              "endOffset": 28100,
              "count": 1
            },
            {
              "startOffset": 450,
              "endOffset": 498,
              "count": 0
            },
            {
              "startOffset": 593,
              "endOffset": 606,
              "count": 0
            },
            {
              "startOffset": 1192,
              "endOffset": 1219,
              "count": 0
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "initializeSchema",
          "ranges": [
            {
              "startOffset": 784,
              "endOffset": 917,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "isInitialized",
          "ranges": [
            {
              "startOffset": 941,
              "endOffset": 1168,
              "count": 1
            },
            {
              "startOffset": 1131,
              "endOffset": 1166,
              "count": 0
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "calculateOneRepMax",
          "ranges": [
            {
              "startOffset": 6163,
              "endOffset": 6234,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "calculateVolumeAdjustment",
          "ranges": [
            {
              "startOffset": 6277,
              "endOffset": 6481,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "executeWithTiming",
          "ranges": [
            {
              "startOffset": 6516,
              "endOffset": 6775,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "transaction",
          "ranges": [
            {
              "startOffset": 6804,
              "endOffset": 6848,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "batchInsert",
          "ranges": [
            {
              "startOffset": 6877,
              "endOffset": 7049,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "closeDatabase",
          "ranges": [
            {
              "startOffset": 7080,
              "endOffset": 7152,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 7173,
              "endOffset": 7203,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 7227,
              "endOffset": 7278,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 7303,
              "endOffset": 7354,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        }
      ]
    }
  ],
  "timestamp": 15375.675858,
  "source-map-cache": {
    "file:///home/asigator/fitness2025/backend/src/services/exerciseService.ts": {
      "lineLengths": [
        39,
        29,
        12,
        11,
        11,
        15,
        17,
        18,
        17,
        14,
        13,
        15,
        12,
        17,
        13,
        13,
        10,
        15,
        2,
        44,
        86,
        123,
        5,
        26,
        22,
        31,
        46,
        132,
        72,
        9,
        14,
        92,
        46,
        55,
        9,
        5,
        28,
        41,
        39,
        5,
        35,
        48,
        46,
        5,
        29,
        42,
        40,
        5,
        89,
        17,
        10,
        9,
        11,
        27,
        30,
        16,
        23,
        17,
        19,
        19,
        18,
        18,
        15,
        18,
        18,
        17,
        4,
        48,
        31,
        15,
        81,
        8,
        1,
        37,
        17,
        10,
        9,
        11,
        27,
        30,
        16,
        23,
        17,
        19,
        19,
        18,
        18,
        15,
        18,
        16,
        4,
        40,
        15,
        25,
        5,
        12,
        15,
        81,
        6,
        1,
        9284
      ],
      "data": {
        "version": 3,
        "file": "/home/asigator/fitness2025/backend/src/services/exerciseService.ts",
        "sources": [
          "file:///home/asigator/fitness2025/backend/src/services/exerciseService.ts"
        ],
        "names": [],
        "mappings": "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",
        "sourcesContent": [
          "/**\n * Exercise Service\n *\n * Handles exercise library filtering and retrieval for program planning\n */\n\nimport { db } from '../database/db.js';\n\n/**\n * Exercise entity with typed fields\n */\nexport interface Exercise {\n  id: number;\n  name: string;\n  primary_muscle_group: string;\n  secondary_muscle_groups: string[]; // Parsed from JSON\n  equipment: 'barbell' | 'dumbbell' | 'cable' | 'machine' | 'bodyweight';\n  movement_pattern: 'compound' | 'isolation';\n  difficulty: 'beginner' | 'intermediate' | 'advanced';\n  default_sets: number;\n  default_reps: string;\n  default_rir: number;\n  description: string;\n  video_url?: string; // YouTube demonstration video URL\n}\n\n/**\n * Exercise filters\n */\nexport interface ExerciseFilters {\n  muscle_group?: string;\n  equipment?: 'barbell' | 'dumbbell' | 'cable' | 'machine' | 'bodyweight';\n  movement_pattern?: 'compound' | 'isolation';\n  difficulty?: 'beginner' | 'intermediate' | 'advanced';\n}\n\n/**\n * Valid muscle groups for validation\n */\nconst VALID_MUSCLE_GROUPS = [\n  'chest',\n  'back', // Alias for lats/mid_back exercises\n  'lats',\n  'mid_back',\n  'rear_delts',\n  'front_delts',\n  'side_delts',\n  'triceps',\n  'biceps',\n  'forearms',\n  'quads',\n  'hamstrings',\n  'glutes',\n  'calves',\n  'abs',\n  'obliques',\n];\n\n/**\n * Get exercises with optional filtering\n *\n * @param filters - Optional filters for muscle_group, equipment, movement_pattern, difficulty\n * @returns Array of exercises matching filters\n */\nexport function getExercises(filters: ExerciseFilters = {}): Exercise[] {\n  // Validate muscle_group if provided\n  if (filters.muscle_group && !VALID_MUSCLE_GROUPS.includes(filters.muscle_group)) {\n    throw new Error(\n      `Invalid muscle_group: ${filters.muscle_group}. Valid options: ${VALID_MUSCLE_GROUPS.join(', ')}`\n    );\n  }\n\n  // Build WHERE clause dynamically\n  const conditions: string[] = [];\n  const params: (string | number)[] = [];\n\n  // Filter by muscle group (check both primary and secondary)\n  if (filters.muscle_group) {\n    // Handle \"back\" as an alias for lats/mid_back exercises\n    if (filters.muscle_group === 'back') {\n      conditions.push(\n        '(primary_muscle_group IN (?, ?) OR secondary_muscle_groups LIKE ? OR secondary_muscle_groups LIKE ?)'\n      );\n      params.push('lats', 'mid_back', '%\"lats\"%', '%\"mid_back\"%');\n    } else {\n      conditions.push('(primary_muscle_group = ? OR secondary_muscle_groups LIKE ?)');\n      params.push(filters.muscle_group);\n      params.push(`%\"${filters.muscle_group}\"%`); // JSON array contains check\n    }\n  }\n\n  // Filter by equipment\n  if (filters.equipment) {\n    conditions.push('equipment = ?');\n    params.push(filters.equipment);\n  }\n\n  // Filter by movement pattern\n  if (filters.movement_pattern) {\n    conditions.push('movement_pattern = ?');\n    params.push(filters.movement_pattern);\n  }\n\n  // Filter by difficulty\n  if (filters.difficulty) {\n    conditions.push('difficulty = ?');\n    params.push(filters.difficulty);\n  }\n\n  // Build SQL query\n  const whereClause = conditions.length > 0 ? `WHERE ${conditions.join(' AND ')}` : '';\n  const sql = `\n    SELECT\n      id,\n      name,\n      primary_muscle_group,\n      secondary_muscle_groups,\n      equipment,\n      movement_pattern,\n      difficulty,\n      default_sets,\n      default_reps,\n      default_rir,\n      description,\n      video_url\n    FROM exercises\n    ${whereClause}\n    ORDER BY name\n  `;\n\n  // Execute query\n  const rows = db.prepare(sql).all(...params) as any[];\n\n  // Parse secondary_muscle_groups JSON for each exercise\n  return rows.map((row) => ({\n    ...row,\n    secondary_muscle_groups: JSON.parse(row.secondary_muscle_groups || '[]'),\n  }));\n}\n\n/**\n * Get exercise by ID\n *\n * @param id - Exercise ID\n * @returns Exercise details or undefined if not found\n */\nexport function getExerciseById(id: number): Exercise | undefined {\n  const sql = `\n    SELECT\n      id,\n      name,\n      primary_muscle_group,\n      secondary_muscle_groups,\n      equipment,\n      movement_pattern,\n      difficulty,\n      default_sets,\n      default_reps,\n      default_rir,\n      description,\n      video_url\n    FROM exercises\n    WHERE id = ?\n  `;\n\n  const row = db.prepare(sql).get(id) as any;\n\n  if (!row) {\n    return undefined;\n  }\n\n  // Parse secondary_muscle_groups JSON\n  return {\n    ...row,\n    secondary_muscle_groups: JSON.parse(row.secondary_muscle_groups || '[]'),\n  };\n}\n"
        ],
        "sourceRoot": ""
      }
    },
    "file:///home/asigator/fitness2025/backend/src/database/db.ts": {
      "lineLengths": [
        38,
        57,
        37,
        36,
        50,
        38,
        57,
        69,
        33,
        27,
        44,
        1,
        41,
        78,
        3,
        32,
        33,
        35,
        31,
        32,
        54,
        20,
        47,
        2,
        29,
        9,
        25,
        90,
        19,
        24,
        5,
        11,
        21,
        5,
        2,
        23,
        23,
        1,
        90,
        78,
        42,
        103,
        30,
        3,
        75,
        45,
        70,
        36,
        3,
        49,
        38,
        17,
        55,
        21,
        22,
        3,
        58,
        38,
        17,
        55,
        53,
        22,
        3,
        51,
        17,
        88,
        14,
        3,
        55,
        17,
        24,
        14,
        3,
        46,
        37,
        3,
        59,
        14,
        22,
        41,
        35,
        3,
        38,
        104,
        36,
        3,
        48,
        37,
        13,
        42,
        24,
        23,
        3,
        47,
        52,
        3,
        47,
        45,
        3,
        45,
        41,
        3,
        56,
        36,
        69,
        53,
        3,
        36,
        3,
        59,
        36,
        32,
        3,
        51,
        31,
        64,
        49,
        3,
        33,
        3,
        57,
        52,
        3,
        46,
        8,
        11,
        69,
        13,
        40,
        75,
        17,
        17,
        3,
        44,
        8,
        38,
        29,
        13,
        40,
        42,
        21,
        35,
        44,
        15,
        15,
        3,
        50,
        8,
        75,
        31,
        102,
        15,
        19,
        3,
        48,
        49,
        3,
        51,
        42,
        84,
        3,
        27,
        3,
        51,
        24,
        65,
        19,
        3,
        51,
        47,
        3,
        46,
        78,
        24,
        3,
        50,
        26,
        19,
        25,
        9,
        3,
        58,
        44,
        2,
        58,
        25,
        22,
        24,
        30,
        24,
        31,
        22,
        2,
        48,
        29,
        24,
        40,
        23,
        96,
        5,
        18,
        2,
        36,
        32,
        2,
        47,
        46,
        35,
        27,
        9,
        7,
        20,
        2,
        36,
        15,
        46,
        2,
        26,
        20,
        3,
        28,
        20,
        20,
        3,
        29,
        20,
        20,
        3,
        18,
        20724
      ],
      "data": {
        "version": 3,
        "file": "/home/asigator/fitness2025/backend/src/database/db.ts",
        "sources": [
          "file:///home/asigator/fitness2025/backend/src/database/db.ts"
        ],
        "names": [],
        "mappings": "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",
        "sourcesContent": [
          "/**\n * Backend Database Initialization\n *\n * Initializes better-sqlite3 with performance optimizations:\n * - WAL mode for concurrent reads\n * - 64MB cache for query performance\n * - 256MB memory-mapped I/O\n * - Prepared statements for common queries\n */\n\nimport Database, { Statement } from 'better-sqlite3';\nimport { readFileSync, mkdirSync, existsSync } from 'fs';\nimport { join, dirname } from 'path';\nimport { fileURLToPath } from 'url';\n\n// Get the directory of this module file\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\n\n// Database file path - from dist/database to backend root\nconst DB_PATH = join(__dirname, '../../data/fitflow.db');\nconst SCHEMA_PATH = join(__dirname, '../../src/database/schema.sql');\n\n// Ensure data directory exists\nconst dataDir = dirname(DB_PATH);\nif (!existsSync(dataDir)) {\n  mkdirSync(dataDir, { recursive: true });\n}\n\n// Initialize database\nexport const db: Database.Database = new Database(DB_PATH, {\n  verbose: process.env.NODE_ENV === 'development' ? console.log : undefined,\n});\n\n// Apply performance optimizations\ndb.pragma('journal_mode = WAL');\ndb.pragma('cache_size = -64000'); // 64MB cache\ndb.pragma('mmap_size = 268435456'); // 256MB memory-mapped I/O\ndb.pragma('foreign_keys = ON');\n\n// Initialize schema on first run\nconst initializeSchema = (): void => {\n  const schema = readFileSync(SCHEMA_PATH, 'utf-8');\n  db.exec(schema);\n  console.log('Database schema initialized');\n};\n\n// Check if database is initialized (check for users table)\nconst isInitialized = (): boolean => {\n  try {\n    const result = db\n      .prepare(\"SELECT name FROM sqlite_master WHERE type='table' AND name='users'\")\n      .get();\n    return !!result;\n  } catch {\n    return false;\n  }\n};\n\n// Initialize if needed\nif (!isInitialized()) {\n  initializeSchema();\n}\n\n// ============================================================================\n// Prepared Statements (Common Queries)\n// ============================================================================\n\n// User Operations\nexport const stmtGetUserByUsername: Statement = db.prepare(\n  'SELECT * FROM users WHERE username = ?'\n);\n\nexport const stmtGetUserById: Statement = db.prepare('SELECT * FROM users WHERE id = ?');\n\nexport const stmtCreateUser: Statement = db.prepare(`\n  INSERT INTO users (username, password_hash, age, weight_kg, experience_level, created_at, updated_at)\n  VALUES (?, ?, ?, ?, ?, ?, ?)\n`);\n\nexport const stmtDeleteUser: Statement = db.prepare('DELETE FROM users WHERE id = ?');\n\n// Workout Operations\nexport const stmtCreateWorkout: Statement = db.prepare(`\n  INSERT INTO workouts (user_id, program_day_id, date, status, synced)\n  VALUES (?, ?, ?, 'not_started', 1)\n`);\n\nexport const stmtGetWorkoutsByUser: Statement = db.prepare(`\n  SELECT w.*, pd.day_name, pd.day_type\n  FROM workouts w\n  LEFT JOIN program_days pd ON w.program_day_id = pd.id\n  WHERE w.user_id = ?\n  ORDER BY w.date DESC\n`);\n\nexport const stmtGetWorkoutsByUserDateRange: Statement = db.prepare(`\n  SELECT w.*, pd.day_name, pd.day_type\n  FROM workouts w\n  LEFT JOIN program_days pd ON w.program_day_id = pd.id\n  WHERE w.user_id = ? AND w.date >= ? AND w.date <= ?\n  ORDER BY w.date DESC\n`);\n\nexport const stmtUpdateWorkoutStatus: Statement = db.prepare(`\n  UPDATE workouts\n  SET status = ?, started_at = ?, completed_at = ?, total_volume_kg = ?, average_rir = ?\n  WHERE id = ?\n`);\n\nexport const stmtUpdateWorkoutProgramDay: Statement = db.prepare(`\n  UPDATE workouts\n  SET program_day_id = ?\n  WHERE id = ?\n`);\n\nexport const stmtGetWorkoutById: Statement = db.prepare(`\n  SELECT * FROM workouts WHERE id = ?\n`);\n\nexport const stmtValidateProgramDayOwnership: Statement = db.prepare(`\n  SELECT pd.id\n  FROM program_days pd\n  JOIN programs p ON pd.program_id = p.id\n  WHERE pd.id = ? AND p.user_id = ?\n`);\n\n// Set Operations\nexport const stmtLogSet: Statement = db.prepare(`\n  INSERT INTO sets (workout_id, exercise_id, set_number, weight_kg, reps, rir, timestamp, notes, synced)\n  VALUES (?, ?, ?, ?, ?, ?, ?, ?, 1)\n`);\n\nexport const stmtGetSetsByWorkout: Statement = db.prepare(`\n  SELECT s.*, e.name as exercise_name\n  FROM sets s\n  JOIN exercises e ON s.exercise_id = e.id\n  WHERE s.workout_id = ?\n  ORDER BY s.set_number\n`);\n\nexport const stmtGetSetByLocalId: Statement = db.prepare(`\n  SELECT * FROM sets WHERE id = ? AND workout_id = ?\n`);\n\nexport const stmtGetUnsyncedSets: Statement = db.prepare(`\n  SELECT * FROM sets WHERE synced = 0 LIMIT ?\n`);\n\nexport const stmtMarkSetSynced: Statement = db.prepare(`\n  UPDATE sets SET synced = 1 WHERE id = ?\n`);\n\n// Recovery Assessment Operations\nexport const stmtCreateRecoveryAssessment: Statement = db.prepare(`\n  INSERT INTO recovery_assessments (\n    user_id, date, sleep_quality, muscle_soreness, mental_motivation,\n    total_score, volume_adjustment, timestamp, synced\n  )\n  VALUES (?, ?, ?, ?, ?, ?, ?, ?, 1)\n`);\n\nexport const stmtGetRecoveryAssessmentByDate: Statement = db.prepare(`\n  SELECT * FROM recovery_assessments\n  WHERE user_id = ? AND date = ?\n`);\n\n// VO2max Session Operations\nexport const stmtCreateVO2maxSession: Statement = db.prepare(`\n  INSERT INTO vo2max_sessions (\n    workout_id, protocol, duration_seconds, intervals_completed,\n    average_hr, peak_hr, estimated_vo2max, synced\n  )\n  VALUES (?, ?, ?, ?, ?, ?, ?, 1)\n`);\n\nexport const stmtGetVO2maxSessionByWorkout: Statement = db.prepare(`\n  SELECT * FROM vo2max_sessions WHERE workout_id = ?\n`);\n\n// Analytics Queries\nexport const stmt1RMProgression: Statement = db.prepare(`\n  SELECT\n    w.date,\n    MAX(s.weight_kg * (1 + (s.reps - s.rir) / 30.0)) as estimated_1rm\n  FROM sets s\n  JOIN workouts w ON s.workout_id = w.id\n  WHERE w.user_id = ? AND s.exercise_id = ? AND w.date >= ? AND w.date <= ?\n  GROUP BY w.date\n  ORDER BY w.date\n`);\n\nexport const stmtVolumeTrends: Statement = db.prepare(`\n  SELECT\n    strftime('%Y-%W', w.date) as week,\n    COUNT(s.id) as total_sets\n  FROM sets s\n  JOIN workouts w ON s.workout_id = w.id\n  JOIN exercises e ON s.exercise_id = e.id\n  WHERE w.user_id = ?\n    AND w.date >= ? AND w.date <= ?\n    AND e.muscle_groups LIKE '%' || ? || '%'\n  GROUP BY week\n  ORDER BY week\n`);\n\nexport const stmtConsistencyMetrics: Statement = db.prepare(`\n  SELECT\n    COUNT(CASE WHEN status = 'completed' THEN 1 END) as completed_workouts,\n    COUNT(*) as total_workouts,\n    AVG(CASE WHEN completed_at IS NOT NULL THEN completed_at - started_at END) as avg_session_duration\n  FROM workouts\n  WHERE user_id = ?\n`);\n\n// Active Session Operations\nexport const stmtGetActiveSession: Statement = db.prepare(`\n  SELECT * FROM active_sessions WHERE user_id = ?\n`);\n\nexport const stmtCreateActiveSession: Statement = db.prepare(`\n  INSERT OR REPLACE INTO active_sessions (\n    user_id, workout_id, current_exercise_index, started_at, last_activity_at, state\n  )\n  VALUES (?, ?, ?, ?, ?, ?)\n`);\n\nexport const stmtUpdateActiveSession: Statement = db.prepare(`\n  UPDATE active_sessions\n  SET current_exercise_index = ?, last_activity_at = ?, state = ?\n  WHERE user_id = ?\n`);\n\nexport const stmtDeleteActiveSession: Statement = db.prepare(`\n  DELETE FROM active_sessions WHERE user_id = ?\n`);\n\n// Audit Log Operations\nexport const stmtCreateAuditLog: Statement = db.prepare(`\n  INSERT INTO audit_logs (user_id, event_type, ip_address, timestamp, details)\n  VALUES (?, ?, ?, ?, ?)\n`);\n\nexport const stmtGetAuditLogsByUser: Statement = db.prepare(`\n  SELECT * FROM audit_logs\n  WHERE user_id = ?\n  ORDER BY timestamp DESC\n  LIMIT ?\n`);\n\n// ============================================================================\n// Helper Functions\n// ============================================================================\n\n/**\n * Calculate estimated 1RM using Epley formula with RIR adjustment\n * Formula: 1RM = weight × (1 + (reps - rir) / 30)\n */\nexport const calculateOneRepMax = (weight: number, reps: number, rir: number): number => {\n  return weight * (1 + (reps - rir) / 30);\n};\n\n/**\n * Calculate recovery score auto-regulation adjustment\n * Ranges: 12-15 = none, 9-11 = reduce_1_set, 6-8 = reduce_2_sets, 3-5 = rest_day\n */\nexport const calculateVolumeAdjustment = (\n  totalScore: number\n): 'none' | 'reduce_1_set' | 'reduce_2_sets' | 'rest_day' => {\n  if (totalScore >= 12) return 'none';\n  if (totalScore >= 9) return 'reduce_1_set';\n  if (totalScore >= 6) return 'reduce_2_sets';\n  return 'rest_day';\n};\n\n/**\n * Execute query with performance timing\n */\nexport const executeWithTiming = <T>(name: string, fn: () => T): T => {\n  const start = Date.now();\n  const result = fn();\n  const duration = Date.now() - start;\n\n  if (duration > 5) {\n    console.warn(`[PERFORMANCE WARNING] Query \"${name}\" took ${duration}ms (target: <5ms)`);\n  }\n\n  return result;\n};\n\n// ============================================================================\n// Transaction Helpers\n// ============================================================================\n\n/**\n * Execute function within transaction\n */\nexport const transaction = <T>(fn: () => T): T => {\n  return db.transaction(fn)();\n};\n\n/**\n * Batch insert with transaction\n */\nexport const batchInsert = <T>(stmt: Database.Statement, records: T[]): void => {\n  const insert = db.transaction((items: T[]) => {\n    for (const item of items) {\n      stmt.run(item);\n    }\n  });\n\n  insert(records);\n};\n\n// ============================================================================\n// Cleanup\n// ============================================================================\n\n/**\n * Close database connection\n */\nexport const closeDatabase = (): void => {\n  db.close();\n  console.log('Database connection closed');\n};\n\n// Handle process termination\nprocess.on('exit', () => {\n  closeDatabase();\n});\n\nprocess.on('SIGINT', () => {\n  closeDatabase();\n  process.exit(0);\n});\n\nprocess.on('SIGTERM', () => {\n  closeDatabase();\n  process.exit(0);\n});\n\nexport default db;\n"
        ],
        "sourceRoot": ""
      }
    }
  }
}
