{
  "result": [
    {
      "scriptId": "324",
      "url": "file:///home/asigator/fitness2025/backend/src/server.ts",
      "functions": [
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 0,
              "endOffset": 7602,
              "count": 1
            },
            {
              "startOffset": 1688,
              "endOffset": 1704,
              "count": 0
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "buildApp",
          "ranges": [
            {
              "startOffset": 530,
              "endOffset": 1319,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 933,
              "endOffset": 1008,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "start",
          "ranges": [
            {
              "startOffset": 1320,
              "endOffset": 1634,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "357",
      "url": "file:///home/asigator/fitness2025/backend/src/routes/auth.ts",
      "functions": [
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 0,
              "endOffset": 23642,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "authRoutes",
          "ranges": [
            {
              "startOffset": 2947,
              "endOffset": 6097,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 3035,
              "endOffset": 3956,
              "count": 6
            },
            {
              "startOffset": 3308,
              "endOffset": 3362,
              "count": 0
            },
            {
              "startOffset": 3796,
              "endOffset": 3950,
              "count": 0
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 3268,
              "endOffset": 3306,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 4004,
              "endOffset": 4836,
              "count": 3
            },
            {
              "startOffset": 4206,
              "endOffset": 4248,
              "count": 1
            },
            {
              "startOffset": 4248,
              "endOffset": 4260,
              "count": 0
            },
            {
              "startOffset": 4451,
              "endOffset": 4830,
              "count": 2
            },
            {
              "startOffset": 4683,
              "endOffset": 4830,
              "count": 0
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 4166,
              "endOffset": 4204,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 4905,
              "endOffset": 6093,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "358",
      "url": "file:///home/asigator/fitness2025/backend/src/routes/workouts.ts",
      "functions": [
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 0,
              "endOffset": 24330,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "workoutRoutes",
          "ranges": [
            {
              "startOffset": 4175,
              "endOffset": 6745,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 4323,
              "endOffset": 5025,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 5134,
              "endOffset": 5629,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 6273,
              "endOffset": 6741,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "359",
      "url": "file:///home/asigator/fitness2025/backend/src/routes/recovery.ts",
      "functions": [
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 0,
              "endOffset": 12650,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "recoveryRoutes",
          "ranges": [
            {
              "startOffset": 1660,
              "endOffset": 3201,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 1824,
              "endOffset": 3197,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "360",
      "url": "file:///home/asigator/fitness2025/backend/src/routes/analytics.ts",
      "functions": [
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 0,
              "endOffset": 19529,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "analyticsRoutes",
          "ranges": [
            {
              "startOffset": 2928,
              "endOffset": 5088,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 3097,
              "endOffset": 3866,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 3990,
              "endOffset": 4521,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 4649,
              "endOffset": 5084,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "362",
      "url": "file:///home/asigator/fitness2025/backend/src/routes/sets.ts",
      "functions": [
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 0,
              "endOffset": 16820,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "setRoutes",
          "ranges": [
            {
              "startOffset": 2693,
              "endOffset": 4571,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 2787,
              "endOffset": 3374,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 3474,
              "endOffset": 4567,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "364",
      "url": "file:///home/asigator/fitness2025/backend/src/services/authService.ts",
      "functions": [
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 0,
              "endOffset": 8585,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "registerUser",
          "ranges": [
            {
              "startOffset": 173,
              "endOffset": 814,
              "count": 6
            },
            {
              "startOffset": 409,
              "endOffset": 580,
              "count": 0
            },
            {
              "startOffset": 592,
              "endOffset": 599,
              "count": 0
            },
            {
              "startOffset": 618,
              "endOffset": 625,
              "count": 0
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "loginUser",
          "ranges": [
            {
              "startOffset": 822,
              "endOffset": 1368,
              "count": 3
            },
            {
              "startOffset": 947,
              "endOffset": 1002,
              "count": 1
            },
            {
              "startOffset": 1002,
              "endOffset": 1109,
              "count": 2
            },
            {
              "startOffset": 1109,
              "endOffset": 1367,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        }
      ]
    },
    {
      "scriptId": "365",
      "url": "file:///home/asigator/fitness2025/backend/src/middleware/auth.ts",
      "functions": [
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 0,
              "endOffset": 2805,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "authenticateJWT",
          "ranges": [
            {
              "startOffset": 7,
              "endOffset": 248,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "366",
      "url": "file:///home/asigator/fitness2025/backend/src/database/db.ts",
      "functions": [
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 0,
              "endOffset": 26893,
              "count": 1
            },
            {
              "startOffset": 450,
              "endOffset": 498,
              "count": 0
            },
            {
              "startOffset": 593,
              "endOffset": 606,
              "count": 0
            },
            {
              "startOffset": 1192,
              "endOffset": 1219,
              "count": 0
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "initializeSchema",
          "ranges": [
            {
              "startOffset": 784,
              "endOffset": 917,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "isInitialized",
          "ranges": [
            {
              "startOffset": 941,
              "endOffset": 1168,
              "count": 1
            },
            {
              "startOffset": 1131,
              "endOffset": 1166,
              "count": 0
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "calculateOneRepMax",
          "ranges": [
            {
              "startOffset": 5760,
              "endOffset": 5831,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "calculateVolumeAdjustment",
          "ranges": [
            {
              "startOffset": 5874,
              "endOffset": 6078,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "executeWithTiming",
          "ranges": [
            {
              "startOffset": 6113,
              "endOffset": 6372,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "transaction",
          "ranges": [
            {
              "startOffset": 6401,
              "endOffset": 6445,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "batchInsert",
          "ranges": [
            {
              "startOffset": 6474,
              "endOffset": 6646,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "closeDatabase",
          "ranges": [
            {
              "startOffset": 6677,
              "endOffset": 6749,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 6770,
              "endOffset": 6800,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 6824,
              "endOffset": 6875,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 6900,
              "endOffset": 6951,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "367",
      "url": "file:///home/asigator/fitness2025/backend/src/services/auditService.ts",
      "functions": [
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 0,
              "endOffset": 7833,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "logAuthEvent",
          "ranges": [
            {
              "startOffset": 63,
              "endOffset": 224,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "logDataExport",
          "ranges": [
            {
              "startOffset": 232,
              "endOffset": 460,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "logAccountDeletion",
          "ranges": [
            {
              "startOffset": 468,
              "endOffset": 713,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "getAuditLogsByUser",
          "ranges": [
            {
              "startOffset": 721,
              "endOffset": 961,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "getAuditLogsByDateRange",
          "ranges": [
            {
              "startOffset": 969,
              "endOffset": 1280,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "368",
      "url": "file:///home/asigator/fitness2025/backend/src/services/workoutService.ts",
      "functions": [
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 0,
              "endOffset": 10974,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "createWorkout",
          "ranges": [
            {
              "startOffset": 147,
              "endOffset": 561,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "getProgramExercises",
          "ranges": [
            {
              "startOffset": 562,
              "endOffset": 859,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "listWorkouts",
          "ranges": [
            {
              "startOffset": 867,
              "endOffset": 1583,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "updateWorkoutStatus",
          "ranges": [
            {
              "startOffset": 1591,
              "endOffset": 1969,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "369",
      "url": "file:///home/asigator/fitness2025/backend/src/services/recoveryService.ts",
      "functions": [
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 0,
              "endOffset": 7389,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "createAssessment",
          "ranges": [
            {
              "startOffset": 100,
              "endOffset": 1376,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "370",
      "url": "file:///home/asigator/fitness2025/backend/src/services/analyticsService.ts",
      "functions": [
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 0,
              "endOffset": 11162,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "get1RMProgression",
          "ranges": [
            {
              "startOffset": 714,
              "endOffset": 1000,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "getVolumeTrends",
          "ranges": [
            {
              "startOffset": 1008,
              "endOffset": 1431,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "getConsistencyMetrics",
          "ranges": [
            {
              "startOffset": 1439,
              "endOffset": 1841,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "398",
      "url": "file:///home/asigator/fitness2025/backend/src/services/setService.ts",
      "functions": [
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 0,
              "endOffset": 10948,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "logSet",
          "ranges": [
            {
              "startOffset": 79,
              "endOffset": 1841,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "getSetsForWorkout",
          "ranges": [
            {
              "startOffset": 1849,
              "endOffset": 2135,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        }
      ]
    }
  ],
  "timestamp": 301.532274,
  "source-map-cache": {
    "file:///home/asigator/fitness2025/backend/src/server.ts": {
      "lineLengths": [
        30,
        33,
        31,
        42,
        49,
        41,
        50,
        52,
        87,
        54,
        43,
        34,
        25,
        17,
        51,
        10,
        25,
        7,
        30,
        21,
        26,
        7,
        29,
        27,
        15,
        29,
        10,
        7,
        36,
        55,
        7,
        55,
        58,
        54,
        59,
        60,
        15,
        1,
        24,
        9,
        37,
        53,
        75,
        5,
        17,
        54,
        24,
        5,
        1,
        54,
        12,
        1,
        24,
        5872
      ],
      "data": {
        "version": 3,
        "file": "/home/asigator/fitness2025/backend/src/server.ts",
        "sources": [
          "file:///home/asigator/fitness2025/backend/src/server.ts"
        ],
        "names": [],
        "mappings": "AAMA,OAAO,OAAO,MAAM,SAAS,CAAC;AAC9B,OAAO,IAAI,MAAM,eAAe,CAAC;AACjC,OAAO,GAAG,MAAM,cAAc,CAAC;AAC/B,OAAO,UAAU,MAAM,kBAAkB,CAAC;AAC1C,OAAO,aAAa,MAAM,sBAAsB,CAAC;AACjD,OAAO,SAAS,MAAM,kBAAkB,CAAC;AACzC,OAAO,cAAc,MAAM,sBAAsB,CAAC;AAClD,OAAO,eAAe,MAAM,uBAAuB,CAAC;AAEpD,MAAM,UAAU,GAAG,OAAO,CAAC,GAAG,CAAC,UAAU,IAAI,yCAAyC,CAAC;AACvF,MAAM,IAAI,GAAG,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,IAAI,MAAM,EAAE,EAAE,CAAC,CAAC;AACtD,MAAM,IAAI,GAAG,OAAO,CAAC,GAAG,CAAC,IAAI,IAAI,SAAS,CAAC;AAK3C,MAAM,CAAC,KAAK,UAAU,QAAQ;IAC5B,MAAM,GAAG,GAAG,OAAO,CAAC;QAClB,MAAM,EAAE;YACN,KAAK,EAAE,OAAO,CAAC,GAAG,CAAC,SAAS,IAAI,MAAM;SACvC;QACD,UAAU,EAAE,IAAI;KACjB,CAAC,CAAC;IAGH,MAAM,GAAG,CAAC,QAAQ,CAAC,IAAI,EAAE;QACvB,MAAM,EAAE,IAAI;QACZ,WAAW,EAAE,IAAI;KAClB,CAAC,CAAC;IAGH,MAAM,GAAG,CAAC,QAAQ,CAAC,GAAG,EAAE;QACtB,MAAM,EAAE,UAAU;QAClB,IAAI,EAAE;YACJ,SAAS,EAAE,KAAK;SACjB;KACF,CAAC,CAAC;IAGH,GAAG,CAAC,GAAG,CAAC,SAAS,EAAE,KAAK,IAAI,EAAE;QAC5B,OAAO,EAAE,MAAM,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE,EAAE,CAAC;IACjD,CAAC,CAAC,CAAC;IAGH,MAAM,GAAG,CAAC,QAAQ,CAAC,UAAU,EAAE,EAAE,MAAM,EAAE,MAAM,EAAE,CAAC,CAAC;IACnD,MAAM,GAAG,CAAC,QAAQ,CAAC,aAAa,EAAE,EAAE,MAAM,EAAE,MAAM,EAAE,CAAC,CAAC;IACtD,MAAM,GAAG,CAAC,QAAQ,CAAC,SAAS,EAAE,EAAE,MAAM,EAAE,MAAM,EAAE,CAAC,CAAC;IAClD,MAAM,GAAG,CAAC,QAAQ,CAAC,cAAc,EAAE,EAAE,MAAM,EAAE,MAAM,EAAE,CAAC,CAAC;IACvD,MAAM,GAAG,CAAC,QAAQ,CAAC,eAAe,EAAE,EAAE,MAAM,EAAE,MAAM,EAAE,CAAC,CAAC;IAExD,OAAO,GAAG,CAAC;AACb,CAAC;AAKD,KAAK,UAAU,KAAK;IAClB,IAAI,CAAC;QACH,MAAM,GAAG,GAAG,MAAM,QAAQ,EAAE,CAAC;QAC7B,MAAM,GAAG,CAAC,MAAM,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC;QAC7C,OAAO,CAAC,GAAG,CAAC,uCAAuC,IAAI,IAAI,IAAI,EAAE,CAAC,CAAC;IACrE,CAAC;IAAC,OAAO,GAAG,EAAE,CAAC;QACb,OAAO,CAAC,KAAK,CAAC,yBAAyB,EAAE,GAAG,CAAC,CAAC;QAC9C,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IAClB,CAAC;AACH,CAAC;AAGD,IAAI,MAAM,CAAC,IAAI,CAAC,GAAG,KAAK,UAAU,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;IACpD,KAAK,EAAE,CAAC;AACV,CAAC;AAED,eAAe,QAAQ,CAAC",
        "sourcesContent": [
          "/**\n * FitFlow Pro Backend Server\n *\n * Fastify API server with JWT authentication, SQLite database, and REST endpoints\n */\n\nimport Fastify from 'fastify';\nimport cors from '@fastify/cors';\nimport jwt from '@fastify/jwt';\nimport authRoutes from './routes/auth.js';\nimport workoutRoutes from './routes/workouts.js';\nimport setRoutes from './routes/sets.js';\nimport recoveryRoutes from './routes/recovery.js';\nimport analyticsRoutes from './routes/analytics.js';\n\nconst JWT_SECRET = process.env.JWT_SECRET || 'fitflow-dev-secret-change-in-production';\nconst PORT = parseInt(process.env.PORT || '3000', 10);\nconst HOST = process.env.HOST || '0.0.0.0';\n\n/**\n * Build Fastify application instance\n */\nexport async function buildApp() {\n  const app = Fastify({\n    logger: {\n      level: process.env.LOG_LEVEL || 'info',\n    },\n    trustProxy: true, // Required for Nginx reverse proxy (X-Forwarded-* headers)\n  });\n\n  // Register CORS\n  await app.register(cors, {\n    origin: true, // Allow all origins in development\n    credentials: true,\n  });\n\n  // Register JWT plugin\n  await app.register(jwt, {\n    secret: JWT_SECRET,\n    sign: {\n      expiresIn: '30d', // 30-day expiration (justified constitutional violation for home server)\n    },\n  });\n\n  // Health check endpoint\n  app.get('/health', async () => {\n    return { status: 'ok', timestamp: Date.now() };\n  });\n\n  // Register routes\n  await app.register(authRoutes, { prefix: '/api' });\n  await app.register(workoutRoutes, { prefix: '/api' });\n  await app.register(setRoutes, { prefix: '/api' });\n  await app.register(recoveryRoutes, { prefix: '/api' });\n  await app.register(analyticsRoutes, { prefix: '/api' });\n\n  return app;\n}\n\n/**\n * Start server (only if running directly, not in tests)\n */\nasync function start() {\n  try {\n    const app = await buildApp();\n    await app.listen({ port: PORT, host: HOST });\n    console.log(`FitFlow Pro API server listening on ${HOST}:${PORT}`);\n  } catch (err) {\n    console.error('Failed to start server:', err);\n    process.exit(1);\n  }\n}\n\n// Only start if this is the main module\nif (import.meta.url === `file://${process.argv[1]}`) {\n  start();\n}\n\nexport default buildApp;\n"
        ],
        "sourceRoot": ""
      }
    },
    "file:///home/asigator/fitness2025/backend/src/routes/auth.ts": {
      "lineLengths": [
        69,
        56,
        51,
        79,
        24,
        13,
        15,
        27,
        47,
        25,
        27,
        35,
        36,
        73,
        18,
        27,
        35,
        33,
        67,
        18,
        22,
        36,
        32,
        33,
        59,
        18,
        28,
        35,
        32,
        33,
        62,
        18,
        35,
        35,
        67,
        61,
        18,
        14,
        10,
        19,
        18,
        31,
        29,
        48,
        46,
        18,
        14,
        10,
        6,
        2,
        21,
        13,
        15,
        27,
        47,
        25,
        27,
        35,
        54,
        18,
        27,
        35,
        49,
        18,
        14,
        10,
        19,
        18,
        31,
        29,
        46,
        27,
        39,
        37,
        51,
        57,
        52,
        58,
        65,
        59,
        59,
        26,
        22,
        18,
        14,
        10,
        6,
        2,
        51,
        78,
        13,
        90,
        140,
        54,
        41,
        80,
        50,
        9,
        23,
        88,
        47,
        53,
        19,
        13,
        37,
        43,
        45,
        15,
        9,
        7,
        72,
        13,
        56,
        103,
        54,
        41,
        77,
        50,
        9,
        23,
        84,
        47,
        49,
        19,
        13,
        37,
        43,
        38,
        15,
        9,
        7,
        93,
        13,
        59,
        51,
        32,
        47,
        45,
        19,
        13,
        54,
        47,
        78,
        19,
        13,
        46,
        54,
        84,
        54,
        39,
        47,
        44,
        19,
        13,
        44,
        9,
        23,
        37,
        43,
        55,
        15,
        9,
        7,
        1,
        17544
      ],
      "data": {
        "version": 3,
        "file": "/home/asigator/fitness2025/backend/src/routes/auth.ts",
        "sources": [
          "file:///home/asigator/fitness2025/backend/src/routes/auth.ts"
        ],
        "names": [],
        "mappings": "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",
        "sourcesContent": [
          "/**\n * Authentication Routes\n *\n * Endpoints for user registration, login, and account deletion\n */\n\nimport { FastifyInstance, FastifyRequest, FastifyReply } from 'fastify';\nimport { registerUser, loginUser } from '../services/authService.js';\nimport { authenticateJWT, AuthenticatedRequest } from '../middleware/auth.js';\nimport { stmtDeleteUser } from '../database/db.js';\nimport { logAuthEvent, logAccountDeletion } from '../services/auditService.js';\n\n/**\n * Registration request schema\n */\nconst registerSchema = {\n  schema: {\n    body: {\n      type: 'object',\n      required: ['username', 'password'],\n      properties: {\n        username: {\n          type: 'string',\n          format: 'email',\n          description: 'User email address (used as username)',\n        },\n        password: {\n          type: 'string',\n          minLength: 8,\n          description: 'Password (minimum 8 characters)',\n        },\n        age: {\n          type: 'integer',\n          minimum: 13,\n          maximum: 100,\n          description: 'User age (13-100 years)',\n        },\n        weight_kg: {\n          type: 'number',\n          minimum: 30,\n          maximum: 300,\n          description: 'User weight in kg (30-300)',\n        },\n        experience_level: {\n          type: 'string',\n          enum: ['beginner', 'intermediate', 'advanced'],\n          description: 'Training experience level',\n        },\n      },\n    },\n    response: {\n      201: {\n        type: 'object',\n        properties: {\n          user_id: { type: 'number' },\n          token: { type: 'string' },\n        },\n      },\n    },\n  },\n};\n\n/**\n * Login request schema\n */\nconst loginSchema = {\n  schema: {\n    body: {\n      type: 'object',\n      required: ['username', 'password'],\n      properties: {\n        username: {\n          type: 'string',\n          description: 'User email address',\n        },\n        password: {\n          type: 'string',\n          description: 'User password',\n        },\n      },\n    },\n    response: {\n      200: {\n        type: 'object',\n        properties: {\n          token: { type: 'string' },\n          user: {\n            type: 'object',\n            properties: {\n              id: { type: 'number' },\n              username: { type: 'string' },\n              age: { type: 'number' },\n              weight_kg: { type: 'number' },\n              experience_level: { type: 'string' },\n              created_at: { type: 'number' },\n              updated_at: { type: 'number' },\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\n/**\n * Registration request body interface\n */\ninterface RegisterBody {\n  username: string;\n  password: string;\n  age?: number;\n  weight_kg?: number;\n  experience_level?: 'beginner' | 'intermediate' | 'advanced';\n}\n\n/**\n * Login request body interface\n */\ninterface LoginBody {\n  username: string;\n  password: string;\n}\n\n/**\n * Delete user route params interface\n */\ninterface DeleteUserParams {\n  id: string;\n}\n\n/**\n * Register authentication routes\n */\nexport default async function authRoutes(fastify: FastifyInstance) {\n  /**\n   * POST /api/auth/register\n   *\n   * Register a new user with email (username), password, and optional profile data\n   * Returns user_id and JWT token on success\n   */\n  fastify.post<{ Body: RegisterBody }>(\n    '/auth/register',\n    registerSchema,\n    async (request: FastifyRequest<{ Body: RegisterBody }>, reply: FastifyReply) => {\n      try {\n        const { username, password, age, weight_kg, experience_level } = request.body;\n\n        // Call authentication service\n        const result = await registerUser(\n          username,\n          password,\n          age,\n          weight_kg,\n          experience_level,\n          (payload) => fastify.jwt.sign(payload)\n        );\n\n        // Log successful registration\n        const ipAddress = request.ip || 'unknown';\n        const timestamp = Date.now();\n        logAuthEvent(result.user_id, 'auth_register', ipAddress, timestamp);\n\n        return reply.status(201).send(result);\n      } catch (error) {\n        // Handle duplicate username error\n        if (error instanceof Error && error.message === 'Username already exists') {\n          return reply.status(409).send({\n            error: 'Username already exists',\n          });\n        }\n\n        // Generic error\n        fastify.log.error(error);\n        return reply.status(400).send({\n          error: 'Registration failed',\n        });\n      }\n    }\n  );\n\n  /**\n   * POST /api/auth/login\n   *\n   * Login with username (email) and password\n   * Returns JWT token and user data on success\n   */\n  fastify.post<{ Body: LoginBody }>(\n    '/auth/login',\n    loginSchema,\n    async (request: FastifyRequest<{ Body: LoginBody }>, reply: FastifyReply) => {\n      try {\n        const { username, password } = request.body;\n\n        // Call authentication service\n        const result = await loginUser(\n          username,\n          password,\n          (payload) => fastify.jwt.sign(payload)\n        );\n\n        // Log successful login\n        const ipAddress = request.ip || 'unknown';\n        const timestamp = Date.now();\n        logAuthEvent(result.user.id, 'auth_login', ipAddress, timestamp);\n\n        return reply.status(200).send(result);\n      } catch (error) {\n        // Handle invalid credentials error\n        if (error instanceof Error && error.message === 'Invalid credentials') {\n          return reply.status(401).send({\n            error: 'Invalid credentials',\n          });\n        }\n\n        // Generic error\n        fastify.log.error(error);\n        return reply.status(401).send({\n          error: 'Login failed',\n        });\n      }\n    }\n  );\n\n  /**\n   * DELETE /api/users/:id\n   *\n   * Delete user account (requires JWT authentication)\n   * User can only delete their own account\n   * Cascade deletes all related data: workouts, sets, recovery assessments, programs\n   * Returns 204 No Content on success\n   */\n  fastify.delete<{ Params: DeleteUserParams }>(\n    '/users/:id',\n    { preHandler: authenticateJWT },\n    async (request: FastifyRequest<{ Params: DeleteUserParams }>, reply: FastifyReply) => {\n      try {\n        const userId = parseInt(request.params.id, 10);\n        const authenticatedUser = (request as AuthenticatedRequest).user;\n\n        // Validate user ID\n        if (isNaN(userId)) {\n          return reply.status(400).send({\n            error: 'Invalid user ID',\n          });\n        }\n\n        // Users can only delete their own account\n        if (authenticatedUser.userId !== userId) {\n          return reply.status(403).send({\n            error: 'Forbidden - You can only delete your own account',\n          });\n        }\n\n        // Log deletion to audit log before deleting user\n        const auditTimestamp = Date.now();\n        const ipAddress = request.ip || 'unknown';\n        logAccountDeletion(userId, auditTimestamp, ipAddress, 'user_initiated');\n\n        // Delete user (cascade delete handled by database foreign keys)\n        // ON DELETE CASCADE will remove:\n        // - workouts → sets (via workout_id FK)\n        // - recovery_assessments\n        // - vo2max_sessions (via workout_id FK)\n        // - programs\n        // - active_sessions\n        // - audit_logs\n        const result = stmtDeleteUser.run(userId);\n\n        if (result.changes === 0) {\n          return reply.status(404).send({\n            error: 'User not found',\n          });\n        }\n\n        // Return 204 No Content on success (no body)\n        return reply.status(204).send();\n      } catch (error) {\n        fastify.log.error(error);\n        return reply.status(500).send({\n          error: 'Failed to delete user account',\n        });\n      }\n    }\n  );\n}\n"
        ],
        "sourceRoot": ""
      }
    },
    "file:///home/asigator/fitness2025/backend/src/routes/workouts.ts": {
      "lineLengths": [
        97,
        56,
        29,
        13,
        15,
        27,
        49,
        25,
        33,
        36,
        80,
        18,
        23,
        35,
        54,
        67,
        18,
        14,
        10,
        19,
        18,
        31,
        29,
        43,
        48,
        55,
        45,
        61,
        63,
        29,
        39,
        87,
        22,
        66,
        62,
        47,
        18,
        14,
        10,
        6,
        2,
        28,
        13,
        22,
        27,
        25,
        29,
        35,
        54,
        66,
        18,
        27,
        35,
        54,
        64,
        18,
        14,
        10,
        19,
        18,
        30,
        24,
        35,
        33,
        47,
        52,
        59,
        49,
        65,
        67,
        33,
        43,
        91,
        26,
        70,
        66,
        51,
        63,
        35,
        53,
        63,
        26,
        36,
        42,
        36,
        47,
        45,
        59,
        71,
        68,
        70,
        68,
        61,
        61,
        60,
        34,
        30,
        26,
        22,
        18,
        14,
        10,
        6,
        2,
        54,
        31,
        31,
        36,
        34,
        13,
        58,
        51,
        90,
        51,
        9,
        23,
        83,
        47,
        41,
        19,
        13,
        37,
        43,
        50,
        15,
        9,
        7,
        30,
        30,
        36,
        34,
        13,
        59,
        51,
        90,
        52,
        9,
        23,
        37,
        43,
        49,
        15,
        9,
        7,
        36,
        36,
        17,
        21,
        31,
        29,
        43,
        18,
        33,
        14,
        19,
        31,
        29,
        29,
        39,
        87,
        22,
        18,
        37,
        14,
        10,
        34,
        13,
        62,
        44,
        67,
        51,
        9,
        23,
        37,
        43,
        50,
        15,
        9,
        7,
        1,
        17584
      ],
      "data": {
        "version": 3,
        "file": "/home/asigator/fitness2025/backend/src/routes/workouts.ts",
        "sources": [
          "file:///home/asigator/fitness2025/backend/src/routes/workouts.ts"
        ],
        "names": [],
        "mappings": "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",
        "sourcesContent": [
          "/**\n * Workout Routes\n *\n * REST endpoints for workout session management:\n * - POST /api/workouts - Create new workout session\n * - GET /api/workouts - List user's workouts with optional date filtering\n */\n\nimport { FastifyInstance, FastifyRequest, FastifyReply } from 'fastify';\nimport { createWorkout, listWorkouts, updateWorkoutStatus } from '../services/workoutService.js';\nimport { authenticateJWT, AuthenticatedRequest } from '../middleware/auth.js';\n\n/**\n * Create workout request body interface\n */\ninterface CreateWorkoutBody {\n  program_day_id: number;\n  date: string;\n}\n\n/**\n * List workouts query parameters interface\n */\ninterface ListWorkoutsQuery {\n  start_date?: string;\n  end_date?: string;\n}\n\n/**\n * Create workout request schema\n */\nconst createWorkoutSchema = {\n  schema: {\n    body: {\n      type: 'object',\n      required: ['program_day_id', 'date'],\n      properties: {\n        program_day_id: {\n          type: 'integer',\n          description: 'ID of the program day (e.g., Push A, Pull A)',\n        },\n        date: {\n          type: 'string',\n          pattern: '^\\\\d{4}-\\\\d{2}-\\\\d{2}$',\n          description: 'Date in ISO format (YYYY-MM-DD)',\n        },\n      },\n    },\n    response: {\n      201: {\n        type: 'object',\n        properties: {\n          id: { type: 'number' },\n          user_id: { type: 'number' },\n          program_day_id: { type: 'number' },\n          date: { type: 'string' },\n          started_at: { type: ['number', 'null'] },\n          completed_at: { type: ['number', 'null'] },\n          status: {\n            type: 'string',\n            enum: ['not_started', 'in_progress', 'completed', 'cancelled'],\n          },\n          total_volume_kg: { type: ['number', 'null'] },\n          average_rir: { type: ['number', 'null'] },\n          synced: { type: 'number' },\n        },\n      },\n    },\n  },\n};\n\n/**\n * List workouts request schema\n */\nconst listWorkoutsSchema = {\n  schema: {\n    querystring: {\n      type: 'object',\n      properties: {\n        start_date: {\n          type: 'string',\n          pattern: '^\\\\d{4}-\\\\d{2}-\\\\d{2}$',\n          description: 'Start date filter (YYYY-MM-DD)',\n        },\n        end_date: {\n          type: 'string',\n          pattern: '^\\\\d{4}-\\\\d{2}-\\\\d{2}$',\n          description: 'End date filter (YYYY-MM-DD)',\n        },\n      },\n    },\n    response: {\n      200: {\n        type: 'array',\n        items: {\n          type: 'object',\n          properties: {\n            id: { type: 'number' },\n            user_id: { type: 'number' },\n            program_day_id: { type: 'number' },\n            date: { type: 'string' },\n            started_at: { type: ['number', 'null'] },\n            completed_at: { type: ['number', 'null'] },\n            status: {\n              type: 'string',\n              enum: ['not_started', 'in_progress', 'completed', 'cancelled'],\n            },\n            total_volume_kg: { type: ['number', 'null'] },\n            average_rir: { type: ['number', 'null'] },\n            synced: { type: 'number' },\n            day_name: { type: ['string', 'null'] },\n            day_type: {\n              type: ['string', 'null'],\n              enum: ['strength', 'vo2max', null],\n            },\n            exercises: {\n              type: 'array',\n              items: {\n                type: 'object',\n                properties: {\n                  id: { type: 'number' },\n                  program_day_id: { type: 'number' },\n                  exercise_id: { type: 'number' },\n                  exercise_name: { type: 'string' },\n                  order_index: { type: 'number' },\n                  sets: { type: 'number' },\n                  reps: { type: 'string' },\n                  rir: { type: 'number' },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\n/**\n * Register workout routes\n */\nexport default async function workoutRoutes(fastify: FastifyInstance) {\n  /**\n   * POST /api/workouts\n   *\n   * Create a new workout session for the authenticated user\n   * Returns the created workout object with status=not_started\n   *\n   * Requires JWT authentication\n   */\n  fastify.post<{ Body: CreateWorkoutBody }>(\n    '/workouts',\n    {\n      ...createWorkoutSchema,\n      preHandler: authenticateJWT,\n    },\n    async (\n      request: FastifyRequest<{ Body: CreateWorkoutBody }>,\n      reply: FastifyReply\n    ) => {\n      try {\n        const { program_day_id, date } = request.body;\n        const authenticatedUser = (request as AuthenticatedRequest).user;\n\n        // Create workout for authenticated user\n        const workout = createWorkout(\n          authenticatedUser.userId,\n          program_day_id,\n          date\n        );\n\n        return reply.status(201).send(workout);\n      } catch (error) {\n        // Handle validation errors\n        if (error instanceof Error && error.message.includes('Invalid date')) {\n          return reply.status(400).send({\n            error: error.message,\n          });\n        }\n\n        // Generic error\n        fastify.log.error(error);\n        return reply.status(500).send({\n          error: 'Failed to create workout',\n        });\n      }\n    }\n  );\n\n  /**\n   * GET /api/workouts\n   *\n   * List workouts for the authenticated user\n   * Optional query parameters for date filtering:\n   * - start_date: Return workouts on or after this date (YYYY-MM-DD)\n   * - end_date: Return workouts on or before this date (YYYY-MM-DD)\n   *\n   * Requires JWT authentication\n   */\n  fastify.get<{ Querystring: ListWorkoutsQuery }>(\n    '/workouts',\n    {\n      ...listWorkoutsSchema,\n      preHandler: authenticateJWT,\n    },\n    async (\n      request: FastifyRequest<{ Querystring: ListWorkoutsQuery }>,\n      reply: FastifyReply\n    ) => {\n      try {\n        const { start_date, end_date } = request.query;\n        const authenticatedUser = (request as AuthenticatedRequest).user;\n\n        // List workouts for authenticated user with optional date filters\n        const workouts = listWorkouts(\n          authenticatedUser.userId,\n          start_date,\n          end_date\n        );\n\n        return reply.status(200).send(workouts);\n      } catch (error) {\n        // Generic error\n        fastify.log.error(error);\n        return reply.status(500).send({\n          error: 'Failed to list workouts',\n        });\n      }\n    }\n  );\n\n  /**\n   * PATCH /api/workouts/:id\n   *\n   * Update workout status (e.g., mark as completed)\n   *\n   * Requires JWT authentication\n   */\n  fastify.patch<{\n    Params: { id: string };\n    Body: { status: 'not_started' | 'in_progress' | 'completed' | 'cancelled' };\n  }>(\n    '/workouts/:id',\n    {\n      preHandler: authenticateJWT,\n      schema: {\n        params: {\n          type: 'object',\n          properties: {\n            id: { type: 'string' },\n          },\n          required: ['id'],\n        },\n        body: {\n          type: 'object',\n          properties: {\n            status: {\n              type: 'string',\n              enum: ['not_started', 'in_progress', 'completed', 'cancelled'],\n            },\n          },\n          required: ['status'],\n        },\n      },\n    },\n    async (request, reply) => {\n      try {\n        const workoutId = parseInt(request.params.id, 10);\n        const { status } = request.body;\n\n        const workout = updateWorkoutStatus(workoutId, status);\n        return reply.status(200).send(workout);\n      } catch (error) {\n        fastify.log.error(error);\n        return reply.status(500).send({\n          error: 'Failed to update workout',\n        });\n      }\n    }\n  );\n}\n"
        ],
        "sourceRoot": ""
      }
    },
    "file:///home/asigator/fitness2025/backend/src/routes/recovery.ts": {
      "lineLengths": [
        66,
        56,
        32,
        13,
        15,
        27,
        88,
        25,
        23,
        35,
        54,
        78,
        18,
        32,
        36,
        31,
        31,
        68,
        18,
        34,
        36,
        31,
        31,
        70,
        18,
        36,
        36,
        31,
        31,
        72,
        18,
        14,
        10,
        19,
        18,
        31,
        29,
        52,
        40,
        39,
        84,
        22,
        18,
        14,
        10,
        6,
        2,
        55,
        43,
        34,
        36,
        34,
        13,
        93,
        47,
        109,
        50,
        9,
        23,
        41,
        61,
        71,
        47,
        41,
        19,
        13,
        41,
        74,
        47,
        45,
        19,
        13,
        41,
        69,
        47,
        78,
        19,
        13,
        37,
        43,
        62,
        15,
        9,
        7,
        1,
        9448
      ],
      "data": {
        "version": 3,
        "file": "/home/asigator/fitness2025/backend/src/routes/recovery.ts",
        "sources": [
          "file:///home/asigator/fitness2025/backend/src/routes/recovery.ts"
        ],
        "names": [],
        "mappings": "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",
        "sourcesContent": [
          "/**\n * Recovery Assessment Routes\n *\n * REST endpoints for daily recovery check-in and auto-regulation:\n * - POST /api/recovery-assessments - Submit daily 3-question assessment\n */\n\nimport { FastifyInstance, FastifyRequest, FastifyReply } from 'fastify';\nimport { createAssessment } from '../services/recoveryService.js';\nimport { authenticateJWT } from '../middleware/auth.js';\n\n/**\n * Recovery assessment request body interface\n */\ninterface CreateAssessmentBody {\n  date: string;\n  sleep_quality: number;\n  muscle_soreness: number;\n  mental_motivation: number;\n}\n\n/**\n * Recovery assessment request schema\n */\nconst createAssessmentSchema = {\n  schema: {\n    body: {\n      type: 'object',\n      required: ['date', 'sleep_quality', 'muscle_soreness', 'mental_motivation'],\n      properties: {\n        date: {\n          type: 'string',\n          pattern: '^\\\\d{4}-\\\\d{2}-\\\\d{2}$',\n          description: 'Assessment date in ISO format (YYYY-MM-DD)',\n        },\n        sleep_quality: {\n          type: 'integer',\n          minimum: 1,\n          maximum: 5,\n          description: 'Sleep quality rating (1-5 scale)',\n        },\n        muscle_soreness: {\n          type: 'integer',\n          minimum: 1,\n          maximum: 5,\n          description: 'Muscle soreness rating (1-5 scale)',\n        },\n        mental_motivation: {\n          type: 'integer',\n          minimum: 1,\n          maximum: 5,\n          description: 'Mental motivation rating (1-5 scale)',\n        },\n      },\n    },\n    response: {\n      201: {\n        type: 'object',\n        properties: {\n          total_score: { type: 'number' },\n          volume_adjustment: {\n            type: 'string',\n            enum: ['none', 'reduce_1_set', 'reduce_2_sets', 'rest_day'],\n          },\n        },\n      },\n    },\n  },\n};\n\n/**\n * Register recovery assessment routes\n */\nexport default async function recoveryRoutes(fastify: FastifyInstance) {\n  /**\n   * POST /api/recovery-assessments\n   *\n   * Create a daily recovery assessment for auto-regulation\n   *\n   * Calculates total score from 3 subscores (sleep, soreness, motivation)\n   * and determines volume adjustment per FR-009:\n   * - 12-15: No adjustment\n   * - 9-11: Reduce by 1 set per exercise\n   * - 6-8: Reduce by 2 sets per exercise\n   * - 3-5: Rest day recommended\n   *\n   * Validation rules (per FR-008):\n   * - date: ISO format YYYY-MM-DD\n   * - sleep_quality: 1-5\n   * - muscle_soreness: 1-5\n   * - mental_motivation: 1-5\n   *\n   * Requires JWT authentication\n   */\n  fastify.post<{ Body: CreateAssessmentBody }>(\n    '/recovery-assessments',\n    {\n      ...createAssessmentSchema,\n      preHandler: authenticateJWT,\n    },\n    async (\n      request: FastifyRequest<{ Body: CreateAssessmentBody }>,\n      reply: FastifyReply\n    ) => {\n      try {\n        const { date, sleep_quality, muscle_soreness, mental_motivation } = request.body;\n\n        // Get authenticated user ID\n        // @ts-expect-error - jwtVerify attaches user to request\n        const userId = request.user.userId;\n\n        // Create recovery assessment\n        const result = createAssessment(\n          userId,\n          date,\n          sleep_quality,\n          muscle_soreness,\n          mental_motivation\n        );\n\n        return reply.status(201).send(result);\n      } catch (error) {\n        // Handle validation errors\n        if (\n          error instanceof Error &&\n          (error.message.includes('must be between') ||\n            error.message.includes('must be in ISO format'))\n        ) {\n          return reply.status(400).send({\n            error: error.message,\n          });\n        }\n\n        // Handle database errors\n        if (\n          error instanceof Error &&\n          error.message.includes('FOREIGN KEY constraint failed')\n        ) {\n          return reply.status(400).send({\n            error: 'Invalid user_id',\n          });\n        }\n\n        // Handle unique constraint violations (duplicate assessment for date)\n        if (\n          error instanceof Error &&\n          error.message.includes('UNIQUE constraint failed')\n        ) {\n          return reply.status(400).send({\n            error: 'Recovery assessment already exists for this date',\n          });\n        }\n\n        // Generic error\n        fastify.log.error(error);\n        return reply.status(500).send({\n          error: 'Failed to create recovery assessment',\n        });\n      }\n    }\n  );\n}\n"
        ],
        "sourceRoot": ""
      }
    },
    "file:///home/asigator/fitness2025/backend/src/routes/analytics.ts": {
      "lineLengths": [
        109,
        56,
        32,
        13,
        22,
        27,
        64,
        25,
        30,
        35,
        47,
        18,
        29,
        35,
        54,
        59,
        18,
        27,
        35,
        54,
        57,
        18,
        14,
        10,
        19,
        18,
        30,
        24,
        35,
        33,
        49,
        58,
        22,
        18,
        14,
        10,
        6,
        2,
        28,
        13,
        22,
        27,
        65,
        25,
        31,
        35,
        78,
        18,
        29,
        35,
        54,
        59,
        18,
        27,
        35,
        54,
        57,
        18,
        14,
        10,
        19,
        18,
        30,
        24,
        35,
        33,
        49,
        55,
        48,
        48,
        48,
        22,
        18,
        14,
        10,
        6,
        2,
        34,
        13,
        19,
        18,
        31,
        29,
        55,
        61,
        55,
        18,
        14,
        10,
        6,
        2,
        56,
        47,
        34,
        36,
        34,
        13,
        72,
        51,
        57,
        36,
        47,
        49,
        19,
        13,
        110,
        55,
        9,
        23,
        37,
        43,
        60,
        15,
        9,
        7,
        45,
        30,
        36,
        34,
        13,
        73,
        51,
        105,
        50,
        9,
        23,
        37,
        43,
        58,
        15,
        9,
        7,
        43,
        36,
        36,
        34,
        13,
        51,
        76,
        51,
        9,
        23,
        37,
        43,
        64,
        15,
        9,
        7,
        1,
        14440
      ],
      "data": {
        "version": 3,
        "file": "/home/asigator/fitness2025/backend/src/routes/analytics.ts",
        "sources": [
          "file:///home/asigator/fitness2025/backend/src/routes/analytics.ts"
        ],
        "names": [],
        "mappings": "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",
        "sourcesContent": [
          "/**\n * Analytics Routes (T050-T052)\n *\n * Endpoints for 1RM progression, volume trends, and consistency metrics\n */\n\nimport { FastifyInstance, FastifyRequest, FastifyReply } from 'fastify';\nimport {\n  get1RMProgression,\n  getVolumeTrends,\n  getConsistencyMetrics,\n} from '../services/analyticsService.js';\nimport { authenticateJWT, AuthenticatedRequest } from '../middleware/auth.js';\n\n/**\n * Query params for 1RM progression\n */\ninterface OneRMProgressionQuery {\n  exercise_id: string;\n  start_date: string;\n  end_date: string;\n}\n\n/**\n * Query params for volume trends\n */\ninterface VolumeTrendsQuery {\n  muscle_group: string;\n  start_date: string;\n  end_date: string;\n}\n\n/**\n * Schema for 1RM progression endpoint\n */\nconst oneRMProgressionSchema = {\n  schema: {\n    querystring: {\n      type: 'object',\n      required: ['exercise_id', 'start_date', 'end_date'],\n      properties: {\n        exercise_id: {\n          type: 'string',\n          description: 'Exercise ID',\n        },\n        start_date: {\n          type: 'string',\n          pattern: '^\\\\d{4}-\\\\d{2}-\\\\d{2}$',\n          description: 'Start date (YYYY-MM-DD)',\n        },\n        end_date: {\n          type: 'string',\n          pattern: '^\\\\d{4}-\\\\d{2}-\\\\d{2}$',\n          description: 'End date (YYYY-MM-DD)',\n        },\n      },\n    },\n    response: {\n      200: {\n        type: 'array',\n        items: {\n          type: 'object',\n          properties: {\n            date: { type: 'string' },\n            estimated_1rm: { type: 'number' },\n          },\n        },\n      },\n    },\n  },\n};\n\n/**\n * Schema for volume trends endpoint\n */\nconst volumeTrendsSchema = {\n  schema: {\n    querystring: {\n      type: 'object',\n      required: ['muscle_group', 'start_date', 'end_date'],\n      properties: {\n        muscle_group: {\n          type: 'string',\n          description: 'Muscle group name (e.g., chest, back_lats)',\n        },\n        start_date: {\n          type: 'string',\n          pattern: '^\\\\d{4}-\\\\d{2}-\\\\d{2}$',\n          description: 'Start date (YYYY-MM-DD)',\n        },\n        end_date: {\n          type: 'string',\n          pattern: '^\\\\d{4}-\\\\d{2}-\\\\d{2}$',\n          description: 'End date (YYYY-MM-DD)',\n        },\n      },\n    },\n    response: {\n      200: {\n        type: 'array',\n        items: {\n          type: 'object',\n          properties: {\n            week: { type: 'string' },\n            total_sets: { type: 'number' },\n            mev: { type: 'number' },\n            mav: { type: 'number' },\n            mrv: { type: 'number' },\n          },\n        },\n      },\n    },\n  },\n};\n\n/**\n * Schema for consistency metrics endpoint\n */\nconst consistencyMetricsSchema = {\n  schema: {\n    response: {\n      200: {\n        type: 'object',\n        properties: {\n          adherence_rate: { type: 'number' },\n          avg_session_duration: { type: 'number' },\n          total_workouts: { type: 'number' },\n        },\n      },\n    },\n  },\n};\n\n/**\n * Register analytics routes\n */\nexport default async function analyticsRoutes(fastify: FastifyInstance) {\n  /**\n   * GET /api/analytics/1rm-progression (T050)\n   *\n   * Get estimated 1RM progression for an exercise over time\n   *\n   * Query params:\n   * - exercise_id: Exercise ID\n   * - start_date: Start date (YYYY-MM-DD)\n   * - end_date: End date (YYYY-MM-DD)\n   *\n   * Returns: Array of {date, estimated_1rm}\n   */\n  fastify.get<{ Querystring: OneRMProgressionQuery }>(\n    '/analytics/1rm-progression',\n    {\n      ...oneRMProgressionSchema,\n      preHandler: authenticateJWT,\n    },\n    async (\n      request: FastifyRequest<{ Querystring: OneRMProgressionQuery }>,\n      reply: FastifyReply\n    ) => {\n      try {\n        const { exercise_id, start_date, end_date } = request.query;\n        const authenticatedUser = (request as AuthenticatedRequest).user;\n\n        // Convert exercise_id to number\n        const exerciseId = parseInt(exercise_id, 10);\n        if (isNaN(exerciseId)) {\n          return reply.status(400).send({\n            error: 'Invalid exercise_id',\n          });\n        }\n\n        // Call analytics service\n        const progression = get1RMProgression(\n          authenticatedUser.userId,\n          exerciseId,\n          start_date,\n          end_date\n        );\n\n        return reply.status(200).send(progression);\n      } catch (error) {\n        fastify.log.error(error);\n        return reply.status(500).send({\n          error: 'Failed to retrieve 1RM progression',\n        });\n      }\n    }\n  );\n\n  /**\n   * GET /api/analytics/volume-trends (T051)\n   *\n   * Get volume trends for a muscle group over time with MEV/MAV/MRV landmarks\n   *\n   * Query params:\n   * - muscle_group: Muscle group name (e.g., chest, back_lats)\n   * - start_date: Start date (YYYY-MM-DD)\n   * - end_date: End date (YYYY-MM-DD)\n   *\n   * Returns: Array of {week, total_sets, mev, mav, mrv}\n   */\n  fastify.get<{ Querystring: VolumeTrendsQuery }>(\n    '/analytics/volume-trends',\n    {\n      ...volumeTrendsSchema,\n      preHandler: authenticateJWT,\n    },\n    async (\n      request: FastifyRequest<{ Querystring: VolumeTrendsQuery }>,\n      reply: FastifyReply\n    ) => {\n      try {\n        const { muscle_group, start_date, end_date } = request.query;\n        const authenticatedUser = (request as AuthenticatedRequest).user;\n\n        // Call analytics service\n        const trends = getVolumeTrends(\n          authenticatedUser.userId,\n          muscle_group,\n          start_date,\n          end_date\n        );\n\n        return reply.status(200).send(trends);\n      } catch (error) {\n        fastify.log.error(error);\n        return reply.status(500).send({\n          error: 'Failed to retrieve volume trends',\n        });\n      }\n    }\n  );\n\n  /**\n   * GET /api/analytics/consistency (T052)\n   *\n   * Get consistency metrics for the authenticated user\n   *\n   * Returns: {adherence_rate, avg_session_duration, total_workouts}\n   */\n  fastify.get(\n    '/analytics/consistency',\n    {\n      ...consistencyMetricsSchema,\n      preHandler: authenticateJWT,\n    },\n    async (request: FastifyRequest, reply: FastifyReply) => {\n      try {\n        const authenticatedUser = (request as AuthenticatedRequest).user;\n\n        // Call analytics service\n        const metrics = getConsistencyMetrics(authenticatedUser.userId);\n\n        return reply.status(200).send(metrics);\n      } catch (error) {\n        fastify.log.error(error);\n        return reply.status(500).send({\n          error: 'Failed to retrieve consistency metrics',\n        });\n      }\n    }\n  );\n}\n"
        ],
        "sourceRoot": ""
      }
    },
    "file:///home/asigator/fitness2025/backend/src/routes/sets.ts": {
      "lineLengths": [
        70,
        56,
        22,
        13,
        15,
        27,
        23,
        29,
        30,
        29,
        28,
        23,
        22,
        28,
        14,
        25,
        29,
        36,
        61,
        18,
        30,
        36,
        70,
        18,
        29,
        36,
        31,
        81,
        18,
        28,
        35,
        31,
        33,
        70,
        18,
        23,
        36,
        31,
        32,
        74,
        18,
        22,
        36,
        31,
        31,
        57,
        18,
        28,
        36,
        75,
        18,
        26,
        36,
        87,
        18,
        24,
        35,
        35,
        80,
        18,
        14,
        10,
        19,
        18,
        31,
        29,
        43,
        58,
        48,
        54,
        50,
        45,
        44,
        18,
        14,
        10,
        6,
        2,
        50,
        85,
        13,
        55,
        29,
        47,
        68,
        19,
        13,
        64,
        48,
        9,
        23,
        37,
        43,
        46,
        15,
        9,
        7,
        27,
        24,
        36,
        34,
        13,
        123,
        120,
        50,
        9,
        23,
        41,
        61,
        72,
        47,
        41,
        19,
        13,
        41,
        74,
        47,
        63,
        19,
        13,
        37,
        43,
        43,
        15,
        9,
        7,
        1,
        12248
      ],
      "data": {
        "version": 3,
        "file": "/home/asigator/fitness2025/backend/src/routes/sets.ts",
        "sources": [
          "file:///home/asigator/fitness2025/backend/src/routes/sets.ts"
        ],
        "names": [],
        "mappings": "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",
        "sourcesContent": [
          "/**\n * Set Logging Routes\n *\n * REST endpoints for exercise set tracking:\n * - POST /api/sets - Log individual exercise set with weight, reps, RIR\n */\n\nimport { FastifyInstance, FastifyRequest, FastifyReply } from 'fastify';\nimport { logSet, getSetsForWorkout } from '../services/setService.js';\nimport { authenticateJWT } from '../middleware/auth.js';\n\n/**\n * Log set request body interface\n */\ninterface LogSetBody {\n  workout_id: number;\n  exercise_id: number;\n  set_number: number;\n  weight_kg: number;\n  reps: number;\n  rir: number;\n  timestamp: number;\n  localId?: number;\n  notes?: string;\n}\n\n/**\n * Log set request schema\n */\nconst logSetSchema = {\n  schema: {\n    body: {\n      type: 'object',\n      required: [\n        'workout_id',\n        'exercise_id',\n        'set_number',\n        'weight_kg',\n        'reps',\n        'rir',\n        'timestamp',\n      ],\n      properties: {\n        workout_id: {\n          type: 'integer',\n          description: 'ID of the workout session',\n        },\n        exercise_id: {\n          type: 'integer',\n          description: 'ID of the exercise being performed',\n        },\n        set_number: {\n          type: 'integer',\n          minimum: 1,\n          description: 'Set number within the workout (1, 2, 3, etc.)',\n        },\n        weight_kg: {\n          type: 'number',\n          minimum: 0,\n          maximum: 500,\n          description: 'Weight lifted in kilograms (0-500)',\n        },\n        reps: {\n          type: 'integer',\n          minimum: 1,\n          maximum: 50,\n          description: 'Number of repetitions completed (1-50)',\n        },\n        rir: {\n          type: 'integer',\n          minimum: 0,\n          maximum: 4,\n          description: 'Reps in Reserve (0-4)',\n        },\n        timestamp: {\n          type: 'integer',\n          description: 'UTC milliseconds when set was completed',\n        },\n        localId: {\n          type: 'integer',\n          description: 'Optional local ID from mobile app for deduplication',\n        },\n        notes: {\n          type: 'string',\n          maxLength: 500,\n          description: 'Optional notes about the set (max 500 chars)',\n        },\n      },\n    },\n    response: {\n      201: {\n        type: 'object',\n        properties: {\n          id: { type: 'number' },\n          localId: { type: ['number', 'null'] },\n          synced: { type: 'boolean' },\n          estimated_1rm: { type: 'number' },\n          weight_kg: { type: 'number' },\n          reps: { type: 'number' },\n          rir: { type: 'number' },\n        },\n      },\n    },\n  },\n};\n\n/**\n * Register set logging routes\n */\nexport default async function setRoutes(fastify: FastifyInstance) {\n  /**\n   * GET /api/sets\n   *\n   * Fetch sets for a workout session\n   * Query param: workout_id (required)\n   *\n   * Requires JWT authentication\n   */\n  fastify.get<{ Querystring: { workout_id?: string } }>(\n    '/sets',\n    { preHandler: authenticateJWT },\n    async (\n      request: FastifyRequest<{ Querystring: { workout_id?: string } }>,\n      reply: FastifyReply\n    ) => {\n      try {\n        const workoutId = request.query.workout_id;\n\n        if (!workoutId) {\n          return reply.status(400).send({\n            error: 'workout_id query parameter is required',\n          });\n        }\n\n        const sets = getSetsForWorkout(parseInt(workoutId));\n\n        return reply.status(200).send(sets);\n      } catch (error) {\n        fastify.log.error(error);\n        return reply.status(500).send({\n          error: 'Failed to fetch sets',\n        });\n      }\n    }\n  );\n\n  /**\n   * POST /api/sets\n   *\n   * Log an exercise set for a workout session\n   * Implements idempotent sync via localId deduplication\n   *\n   * Validation rules (per FR-005):\n   * - weight_kg: 0-500\n   * - reps: 1-50\n   * - rir: 0-4\n   * - notes: max 500 characters\n   *\n   * Requires JWT authentication\n   */\n  fastify.post<{ Body: LogSetBody }>(\n    '/sets',\n    {\n      ...logSetSchema,\n      preHandler: authenticateJWT,\n    },\n    async (\n      request: FastifyRequest<{ Body: LogSetBody }>,\n      reply: FastifyReply\n    ) => {\n      try {\n        const {\n          workout_id,\n          exercise_id,\n          set_number,\n          weight_kg,\n          reps,\n          rir,\n          timestamp,\n          localId,\n          notes,\n        } = request.body;\n\n        // Log the set\n        const result = logSet(\n          workout_id,\n          exercise_id,\n          set_number,\n          weight_kg,\n          reps,\n          rir,\n          timestamp,\n          localId,\n          notes\n        );\n\n        return reply.status(201).send(result);\n      } catch (error) {\n        // Handle validation errors\n        if (\n          error instanceof Error &&\n          (error.message.includes('must be between') ||\n            error.message.includes('must be 500 characters'))\n        ) {\n          return reply.status(400).send({\n            error: error.message,\n          });\n        }\n\n        // Handle database errors\n        if (\n          error instanceof Error &&\n          error.message.includes('FOREIGN KEY constraint failed')\n        ) {\n          return reply.status(400).send({\n            error: 'Invalid workout_id or exercise_id',\n          });\n        }\n\n        // Generic error\n        fastify.log.error(error);\n        return reply.status(500).send({\n          error: 'Failed to log set',\n        });\n      }\n    }\n  );\n}\n"
        ],
        "sourceRoot": ""
      }
    },
    "file:///home/asigator/fitness2025/backend/src/services/authService.ts": {
      "lineLengths": [
        28,
        75,
        23,
        36,
        99,
        61,
        23,
        51,
        5,
        67,
        27,
        131,
        43,
        27,
        24,
        17,
        7,
        12,
        16,
        14,
        6,
        1,
        62,
        53,
        16,
        47,
        5,
        79,
        27,
        47,
        5,
        27,
        24,
        32,
        7,
        48,
        12,
        14,
        23,
        6,
        1,
        7216
      ],
      "data": {
        "version": 3,
        "file": "/home/asigator/fitness2025/backend/src/services/authService.ts",
        "sources": [
          "file:///home/asigator/fitness2025/backend/src/services/authService.ts"
        ],
        "names": [],
        "mappings": "AAOA,OAAO,MAAM,MAAM,QAAQ,CAAC;AAC5B,OAAO,EACL,qBAAqB,EACrB,cAAc,GACf,MAAM,mBAAmB,CAAC;AAG3B,MAAM,WAAW,GAAG,EAAE,CAAC;AAGvB,MAAM,CAAC,MAAM,cAAc,GAAG,KAAK,CAAC;AA2CpC,MAAM,CAAC,KAAK,UAAU,YAAY,CAChC,QAAgB,EAChB,QAAgB,EAChB,GAAuB,EACvB,SAA6B,EAC7B,gBAAsE,EACtE,OAAkE;IAGlE,MAAM,YAAY,GAAG,qBAAqB,CAAC,GAAG,CAAC,QAAQ,CAAqB,CAAC;IAC7E,IAAI,YAAY,EAAE,CAAC;QACjB,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC7C,CAAC;IAGD,MAAM,aAAa,GAAG,MAAM,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC;IAG/D,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;IACvB,MAAM,MAAM,GAAG,cAAc,CAAC,GAAG,CAC/B,QAAQ,EACR,aAAa,EACb,GAAG,IAAI,IAAI,EACX,SAAS,IAAI,IAAI,EACjB,gBAAgB,IAAI,IAAI,EACxB,GAAG,EACH,GAAG,CACJ,CAAC;IAEF,MAAM,OAAO,GAAG,MAAM,CAAC,eAAyB,CAAC;IAGjD,MAAM,KAAK,GAAG,OAAO,CAAC;QACpB,MAAM,EAAE,OAAO;QACf,QAAQ;KACT,CAAC,CAAC;IAEH,OAAO;QACL,OAAO;QACP,KAAK;KACN,CAAC;AACJ,CAAC;AAWD,MAAM,CAAC,KAAK,UAAU,SAAS,CAC7B,QAAgB,EAChB,QAAgB,EAChB,OAAkE;IAGlE,MAAM,IAAI,GAAG,qBAAqB,CAAC,GAAG,CAAC,QAAQ,CAElC,CAAC;IAEd,IAAI,CAAC,IAAI,EAAE,CAAC;QACV,MAAM,IAAI,KAAK,CAAC,qBAAqB,CAAC,CAAC;IACzC,CAAC;IAGD,MAAM,eAAe,GAAG,MAAM,MAAM,CAAC,OAAO,CAAC,QAAQ,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;IAC3E,IAAI,CAAC,eAAe,EAAE,CAAC;QACrB,MAAM,IAAI,KAAK,CAAC,qBAAqB,CAAC,CAAC;IACzC,CAAC;IAGD,MAAM,KAAK,GAAG,OAAO,CAAC;QACpB,MAAM,EAAE,IAAI,CAAC,EAAE;QACf,QAAQ,EAAE,IAAI,CAAC,QAAQ;KACxB,CAAC,CAAC;IAGH,MAAM,EAAE,aAAa,EAAE,GAAG,QAAQ,EAAE,GAAG,IAAI,CAAC;IAE5C,OAAO;QACL,KAAK;QACL,IAAI,EAAE,QAAQ;KACf,CAAC;AACJ,CAAC",
        "sourcesContent": [
          "/**\n * Authentication Service\n *\n * Implements user registration and login with bcrypt password hashing\n * and JWT token generation (30-day expiration per justified constitutional violation)\n */\n\nimport bcrypt from 'bcrypt';\nimport {\n  stmtGetUserByUsername,\n  stmtCreateUser,\n} from '../database/db.js';\n\n// Bcrypt cost factor (constitutional requirement)\nconst BCRYPT_COST = 12;\n\n// JWT expiration (30 days - justified violation for home server use case)\nexport const JWT_EXPIRATION = '30d';\n\n/**\n * User interface (excluding password_hash for security)\n */\nexport interface User {\n  id: number;\n  username: string;\n  age?: number;\n  weight_kg?: number;\n  experience_level?: 'beginner' | 'intermediate' | 'advanced';\n  created_at: number;\n  updated_at: number;\n}\n\n/**\n * Registration response\n */\nexport interface RegisterResponse {\n  user_id: number;\n  token: string;\n}\n\n/**\n * Login response\n */\nexport interface LoginResponse {\n  token: string;\n  user: User;\n}\n\n/**\n * Register a new user\n *\n * @param username - User's email address (used as username)\n * @param password - Plain text password (will be hashed with bcrypt cost=12)\n * @param age - Optional user age (13-100)\n * @param weight_kg - Optional user weight in kg (30-300)\n * @param experience_level - Optional experience level\n * @param jwtSign - Fastify JWT sign function\n * @returns Object containing user_id and JWT token\n * @throws Error if username already exists or database error occurs\n */\nexport async function registerUser(\n  username: string,\n  password: string,\n  age: number | undefined,\n  weight_kg: number | undefined,\n  experience_level: 'beginner' | 'intermediate' | 'advanced' | undefined,\n  jwtSign: (payload: { userId: number; username: string }) => string\n): Promise<RegisterResponse> {\n  // Check if username already exists\n  const existingUser = stmtGetUserByUsername.get(username) as User | undefined;\n  if (existingUser) {\n    throw new Error('Username already exists');\n  }\n\n  // Hash password with bcrypt (cost=12)\n  const password_hash = await bcrypt.hash(password, BCRYPT_COST);\n\n  // Insert user into database\n  const now = Date.now();\n  const result = stmtCreateUser.run(\n    username,\n    password_hash,\n    age ?? null,\n    weight_kg ?? null,\n    experience_level ?? null,\n    now,\n    now\n  );\n\n  const user_id = result.lastInsertRowid as number;\n\n  // Generate JWT token with 30-day expiration\n  const token = jwtSign({\n    userId: user_id,\n    username,\n  });\n\n  return {\n    user_id,\n    token,\n  };\n}\n\n/**\n * Login existing user\n *\n * @param username - User's email address\n * @param password - Plain text password\n * @param jwtSign - Fastify JWT sign function\n * @returns Object containing JWT token and user data\n * @throws Error if credentials are invalid\n */\nexport async function loginUser(\n  username: string,\n  password: string,\n  jwtSign: (payload: { userId: number; username: string }) => string\n): Promise<LoginResponse> {\n  // Get user by username\n  const user = stmtGetUserByUsername.get(username) as\n    | (User & { password_hash: string })\n    | undefined;\n\n  if (!user) {\n    throw new Error('Invalid credentials');\n  }\n\n  // Verify password with bcrypt\n  const isValidPassword = await bcrypt.compare(password, user.password_hash);\n  if (!isValidPassword) {\n    throw new Error('Invalid credentials');\n  }\n\n  // Generate JWT token\n  const token = jwtSign({\n    userId: user.id,\n    username: user.username,\n  });\n\n  // Return user data (excluding password_hash)\n  const { password_hash, ...userData } = user;\n\n  return {\n    token,\n    user: userData,\n  };\n}\n"
        ],
        "sourceRoot": ""
      }
    },
    "file:///home/asigator/fitness2025/backend/src/middleware/auth.ts": {
      "lineLengths": [
        55,
        9,
        34,
        5,
        19,
        39,
        61,
        11,
        5,
        1,
        2556
      ],
      "data": {
        "version": 3,
        "file": "/home/asigator/fitness2025/backend/src/middleware/auth.ts",
        "sources": [
          "file:///home/asigator/fitness2025/backend/src/middleware/auth.ts"
        ],
        "names": [],
        "mappings": "AA8BA,MAAM,CAAC,KAAK,UAAU,eAAe,CACnC,OAAuB,EACvB,KAAmB;IAEnB,IAAI,CAAC;QAEH,MAAM,OAAO,CAAC,SAAS,EAAE,CAAC;IAK5B,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QAEf,OAAO,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;YAC5B,KAAK,EAAE,yCAAyC;SACjD,CAAC,CAAC;IACL,CAAC;AACH,CAAC",
        "sourcesContent": [
          "/**\n * JWT Authentication Middleware\n *\n * Verifies JWT tokens from Authorization header and attaches user info to request\n */\n\nimport { FastifyRequest, FastifyReply } from 'fastify';\n\n/**\n * Extended FastifyRequest with authenticated user information\n */\nexport interface AuthenticatedRequest extends FastifyRequest {\n  user: {\n    userId: number;\n    username: string;\n  };\n}\n\n/**\n * JWT Authentication Middleware\n *\n * Verifies JWT from Authorization header (Bearer token format)\n * Attaches decoded user info to req.user for authenticated routes\n * Returns 401 if token is invalid, expired, or missing\n *\n * Usage:\n * fastify.addHook('preHandler', authenticateJWT)\n * OR\n * fastify.get('/protected', { preHandler: authenticateJWT }, handler)\n */\nexport async function authenticateJWT(\n  request: FastifyRequest,\n  reply: FastifyReply\n): Promise<void> {\n  try {\n    // Verify JWT token - Fastify JWT plugin automatically checks Authorization header\n    await request.jwtVerify();\n\n    // Token is valid, user payload is attached by @fastify/jwt\n    // The plugin attaches the decoded payload to request.user\n    // Type assertion needed because Fastify types don't know our payload structure\n  } catch (error) {\n    // Token is invalid, expired, or missing\n    return reply.status(401).send({\n      error: 'Unauthorized - Invalid or expired token',\n    });\n  }\n}\n"
        ],
        "sourceRoot": ""
      }
    },
    "file:///home/asigator/fitness2025/backend/src/database/db.ts": {
      "lineLengths": [
        38,
        57,
        37,
        36,
        50,
        38,
        57,
        69,
        33,
        27,
        44,
        1,
        41,
        78,
        3,
        32,
        33,
        35,
        31,
        32,
        54,
        20,
        47,
        2,
        29,
        9,
        25,
        90,
        19,
        24,
        5,
        11,
        21,
        5,
        2,
        23,
        23,
        1,
        90,
        78,
        42,
        103,
        30,
        3,
        75,
        45,
        70,
        36,
        3,
        49,
        38,
        17,
        55,
        21,
        22,
        3,
        58,
        38,
        17,
        55,
        53,
        22,
        3,
        51,
        17,
        72,
        14,
        3,
        38,
        104,
        36,
        3,
        48,
        37,
        13,
        42,
        24,
        23,
        3,
        47,
        52,
        3,
        47,
        45,
        3,
        45,
        41,
        3,
        56,
        36,
        69,
        53,
        3,
        36,
        3,
        59,
        36,
        32,
        3,
        51,
        31,
        64,
        49,
        3,
        33,
        3,
        57,
        52,
        3,
        46,
        8,
        11,
        69,
        13,
        40,
        75,
        17,
        17,
        3,
        44,
        8,
        38,
        29,
        13,
        40,
        42,
        21,
        35,
        44,
        15,
        15,
        3,
        50,
        8,
        75,
        31,
        102,
        15,
        19,
        3,
        48,
        49,
        3,
        51,
        42,
        84,
        3,
        27,
        3,
        51,
        24,
        65,
        19,
        3,
        51,
        47,
        3,
        46,
        78,
        24,
        3,
        50,
        26,
        19,
        25,
        9,
        3,
        58,
        44,
        2,
        58,
        25,
        22,
        24,
        30,
        24,
        31,
        22,
        2,
        48,
        29,
        24,
        40,
        23,
        96,
        5,
        18,
        2,
        36,
        32,
        2,
        47,
        46,
        35,
        27,
        9,
        7,
        20,
        2,
        36,
        15,
        46,
        2,
        26,
        20,
        3,
        28,
        20,
        20,
        3,
        29,
        20,
        20,
        3,
        18,
        19920
      ],
      "data": {
        "version": 3,
        "file": "/home/asigator/fitness2025/backend/src/database/db.ts",
        "sources": [
          "file:///home/asigator/fitness2025/backend/src/database/db.ts"
        ],
        "names": [],
        "mappings": "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",
        "sourcesContent": [
          "/**\n * Backend Database Initialization\n *\n * Initializes better-sqlite3 with performance optimizations:\n * - WAL mode for concurrent reads\n * - 64MB cache for query performance\n * - 256MB memory-mapped I/O\n * - Prepared statements for common queries\n */\n\nimport Database, { Statement } from 'better-sqlite3';\nimport { readFileSync, mkdirSync, existsSync } from 'fs';\nimport { join, dirname } from 'path';\nimport { fileURLToPath } from 'url';\n\n// Get the directory of this module file\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\n\n// Database file path - from dist/database to backend root\nconst DB_PATH = join(__dirname, '../../data/fitflow.db');\nconst SCHEMA_PATH = join(__dirname, '../../src/database/schema.sql');\n\n// Ensure data directory exists\nconst dataDir = dirname(DB_PATH);\nif (!existsSync(dataDir)) {\n  mkdirSync(dataDir, { recursive: true });\n}\n\n// Initialize database\nexport const db: Database.Database = new Database(DB_PATH, {\n  verbose: process.env.NODE_ENV === 'development' ? console.log : undefined,\n});\n\n// Apply performance optimizations\ndb.pragma('journal_mode = WAL');\ndb.pragma('cache_size = -64000'); // 64MB cache\ndb.pragma('mmap_size = 268435456'); // 256MB memory-mapped I/O\ndb.pragma('foreign_keys = ON');\n\n// Initialize schema on first run\nconst initializeSchema = (): void => {\n  const schema = readFileSync(SCHEMA_PATH, 'utf-8');\n  db.exec(schema);\n  console.log('Database schema initialized');\n};\n\n// Check if database is initialized (check for users table)\nconst isInitialized = (): boolean => {\n  try {\n    const result = db\n      .prepare(\n        \"SELECT name FROM sqlite_master WHERE type='table' AND name='users'\"\n      )\n      .get();\n    return !!result;\n  } catch {\n    return false;\n  }\n};\n\n// Initialize if needed\nif (!isInitialized()) {\n  initializeSchema();\n}\n\n// ============================================================================\n// Prepared Statements (Common Queries)\n// ============================================================================\n\n// User Operations\nexport const stmtGetUserByUsername: Statement = db.prepare(\n  'SELECT * FROM users WHERE username = ?'\n);\n\nexport const stmtGetUserById: Statement = db.prepare('SELECT * FROM users WHERE id = ?');\n\nexport const stmtCreateUser: Statement = db.prepare(`\n  INSERT INTO users (username, password_hash, age, weight_kg, experience_level, created_at, updated_at)\n  VALUES (?, ?, ?, ?, ?, ?, ?)\n`);\n\nexport const stmtDeleteUser: Statement = db.prepare('DELETE FROM users WHERE id = ?');\n\n// Workout Operations\nexport const stmtCreateWorkout: Statement = db.prepare(`\n  INSERT INTO workouts (user_id, program_day_id, date, status, synced)\n  VALUES (?, ?, ?, 'not_started', 1)\n`);\n\nexport const stmtGetWorkoutsByUser: Statement = db.prepare(`\n  SELECT w.*, pd.day_name, pd.day_type\n  FROM workouts w\n  LEFT JOIN program_days pd ON w.program_day_id = pd.id\n  WHERE w.user_id = ?\n  ORDER BY w.date DESC\n`);\n\nexport const stmtGetWorkoutsByUserDateRange: Statement = db.prepare(`\n  SELECT w.*, pd.day_name, pd.day_type\n  FROM workouts w\n  LEFT JOIN program_days pd ON w.program_day_id = pd.id\n  WHERE w.user_id = ? AND w.date >= ? AND w.date <= ?\n  ORDER BY w.date DESC\n`);\n\nexport const stmtUpdateWorkoutStatus: Statement = db.prepare(`\n  UPDATE workouts\n  SET status = ?, completed_at = ?, total_volume_kg = ?, average_rir = ?\n  WHERE id = ?\n`);\n\n// Set Operations\nexport const stmtLogSet: Statement = db.prepare(`\n  INSERT INTO sets (workout_id, exercise_id, set_number, weight_kg, reps, rir, timestamp, notes, synced)\n  VALUES (?, ?, ?, ?, ?, ?, ?, ?, 1)\n`);\n\nexport const stmtGetSetsByWorkout: Statement = db.prepare(`\n  SELECT s.*, e.name as exercise_name\n  FROM sets s\n  JOIN exercises e ON s.exercise_id = e.id\n  WHERE s.workout_id = ?\n  ORDER BY s.set_number\n`);\n\nexport const stmtGetSetByLocalId: Statement = db.prepare(`\n  SELECT * FROM sets WHERE id = ? AND workout_id = ?\n`);\n\nexport const stmtGetUnsyncedSets: Statement = db.prepare(`\n  SELECT * FROM sets WHERE synced = 0 LIMIT ?\n`);\n\nexport const stmtMarkSetSynced: Statement = db.prepare(`\n  UPDATE sets SET synced = 1 WHERE id = ?\n`);\n\n// Recovery Assessment Operations\nexport const stmtCreateRecoveryAssessment: Statement = db.prepare(`\n  INSERT INTO recovery_assessments (\n    user_id, date, sleep_quality, muscle_soreness, mental_motivation,\n    total_score, volume_adjustment, timestamp, synced\n  )\n  VALUES (?, ?, ?, ?, ?, ?, ?, ?, 1)\n`);\n\nexport const stmtGetRecoveryAssessmentByDate: Statement = db.prepare(`\n  SELECT * FROM recovery_assessments\n  WHERE user_id = ? AND date = ?\n`);\n\n// VO2max Session Operations\nexport const stmtCreateVO2maxSession: Statement = db.prepare(`\n  INSERT INTO vo2max_sessions (\n    workout_id, protocol, duration_seconds, intervals_completed,\n    average_hr, peak_hr, estimated_vo2max, synced\n  )\n  VALUES (?, ?, ?, ?, ?, ?, ?, 1)\n`);\n\nexport const stmtGetVO2maxSessionByWorkout: Statement = db.prepare(`\n  SELECT * FROM vo2max_sessions WHERE workout_id = ?\n`);\n\n// Analytics Queries\nexport const stmt1RMProgression: Statement = db.prepare(`\n  SELECT\n    w.date,\n    MAX(s.weight_kg * (1 + (s.reps - s.rir) / 30.0)) as estimated_1rm\n  FROM sets s\n  JOIN workouts w ON s.workout_id = w.id\n  WHERE w.user_id = ? AND s.exercise_id = ? AND w.date >= ? AND w.date <= ?\n  GROUP BY w.date\n  ORDER BY w.date\n`);\n\nexport const stmtVolumeTrends: Statement = db.prepare(`\n  SELECT\n    strftime('%Y-%W', w.date) as week,\n    COUNT(s.id) as total_sets\n  FROM sets s\n  JOIN workouts w ON s.workout_id = w.id\n  JOIN exercises e ON s.exercise_id = e.id\n  WHERE w.user_id = ?\n    AND w.date >= ? AND w.date <= ?\n    AND e.muscle_groups LIKE '%' || ? || '%'\n  GROUP BY week\n  ORDER BY week\n`);\n\nexport const stmtConsistencyMetrics: Statement = db.prepare(`\n  SELECT\n    COUNT(CASE WHEN status = 'completed' THEN 1 END) as completed_workouts,\n    COUNT(*) as total_workouts,\n    AVG(CASE WHEN completed_at IS NOT NULL THEN completed_at - started_at END) as avg_session_duration\n  FROM workouts\n  WHERE user_id = ?\n`);\n\n// Active Session Operations\nexport const stmtGetActiveSession: Statement = db.prepare(`\n  SELECT * FROM active_sessions WHERE user_id = ?\n`);\n\nexport const stmtCreateActiveSession: Statement = db.prepare(`\n  INSERT OR REPLACE INTO active_sessions (\n    user_id, workout_id, current_exercise_index, started_at, last_activity_at, state\n  )\n  VALUES (?, ?, ?, ?, ?, ?)\n`);\n\nexport const stmtUpdateActiveSession: Statement = db.prepare(`\n  UPDATE active_sessions\n  SET current_exercise_index = ?, last_activity_at = ?, state = ?\n  WHERE user_id = ?\n`);\n\nexport const stmtDeleteActiveSession: Statement = db.prepare(`\n  DELETE FROM active_sessions WHERE user_id = ?\n`);\n\n// Audit Log Operations\nexport const stmtCreateAuditLog: Statement = db.prepare(`\n  INSERT INTO audit_logs (user_id, event_type, ip_address, timestamp, details)\n  VALUES (?, ?, ?, ?, ?)\n`);\n\nexport const stmtGetAuditLogsByUser: Statement = db.prepare(`\n  SELECT * FROM audit_logs\n  WHERE user_id = ?\n  ORDER BY timestamp DESC\n  LIMIT ?\n`);\n\n// ============================================================================\n// Helper Functions\n// ============================================================================\n\n/**\n * Calculate estimated 1RM using Epley formula with RIR adjustment\n * Formula: 1RM = weight × (1 + (reps - rir) / 30)\n */\nexport const calculateOneRepMax = (\n  weight: number,\n  reps: number,\n  rir: number\n): number => {\n  return weight * (1 + (reps - rir) / 30);\n};\n\n/**\n * Calculate recovery score auto-regulation adjustment\n * Ranges: 12-15 = none, 9-11 = reduce_1_set, 6-8 = reduce_2_sets, 3-5 = rest_day\n */\nexport const calculateVolumeAdjustment = (\n  totalScore: number\n): 'none' | 'reduce_1_set' | 'reduce_2_sets' | 'rest_day' => {\n  if (totalScore >= 12) return 'none';\n  if (totalScore >= 9) return 'reduce_1_set';\n  if (totalScore >= 6) return 'reduce_2_sets';\n  return 'rest_day';\n};\n\n/**\n * Execute query with performance timing\n */\nexport const executeWithTiming = <T>(\n  name: string,\n  fn: () => T\n): T => {\n  const start = Date.now();\n  const result = fn();\n  const duration = Date.now() - start;\n\n  if (duration > 5) {\n    console.warn(\n      `[PERFORMANCE WARNING] Query \"${name}\" took ${duration}ms (target: <5ms)`\n    );\n  }\n\n  return result;\n};\n\n// ============================================================================\n// Transaction Helpers\n// ============================================================================\n\n/**\n * Execute function within transaction\n */\nexport const transaction = <T>(fn: () => T): T => {\n  return db.transaction(fn)();\n};\n\n/**\n * Batch insert with transaction\n */\nexport const batchInsert = <T>(\n  stmt: Database.Statement,\n  records: T[]\n): void => {\n  const insert = db.transaction((items: T[]) => {\n    for (const item of items) {\n      stmt.run(item);\n    }\n  });\n\n  insert(records);\n};\n\n// ============================================================================\n// Cleanup\n// ============================================================================\n\n/**\n * Close database connection\n */\nexport const closeDatabase = (): void => {\n  db.close();\n  console.log('Database connection closed');\n};\n\n// Handle process termination\nprocess.on('exit', () => {\n  closeDatabase();\n});\n\nprocess.on('SIGINT', () => {\n  closeDatabase();\n  process.exit(0);\n});\n\nprocess.on('SIGTERM', () => {\n  closeDatabase();\n  process.exit(0);\n});\n\nexport default db;\n"
        ],
        "sourceRoot": ""
      }
    },
    "file:///home/asigator/fitness2025/backend/src/services/auditService.ts": {
      "lineLengths": [
        55,
        80,
        85,
        1,
        73,
        64,
        94,
        1,
        74,
        75,
        99,
        1,
        57,
        54,
        28,
        21,
        27,
        11,
        5,
        35,
        1,
        84,
        54,
        28,
        43,
        27,
        11,
        5,
        57,
        1,
        6552
      ],
      "data": {
        "version": 3,
        "file": "/home/asigator/fitness2025/backend/src/services/auditService.ts",
        "sources": [
          "file:///home/asigator/fitness2025/backend/src/services/auditService.ts"
        ],
        "names": [],
        "mappings": "AAOA,OAAO,EAAE,kBAAkB,EAAE,MAAM,mBAAmB,CAAC;AAqBvD,MAAM,UAAU,YAAY,CAC1B,MAAc,EACd,SAAyD,EACzD,SAAiB,EACjB,SAAiB,EACjB,OAAgB;IAEhB,kBAAkB,CAAC,GAAG,CACpB,MAAM,EACN,SAAS,EACT,SAAS,EACT,SAAS,EACT,OAAO,IAAI,IAAI,CAChB,CAAC;AACJ,CAAC;AAUD,MAAM,UAAU,aAAa,CAC3B,MAAc,EACd,UAAkB,EAClB,SAAiB,EACjB,SAAkB;IAElB,MAAM,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,EAAE,WAAW,EAAE,UAAU,EAAE,CAAC,CAAC;IAC5D,kBAAkB,CAAC,GAAG,CACpB,MAAM,EACN,aAAa,EACb,SAAS,IAAI,SAAS,EACtB,SAAS,EACT,OAAO,CACR,CAAC;AACJ,CAAC;AAUD,MAAM,UAAU,kBAAkB,CAChC,MAAc,EACd,SAAiB,EACjB,SAAkB,EAClB,MAAe;IAEf,MAAM,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,EAAE,MAAM,EAAE,MAAM,IAAI,gBAAgB,EAAE,CAAC,CAAC;IACvE,kBAAkB,CAAC,GAAG,CACpB,MAAM,EACN,kBAAkB,EAClB,SAAS,IAAI,SAAS,EACtB,SAAS,EACT,OAAO,CACR,CAAC;AACJ,CAAC;AASD,MAAM,UAAU,kBAAkB,CAAC,MAAc,EAAE,QAAgB,GAAG;IACpE,MAAM,IAAI,GAAG,kBAAkB,CAAC,QAAQ,CAAC,OAAO,CAAC;;;;;GAKhD,CAAC,CAAC;IAEH,OAAO,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;AACjC,CAAC;AAUD,MAAM,UAAU,uBAAuB,CACrC,cAAsB,EACtB,YAAoB,EACpB,QAAgB,GAAG;IAEnB,MAAM,IAAI,GAAG,kBAAkB,CAAC,QAAQ,CAAC,OAAO,CAAC;;;;;GAKhD,CAAC,CAAC;IAEH,OAAO,IAAI,CAAC,GAAG,CAAC,cAAc,EAAE,YAAY,EAAE,KAAK,CAAC,CAAC;AACvD,CAAC",
        "sourcesContent": [
          "/**\n * Audit Logging Service\n *\n * Implements security audit logging for authentication events, data exports, and account deletions\n * Constitutional requirement: Security First (V) - audit logging\n */\n\nimport { stmtCreateAuditLog } from '../database/db.js';\n\n/**\n * Event types for audit logging\n */\nexport type AuditEventType =\n  | 'auth_login'\n  | 'auth_register'\n  | 'auth_logout'\n  | 'data_export'\n  | 'account_deletion';\n\n/**\n * Log authentication event (login, register, logout)\n *\n * @param userId - User ID who performed the action\n * @param eventType - Type of authentication event\n * @param ipAddress - IP address of the request\n * @param timestamp - Event timestamp (UTC milliseconds)\n * @param details - Optional additional context (JSON string)\n */\nexport function logAuthEvent(\n  userId: number,\n  eventType: 'auth_login' | 'auth_register' | 'auth_logout',\n  ipAddress: string,\n  timestamp: number,\n  details?: string\n): void {\n  stmtCreateAuditLog.run(\n    userId,\n    eventType,\n    ipAddress,\n    timestamp,\n    details ?? null\n  );\n}\n\n/**\n * Log data export event\n *\n * @param userId - User ID who performed the export\n * @param exportType - Type of data exported (e.g., 'csv_workouts', 'csv_analytics', 'database')\n * @param timestamp - Event timestamp (UTC milliseconds)\n * @param ipAddress - Optional IP address of the request\n */\nexport function logDataExport(\n  userId: number,\n  exportType: string,\n  timestamp: number,\n  ipAddress?: string\n): void {\n  const details = JSON.stringify({ export_type: exportType });\n  stmtCreateAuditLog.run(\n    userId,\n    'data_export',\n    ipAddress ?? 'unknown',\n    timestamp,\n    details\n  );\n}\n\n/**\n * Log account deletion event\n *\n * @param userId - User ID of the account being deleted\n * @param timestamp - Event timestamp (UTC milliseconds)\n * @param ipAddress - Optional IP address of the request\n * @param reason - Optional reason for deletion (e.g., 'user_initiated', 'admin_action')\n */\nexport function logAccountDeletion(\n  userId: number,\n  timestamp: number,\n  ipAddress?: string,\n  reason?: string\n): void {\n  const details = JSON.stringify({ reason: reason ?? 'user_initiated' });\n  stmtCreateAuditLog.run(\n    userId,\n    'account_deletion',\n    ipAddress ?? 'unknown',\n    timestamp,\n    details\n  );\n}\n\n/**\n * Get audit logs for a specific user\n *\n * @param userId - User ID to retrieve logs for\n * @param limit - Maximum number of logs to retrieve (default: 100)\n * @returns Array of audit log entries\n */\nexport function getAuditLogsByUser(userId: number, limit: number = 100) {\n  const stmt = stmtCreateAuditLog.database.prepare(`\n    SELECT * FROM audit_logs\n    WHERE user_id = ?\n    ORDER BY timestamp DESC\n    LIMIT ?\n  `);\n\n  return stmt.all(userId, limit);\n}\n\n/**\n * Get all audit logs within a date range\n *\n * @param startTimestamp - Start of date range (UTC milliseconds)\n * @param endTimestamp - End of date range (UTC milliseconds)\n * @param limit - Maximum number of logs to retrieve (default: 100)\n * @returns Array of audit log entries\n */\nexport function getAuditLogsByDateRange(\n  startTimestamp: number,\n  endTimestamp: number,\n  limit: number = 100\n) {\n  const stmt = stmtCreateAuditLog.database.prepare(`\n    SELECT * FROM audit_logs\n    WHERE timestamp >= ? AND timestamp <= ?\n    ORDER BY timestamp DESC\n    LIMIT ?\n  `);\n\n  return stmt.all(startTimestamp, endTimestamp, limit);\n}\n"
        ],
        "sourceRoot": ""
      }
    },
    "file:///home/asigator/fitness2025/backend/src/services/workoutService.ts": {
      "lineLengths": [
        139,
        59,
        44,
        68,
        5,
        69,
        45,
        22,
        55,
        24,
        19,
        1,
        44,
        13,
        54,
        32,
        48,
        34,
        36,
        27,
        1,
        58,
        17,
        31,
        82,
        5,
        25,
        62,
        66,
        5,
        23,
        62,
        64,
        5,
        10,
        53,
        5,
        39,
        19,
        63,
        8,
        1,
        83,
        67,
        107,
        22,
        55,
        24,
        19,
        1,
        9004
      ],
      "data": {
        "version": 3,
        "file": "/home/asigator/fitness2025/backend/src/services/workoutService.ts",
        "sources": [
          "file:///home/asigator/fitness2025/backend/src/services/workoutService.ts"
        ],
        "names": [],
        "mappings": "AASA,OAAO,EACL,iBAAiB,EACjB,qBAAqB,EACrB,8BAA8B,EAC9B,uBAAuB,EACvB,EAAE,GACH,MAAM,mBAAmB,CAAC;AA4B3B,MAAM,UAAU,aAAa,CAC3B,MAAc,EACd,YAAoB,EACpB,IAAY;IAGZ,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC;QACtC,MAAM,IAAI,KAAK,CAAC,0CAA0C,CAAC,CAAC;IAC9D,CAAC;IAGD,MAAM,MAAM,GAAG,iBAAiB,CAAC,GAAG,CAAC,MAAM,EAAE,YAAY,EAAE,IAAI,CAAC,CAAC;IACjE,MAAM,SAAS,GAAG,MAAM,CAAC,eAAyB,CAAC;IAGnD,MAAM,OAAO,GAAG,EAAE;SACf,OAAO,CAAC,qCAAqC,CAAC;SAC9C,GAAG,CAAC,SAAS,CAAY,CAAC;IAE7B,OAAO,OAAO,CAAC;AACjB,CAAC;AAQD,SAAS,mBAAmB,CAAC,YAAoB;IAC/C,OAAO,EAAE;SACN,OAAO,CACN;;;;mCAI6B,CAC9B;SACA,GAAG,CAAC,YAAY,CAAC,CAAC;AACvB,CAAC;AAWD,MAAM,UAAU,YAAY,CAC1B,MAAc,EACd,SAAkB,EAClB,OAAgB;IAEhB,IAAI,QAAmB,CAAC;IAGxB,IAAI,SAAS,IAAI,OAAO,EAAE,CAAC;QACzB,QAAQ,GAAG,8BAA8B,CAAC,GAAG,CAC3C,MAAM,EACN,SAAS,EACT,OAAO,CACK,CAAC;IACjB,CAAC;SAAM,IAAI,SAAS,EAAE,CAAC;QAErB,MAAM,WAAW,GAAG,qBAAqB,CAAC,GAAG,CAAC,MAAM,CAAc,CAAC;QACnE,QAAQ,GAAG,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,IAAI,SAAS,CAAC,CAAC;IAC5D,CAAC;SAAM,IAAI,OAAO,EAAE,CAAC;QAEnB,MAAM,WAAW,GAAG,qBAAqB,CAAC,GAAG,CAAC,MAAM,CAAc,CAAC;QACnE,QAAQ,GAAG,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,IAAI,OAAO,CAAC,CAAC;IAC1D,CAAC;SAAM,CAAC;QAEN,QAAQ,GAAG,qBAAqB,CAAC,GAAG,CAAC,MAAM,CAAc,CAAC;IAC5D,CAAC;IAGD,OAAO,QAAQ,CAAC,GAAG,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;QAChC,GAAG,OAAO;QACV,SAAS,EAAE,mBAAmB,CAAC,OAAO,CAAC,cAAc,CAAC;KACvD,CAAC,CAAC,CAAC;AACN,CAAC;AAWD,MAAM,UAAU,mBAAmB,CACjC,SAAiB,EACjB,MAAiE,EACjE,aAAsB,EACtB,UAAmB;IAGnB,MAAM,WAAW,GAAG,MAAM,KAAK,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC;IAG/D,uBAAuB,CAAC,GAAG,CACzB,MAAM,EACN,WAAW,EACX,aAAa,IAAI,IAAI,EACrB,UAAU,IAAI,IAAI,EAClB,SAAS,CACV,CAAC;IAGF,MAAM,OAAO,GAAG,EAAE;SACf,OAAO,CAAC,qCAAqC,CAAC;SAC9C,GAAG,CAAC,SAAS,CAAY,CAAC;IAE7B,OAAO,OAAO,CAAC;AACjB,CAAC",
        "sourcesContent": [
          "/**\n * Workout Service\n *\n * Business logic for workout session management:\n * - Creating new workout sessions\n * - Listing workouts with optional date filtering\n * - Updating workout status and metrics\n */\n\nimport {\n  stmtCreateWorkout,\n  stmtGetWorkoutsByUser,\n  stmtGetWorkoutsByUserDateRange,\n  stmtUpdateWorkoutStatus,\n  db,\n} from '../database/db.js';\n\n/**\n * Workout interface matching database schema + program day info\n */\nexport interface Workout {\n  id: number;\n  user_id: number;\n  program_day_id: number;\n  date: string; // ISO format: YYYY-MM-DD\n  started_at: number | null;\n  completed_at: number | null;\n  status: 'not_started' | 'in_progress' | 'completed' | 'cancelled';\n  total_volume_kg: number | null;\n  average_rir: number | null;\n  synced: number;\n  day_name: string | null; // Program day name (e.g., \"Push A (Chest-Focused)\")\n  day_type: 'strength' | 'vo2max' | null; // Program day type\n}\n\n/**\n * Create a new workout session\n *\n * @param userId - ID of the user creating the workout\n * @param programDayId - ID of the program day (e.g., Push A, Pull A)\n * @param date - Date in ISO format (YYYY-MM-DD)\n * @returns The created workout object\n */\nexport function createWorkout(\n  userId: number,\n  programDayId: number,\n  date: string\n): Workout {\n  // Validate date format (basic check)\n  if (!/^\\d{4}-\\d{2}-\\d{2}$/.test(date)) {\n    throw new Error('Invalid date format. Expected YYYY-MM-DD');\n  }\n\n  // Insert workout with default status=not_started\n  const result = stmtCreateWorkout.run(userId, programDayId, date);\n  const workoutId = result.lastInsertRowid as number;\n\n  // Return the created workout\n  const workout = db\n    .prepare('SELECT * FROM workouts WHERE id = ?')\n    .get(workoutId) as Workout;\n\n  return workout;\n}\n\n/**\n * Get exercises for a program day\n *\n * @param programDayId - Program day ID\n * @returns Array of exercises with sets/reps\n */\nfunction getProgramExercises(programDayId: number) {\n  return db\n    .prepare(\n      `SELECT pe.*, e.name as exercise_name\n       FROM program_exercises pe\n       JOIN exercises e ON pe.exercise_id = e.id\n       WHERE pe.program_day_id = ?\n       ORDER BY pe.order_index ASC`\n    )\n    .all(programDayId);\n}\n\n/**\n * List workouts for a user with optional date filtering\n * Includes program exercises for each workout\n *\n * @param userId - ID of the user\n * @param startDate - Optional start date filter (YYYY-MM-DD)\n * @param endDate - Optional end date filter (YYYY-MM-DD)\n * @returns Array of workout objects with exercises\n */\nexport function listWorkouts(\n  userId: number,\n  startDate?: string,\n  endDate?: string\n): any[] {\n  let workouts: Workout[];\n\n  // If both date filters provided, use date range query\n  if (startDate && endDate) {\n    workouts = stmtGetWorkoutsByUserDateRange.all(\n      userId,\n      startDate,\n      endDate\n    ) as Workout[];\n  } else if (startDate) {\n    // If only start date, filter in application layer\n    const allWorkouts = stmtGetWorkoutsByUser.all(userId) as Workout[];\n    workouts = allWorkouts.filter((w) => w.date >= startDate);\n  } else if (endDate) {\n    // If only end date, filter in application layer\n    const allWorkouts = stmtGetWorkoutsByUser.all(userId) as Workout[];\n    workouts = allWorkouts.filter((w) => w.date <= endDate);\n  } else {\n    // No filters, return all workouts\n    workouts = stmtGetWorkoutsByUser.all(userId) as Workout[];\n  }\n\n  // Attach exercises to each workout\n  return workouts.map((workout) => ({\n    ...workout,\n    exercises: getProgramExercises(workout.program_day_id),\n  }));\n}\n\n/**\n * Update workout status and metrics\n *\n * @param workoutId - ID of the workout to update\n * @param status - New status (in_progress, completed, cancelled)\n * @param totalVolumeKg - Optional total volume in kg (sets × reps × weight)\n * @param averageRir - Optional average RIR across all sets\n * @returns The updated workout object\n */\nexport function updateWorkoutStatus(\n  workoutId: number,\n  status: 'not_started' | 'in_progress' | 'completed' | 'cancelled',\n  totalVolumeKg?: number,\n  averageRir?: number\n): Workout {\n  // Calculate completed_at timestamp if status is completed\n  const completedAt = status === 'completed' ? Date.now() : null;\n\n  // Update workout\n  stmtUpdateWorkoutStatus.run(\n    status,\n    completedAt,\n    totalVolumeKg ?? null,\n    averageRir ?? null,\n    workoutId\n  );\n\n  // Return updated workout\n  const workout = db\n    .prepare('SELECT * FROM workouts WHERE id = ?')\n    .get(workoutId) as Workout;\n\n  return workout;\n}\n"
        ],
        "sourceRoot": ""
      }
    },
    "file:///home/asigator/fitness2025/backend/src/services/recoveryService.ts": {
      "lineLengths": [
        92,
        96,
        47,
        65,
        5,
        51,
        67,
        5,
        55,
        69,
        5,
        44,
        32,
        67,
        5,
        72,
        67,
        33,
        140,
        79,
        84,
        75,
        12,
        32,
        44,
        6,
        1,
        6012
      ],
      "data": {
        "version": 3,
        "file": "/home/asigator/fitness2025/backend/src/services/recoveryService.ts",
        "sources": [
          "file:///home/asigator/fitness2025/backend/src/services/recoveryService.ts"
        ],
        "names": [],
        "mappings": "AASA,OAAO,EAAE,4BAA4B,EAAE,yBAAyB,EAAE,MAAM,mBAAmB,CAAC;AA8B5F,MAAM,UAAU,gBAAgB,CAC9B,MAAc,EACd,IAAY,EACZ,YAAoB,EACpB,cAAsB,EACtB,gBAAwB;IAGxB,IAAI,YAAY,GAAG,CAAC,IAAI,YAAY,GAAG,CAAC,EAAE,CAAC;QACzC,MAAM,IAAI,KAAK,CAAC,uCAAuC,CAAC,CAAC;IAC3D,CAAC;IACD,IAAI,cAAc,GAAG,CAAC,IAAI,cAAc,GAAG,CAAC,EAAE,CAAC;QAC7C,MAAM,IAAI,KAAK,CAAC,yCAAyC,CAAC,CAAC;IAC7D,CAAC;IACD,IAAI,gBAAgB,GAAG,CAAC,IAAI,gBAAgB,GAAG,CAAC,EAAE,CAAC;QACjD,MAAM,IAAI,KAAK,CAAC,2CAA2C,CAAC,CAAC;IAC/D,CAAC;IAGD,MAAM,SAAS,GAAG,qBAAqB,CAAC;IACxC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC;QAC1B,MAAM,IAAI,KAAK,CAAC,yCAAyC,CAAC,CAAC;IAC7D,CAAC;IAGD,MAAM,UAAU,GAAG,YAAY,GAAG,cAAc,GAAG,gBAAgB,CAAC;IAGpE,MAAM,gBAAgB,GAAG,yBAAyB,CAAC,UAAU,CAAC,CAAC;IAG/D,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;IAC7B,4BAA4B,CAAC,GAAG,CAC9B,MAAM,EACN,IAAI,EACJ,YAAY,EACZ,cAAc,EACd,gBAAgB,EAChB,UAAU,EACV,gBAAgB,EAChB,SAAS,CACV,CAAC;IAGF,OAAO,CAAC,GAAG,CACT,qCAAqC,MAAM,UAAU,IAAI,IAAI;QAC3D,SAAS,UAAU,WAAW,YAAY,cAAc,cAAc,IAAI;QAC1E,cAAc,gBAAgB,iBAAiB,gBAAgB,EAAE,CACpE,CAAC;IAEF,OAAO;QACL,WAAW,EAAE,UAAU;QACvB,iBAAiB,EAAE,gBAAgB;KACpC,CAAC;AACJ,CAAC",
        "sourcesContent": [
          "/**\n * Recovery Assessment Service\n *\n * Business logic for daily recovery check-in and auto-regulation:\n * - 3-question assessment (sleep, soreness, motivation) on 1-5 scale\n * - Total score calculation (3-15 range)\n * - Volume adjustment logic per FR-009\n */\n\nimport { stmtCreateRecoveryAssessment, calculateVolumeAdjustment } from '../database/db.js';\n\n/**\n * Recovery assessment response interface\n */\nexport interface RecoveryAssessmentResponse {\n  total_score: number;\n  volume_adjustment: 'none' | 'reduce_1_set' | 'reduce_2_sets' | 'rest_day';\n}\n\n/**\n * Create a new recovery assessment\n *\n * Calculates total recovery score from 3 subscores (sleep quality,\n * muscle soreness, mental motivation) and determines volume adjustment\n * based on auto-regulation logic per FR-008 and FR-009.\n *\n * Auto-Regulation Logic (FR-009):\n * - Score 12-15: No adjustment (good recovery)\n * - Score 9-11: Reduce by 1 set per exercise\n * - Score 6-8: Reduce by 2 sets per exercise\n * - Score 3-5: Rest day recommended\n *\n * @param userId - ID of the user submitting assessment\n * @param date - Assessment date in ISO format (YYYY-MM-DD)\n * @param sleepQuality - Sleep quality rating (1-5 scale)\n * @param muscleSoreness - Muscle soreness rating (1-5 scale, inverted)\n * @param mentalMotivation - Mental motivation rating (1-5 scale)\n * @returns RecoveryAssessmentResponse with total_score and volume_adjustment\n */\nexport function createAssessment(\n  userId: number,\n  date: string,\n  sleepQuality: number,\n  muscleSoreness: number,\n  mentalMotivation: number\n): RecoveryAssessmentResponse {\n  // Validate input ranges (1-5 per FR-008)\n  if (sleepQuality < 1 || sleepQuality > 5) {\n    throw new Error('Sleep quality must be between 1 and 5');\n  }\n  if (muscleSoreness < 1 || muscleSoreness > 5) {\n    throw new Error('Muscle soreness must be between 1 and 5');\n  }\n  if (mentalMotivation < 1 || mentalMotivation > 5) {\n    throw new Error('Mental motivation must be between 1 and 5');\n  }\n\n  // Validate date format (ISO YYYY-MM-DD)\n  const dateRegex = /^\\d{4}-\\d{2}-\\d{2}$/;\n  if (!dateRegex.test(date)) {\n    throw new Error('Date must be in ISO format (YYYY-MM-DD)');\n  }\n\n  // Calculate total score (sum of 3 subscores, range 3-15)\n  const totalScore = sleepQuality + muscleSoreness + mentalMotivation;\n\n  // Determine volume adjustment based on total score (FR-009)\n  const volumeAdjustment = calculateVolumeAdjustment(totalScore);\n\n  // Insert recovery assessment into database\n  const timestamp = Date.now();\n  stmtCreateRecoveryAssessment.run(\n    userId,\n    date,\n    sleepQuality,\n    muscleSoreness,\n    mentalMotivation,\n    totalScore,\n    volumeAdjustment,\n    timestamp\n  );\n\n  // Log assessment for monitoring\n  console.log(\n    `Recovery assessment created: user=${userId}, date=${date}, ` +\n      `score=${totalScore} (sleep=${sleepQuality}, soreness=${muscleSoreness}, ` +\n      `motivation=${mentalMotivation}), adjustment=${volumeAdjustment}`\n  );\n\n  return {\n    total_score: totalScore,\n    volume_adjustment: volumeAdjustment,\n  };\n}\n"
        ],
        "sourceRoot": ""
      }
    },
    "file:///home/asigator/fitness2025/backend/src/services/analyticsService.ts": {
      "lineLengths": [
        98,
        26,
        40,
        45,
        45,
        49,
        49,
        49,
        41,
        42,
        40,
        45,
        41,
        41,
        38,
        2,
        75,
        83,
        34,
        23,
        63,
        8,
        1,
        74,
        82,
        82,
        34,
        23,
        35,
        27,
        27,
        27,
        8,
        1,
        47,
        54,
        108,
        12,
        64,
        63,
        46,
        6,
        1,
        9320
      ],
      "data": {
        "version": 3,
        "file": "/home/asigator/fitness2025/backend/src/services/analyticsService.ts",
        "sources": [
          "file:///home/asigator/fitness2025/backend/src/services/analyticsService.ts"
        ],
        "names": [],
        "mappings": "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",
        "sourcesContent": [
          "/**\n * Analytics Service (T047-T049)\n *\n * Provides analytics data for 1RM progression, volume trends, and consistency metrics.\n * Uses prepared statements from db.ts for optimal performance.\n */\n\nimport {\n  stmt1RMProgression,\n  stmtVolumeTrends,\n  stmtConsistencyMetrics,\n} from '../database/db.js';\n\n/**\n * Volume landmarks for muscle groups (from mobile constants)\n */\nconst VOLUME_LANDMARKS: Record<string, { mev: number; mav: number; mrv: number }> = {\n  chest: { mev: 8, mav: 14, mrv: 22 },\n  back_lats: { mev: 10, mav: 16, mrv: 26 },\n  back_traps: { mev: 6, mav: 12, mrv: 20 },\n  shoulders_front: { mev: 4, mav: 8, mrv: 14 },\n  shoulders_side: { mev: 8, mav: 16, mrv: 26 },\n  shoulders_rear: { mev: 8, mav: 14, mrv: 22 },\n  biceps: { mev: 6, mav: 12, mrv: 20 },\n  triceps: { mev: 6, mav: 12, mrv: 22 },\n  quads: { mev: 8, mav: 14, mrv: 24 },\n  hamstrings: { mev: 6, mav: 12, mrv: 20 },\n  glutes: { mev: 6, mav: 12, mrv: 20 },\n  calves: { mev: 8, mav: 14, mrv: 22 },\n  abs: { mev: 8, mav: 16, mrv: 28 },\n};\n\n/**\n * 1RM Progression Data Point\n */\nexport interface OneRMProgressionPoint {\n  date: string;\n  estimated_1rm: number;\n}\n\n/**\n * Volume Trends Data Point\n */\nexport interface VolumeTrendsPoint {\n  week: string;\n  total_sets: number;\n  mev: number;\n  mav: number;\n  mrv: number;\n}\n\n/**\n * Consistency Metrics\n */\nexport interface ConsistencyMetrics {\n  adherence_rate: number;\n  avg_session_duration: number;\n  total_workouts: number;\n}\n\n/**\n * Get 1RM progression for a specific exercise over time (T047)\n *\n * Calculates estimated 1RM using Epley formula with RIR adjustment:\n * 1RM = weight * (1 + (reps - rir) / 30)\n *\n * @param userId User ID\n * @param exerciseId Exercise ID\n * @param startDate Start date (YYYY-MM-DD)\n * @param endDate End date (YYYY-MM-DD)\n * @returns Array of {date, estimated_1rm} sorted by date\n */\nexport function get1RMProgression(\n  userId: number,\n  exerciseId: number,\n  startDate: string,\n  endDate: string\n): OneRMProgressionPoint[] {\n  const results = stmt1RMProgression.all(userId, exerciseId, startDate, endDate) as Array<{\n    date: string;\n    estimated_1rm: number;\n  }>;\n\n  return results.map((row) => ({\n    date: row.date,\n    estimated_1rm: Math.round(row.estimated_1rm * 10) / 10, // Round to 1 decimal place\n  }));\n}\n\n/**\n * Get volume trends for a muscle group over time (T048)\n *\n * Groups sets by ISO week and includes MEV/MAV/MRV landmarks.\n *\n * @param userId User ID\n * @param muscleGroup Muscle group name (e.g., 'chest', 'back_lats')\n * @param startDate Start date (YYYY-MM-DD)\n * @param endDate End date (YYYY-MM-DD)\n * @returns Array of {week, total_sets, mev, mav, mrv} sorted by week\n */\nexport function getVolumeTrends(\n  userId: number,\n  muscleGroup: string,\n  startDate: string,\n  endDate: string\n): VolumeTrendsPoint[] {\n  const results = stmtVolumeTrends.all(userId, startDate, endDate, muscleGroup) as Array<{\n    week: string;\n    total_sets: number;\n  }>;\n\n  // Get volume landmarks for this muscle group\n  const landmarks = VOLUME_LANDMARKS[muscleGroup] || { mev: 0, mav: 0, mrv: 0 };\n\n  return results.map((row) => ({\n    week: row.week,\n    total_sets: row.total_sets,\n    mev: landmarks.mev,\n    mav: landmarks.mav,\n    mrv: landmarks.mrv,\n  }));\n}\n\n/**\n * Get consistency metrics for a user (T049)\n *\n * Calculates:\n * - adherence_rate: completed_workouts / total_workouts (scheduled)\n * - avg_session_duration: mean duration in seconds\n * - total_workouts: count of all workouts\n *\n * @param userId User ID\n * @returns Consistency metrics object\n */\nexport function getConsistencyMetrics(userId: number): ConsistencyMetrics {\n  const result = stmtConsistencyMetrics.get(userId) as {\n    completed_workouts: number;\n    total_workouts: number;\n    avg_session_duration: number | null;\n  };\n\n  // Calculate adherence rate (avoid division by zero)\n  const adherenceRate =\n    result.total_workouts > 0 ? result.completed_workouts / result.total_workouts : 0;\n\n  return {\n    adherence_rate: Math.round(adherenceRate * 1000) / 1000, // Round to 3 decimal places\n    avg_session_duration: result.avg_session_duration || 0,\n    total_workouts: result.total_workouts,\n  };\n}\n"
        ],
        "sourceRoot": ""
      }
    },
    "file:///home/asigator/fitness2025/backend/src/services/setService.ts": {
      "lineLengths": [
        71,
        106,
        41,
        63,
        5,
        32,
        57,
        5,
        29,
        55,
        5,
        38,
        64,
        5,
        18,
        30,
        63,
        42,
        37,
        26,
        110,
        20,
        35,
        33,
        29,
        44,
        49,
        39,
        37,
        14,
        9,
        5,
        115,
        41,
        65,
        78,
        89,
        12,
        18,
        33,
        21,
        36,
        28,
        19,
        17,
        6,
        1,
        46,
        19,
        112,
        16,
        27,
        24,
        24,
        16,
        1,
        8812
      ],
      "data": {
        "version": 3,
        "file": "/home/asigator/fitness2025/backend/src/services/setService.ts",
        "sources": [
          "file:///home/asigator/fitness2025/backend/src/services/setService.ts"
        ],
        "names": [],
        "mappings": "AASA,OAAO,EAAE,UAAU,EAAE,EAAE,EAAE,kBAAkB,EAAE,MAAM,mBAAmB,CAAC;AAgDvE,MAAM,UAAU,MAAM,CACpB,SAAiB,EACjB,UAAkB,EAClB,SAAiB,EACjB,QAAgB,EAChB,IAAY,EACZ,GAAW,EACX,SAAiB,EACjB,OAAgB,EAChB,KAAc;IAGd,IAAI,QAAQ,GAAG,CAAC,IAAI,QAAQ,GAAG,GAAG,EAAE,CAAC;QACnC,MAAM,IAAI,KAAK,CAAC,qCAAqC,CAAC,CAAC;IACzD,CAAC;IACD,IAAI,IAAI,GAAG,CAAC,IAAI,IAAI,GAAG,EAAE,EAAE,CAAC;QAC1B,MAAM,IAAI,KAAK,CAAC,+BAA+B,CAAC,CAAC;IACnD,CAAC;IACD,IAAI,GAAG,GAAG,CAAC,IAAI,GAAG,GAAG,CAAC,EAAE,CAAC;QACvB,MAAM,IAAI,KAAK,CAAC,6BAA6B,CAAC,CAAC;IACjD,CAAC;IAGD,IAAI,KAAK,IAAI,KAAK,CAAC,MAAM,GAAG,GAAG,EAAE,CAAC;QAChC,MAAM,IAAI,KAAK,CAAC,sCAAsC,CAAC,CAAC;IAC1D,CAAC;IAID,IAAI,OAAO,EAAE,CAAC;QACZ,MAAM,WAAW,GAAG,EAAE;aACnB,OAAO,CACN;yCACiC,CAClC;aACA,GAAG,CAAC,SAAS,EAAE,OAAO,CAA6E,CAAC;QAEvG,IAAI,WAAW,EAAE,CAAC;YAEhB,MAAM,YAAY,GAAG,kBAAkB,CAAC,WAAW,CAAC,SAAS,EAAE,WAAW,CAAC,IAAI,EAAE,WAAW,CAAC,GAAG,CAAC,CAAC;YAClG,OAAO;gBACL,EAAE,EAAE,WAAW,CAAC,EAAE;gBAClB,OAAO,EAAE,OAAO;gBAChB,MAAM,EAAE,IAAI;gBACZ,aAAa,EAAE,YAAY;gBAC3B,SAAS,EAAE,WAAW,CAAC,SAAS;gBAChC,IAAI,EAAE,WAAW,CAAC,IAAI;gBACtB,GAAG,EAAE,WAAW,CAAC,GAAG;aACrB,CAAC;QACJ,CAAC;IACH,CAAC;IAGD,MAAM,MAAM,GAAG,UAAU,CAAC,GAAG,CAC3B,SAAS,EACT,UAAU,EACV,SAAS,EACT,QAAQ,EACR,IAAI,EACJ,GAAG,EACH,SAAS,EACT,KAAK,IAAI,IAAI,CACd,CAAC;IAEF,MAAM,KAAK,GAAG,MAAM,CAAC,eAAyB,CAAC;IAI/C,MAAM,YAAY,GAAG,kBAAkB,CAAC,QAAQ,EAAE,IAAI,EAAE,GAAG,CAAC,CAAC;IAG7D,OAAO,CAAC,GAAG,CACT,uBAAuB,SAAS,cAAc,UAAU,IAAI;QAC1D,GAAG,QAAQ,QAAQ,IAAI,UAAU,GAAG,eAAe,YAAY,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,CAClF,CAAC;IAEF,OAAO;QACL,EAAE,EAAE,KAAK;QACT,OAAO,EAAE,OAAO,IAAI,IAAI;QACxB,MAAM,EAAE,IAAI;QACZ,aAAa,EAAE,YAAY;QAC3B,SAAS,EAAE,QAAQ;QACnB,IAAI,EAAE,IAAI;QACV,GAAG,EAAE,GAAG;KACT,CAAC;AACJ,CAAC;AAQD,MAAM,UAAU,iBAAiB,CAAC,SAAiB;IACjD,MAAM,IAAI,GAAG,EAAE;SACZ,OAAO,CACN;;;uBAGiB,CAClB;SACA,GAAG,CAAC,SAAS,CAAU,CAAC;IAE3B,OAAO,IAAI,CAAC;AACd,CAAC",
        "sourcesContent": [
          "/**\n * Set Logging Service\n *\n * Business logic for exercise set tracking:\n * - Logging individual sets with weight, reps, RIR\n * - Deduplication via localId for idempotent sync\n * - 1RM calculation using Epley formula with RIR adjustment\n */\n\nimport { stmtLogSet, db, calculateOneRepMax } from '../database/db.js';\n\n/**\n * Set interface matching database schema\n */\nexport interface Set {\n  id: number;\n  workout_id: number;\n  exercise_id: number;\n  set_number: number;\n  weight_kg: number;\n  reps: number;\n  rir: number;\n  timestamp: number;\n  notes: string | null;\n  synced: number;\n}\n\n/**\n * Set logging response (for sync confirmation)\n */\nexport interface LogSetResponse {\n  id: number;\n  localId: number | null;\n  synced: boolean;\n  estimated_1rm: number;\n  weight_kg: number;\n  reps: number;\n  rir: number;\n}\n\n/**\n * Log a new exercise set\n *\n * Implements idempotent sync: if localId exists for this workout,\n * returns existing set instead of creating duplicate.\n *\n * @param workoutId - ID of the workout session\n * @param exerciseId - ID of the exercise being performed\n * @param setNumber - Set number within the workout (1, 2, 3, etc.)\n * @param weightKg - Weight lifted in kilograms (0-500)\n * @param reps - Number of repetitions completed (1-50)\n * @param rir - Reps in Reserve (0-4)\n * @param timestamp - UTC milliseconds when set was completed\n * @param localId - Optional local ID from mobile app for deduplication\n * @param notes - Optional notes about the set (max 500 chars)\n * @returns LogSetResponse with id, localId, and synced status\n */\nexport function logSet(\n  workoutId: number,\n  exerciseId: number,\n  setNumber: number,\n  weightKg: number,\n  reps: number,\n  rir: number,\n  timestamp: number,\n  localId?: number,\n  notes?: string\n): LogSetResponse {\n  // Validate input ranges (per FR-005)\n  if (weightKg < 0 || weightKg > 500) {\n    throw new Error('Weight must be between 0 and 500 kg');\n  }\n  if (reps < 1 || reps > 50) {\n    throw new Error('Reps must be between 1 and 50');\n  }\n  if (rir < 0 || rir > 4) {\n    throw new Error('RIR must be between 0 and 4');\n  }\n\n  // Validate notes length\n  if (notes && notes.length > 500) {\n    throw new Error('Notes must be 500 characters or less');\n  }\n\n  // Deduplication check: if localId provided, check if set already exists\n  // This enables idempotent sync from mobile app\n  if (localId) {\n    const existingSet = db\n      .prepare(\n        `SELECT id, weight_kg, reps, rir FROM sets\n         WHERE workout_id = ? AND id = ?`\n      )\n      .get(workoutId, localId) as { id: number; weight_kg: number; reps: number; rir: number } | undefined;\n\n    if (existingSet) {\n      // Set already exists, return existing ID with calculated 1RM\n      const estimated1RM = calculateOneRepMax(existingSet.weight_kg, existingSet.reps, existingSet.rir);\n      return {\n        id: existingSet.id,\n        localId: localId,\n        synced: true,\n        estimated_1rm: estimated1RM,\n        weight_kg: existingSet.weight_kg,\n        reps: existingSet.reps,\n        rir: existingSet.rir,\n      };\n    }\n  }\n\n  // Insert new set with synced=1 (server is source of truth)\n  const result = stmtLogSet.run(\n    workoutId,\n    exerciseId,\n    setNumber,\n    weightKg,\n    reps,\n    rir,\n    timestamp,\n    notes ?? null\n  );\n\n  const setId = result.lastInsertRowid as number;\n\n  // Calculate estimated 1RM for analytics (Epley formula with RIR)\n  // Formula: 1RM = weight × (1 + (reps - rir) / 30)\n  const estimated1RM = calculateOneRepMax(weightKg, reps, rir);\n\n  // Log for performance monitoring (should be < 5ms per CLAUDE.md)\n  console.log(\n    `Set logged: workout=${workoutId}, exercise=${exerciseId}, ` +\n      `${weightKg}kg × ${reps} @ RIR ${rir} (Est. 1RM: ${estimated1RM.toFixed(1)}kg)`\n  );\n\n  return {\n    id: setId,\n    localId: localId ?? null,\n    synced: true,\n    estimated_1rm: estimated1RM,\n    weight_kg: weightKg,\n    reps: reps,\n    rir: rir,\n  };\n}\n\n/**\n * Get all sets for a workout\n *\n * @param workoutId - ID of the workout session\n * @returns Array of sets\n */\nexport function getSetsForWorkout(workoutId: number): Set[] {\n  const sets = db\n    .prepare(\n      `SELECT id, workout_id, exercise_id, set_number, weight_kg, reps, rir, timestamp, notes, synced\n       FROM sets\n       WHERE workout_id = ?\n       ORDER BY id ASC`\n    )\n    .all(workoutId) as Set[];\n\n  return sets;\n}\n"
        ],
        "sourceRoot": ""
      }
    }
  }
}
