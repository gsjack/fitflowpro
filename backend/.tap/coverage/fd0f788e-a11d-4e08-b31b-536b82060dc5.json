{
  "result": [
    {
      "scriptId": "324",
      "url": "file:///home/asigator/fitness2025/backend/src/services/programService.ts",
      "functions": [
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 0,
              "endOffset": 40928,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "getProgramExerciseTemplate",
          "ranges": [
            {
              "startOffset": 612,
              "endOffset": 3245,
              "count": 1
            },
            {
              "startOffset": 669,
              "endOffset": 731,
              "count": 0
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "createDefaultProgram",
          "ranges": [
            {
              "startOffset": 3254,
              "endOffset": 5088,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 3335,
              "endOffset": 5056,
              "count": 1
            },
            {
              "startOffset": 3964,
              "endOffset": 4146,
              "count": 6
            },
            {
              "startOffset": 4449,
              "endOffset": 4616,
              "count": 24
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "getUserProgram",
          "ranges": [
            {
              "startOffset": 5096,
              "endOffset": 5282,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "getProgramDays",
          "ranges": [
            {
              "startOffset": 5290,
              "endOffset": 5469,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "getProgramDayExercises",
          "ranges": [
            {
              "startOffset": 5477,
              "endOffset": 5828,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "advancePhase",
          "ranges": [
            {
              "startOffset": 5836,
              "endOffset": 9018,
              "count": 10
            },
            {
              "startOffset": 5915,
              "endOffset": 5930,
              "count": 3
            },
            {
              "startOffset": 5932,
              "endOffset": 6009,
              "count": 1
            },
            {
              "startOffset": 6009,
              "endOffset": 6030,
              "count": 9
            },
            {
              "startOffset": 6030,
              "endOffset": 6087,
              "count": 2
            },
            {
              "startOffset": 6089,
              "endOffset": 6161,
              "count": 1
            },
            {
              "startOffset": 6161,
              "endOffset": 9017,
              "count": 8
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 6197,
              "endOffset": 8992,
              "count": 8
            },
            {
              "startOffset": 6358,
              "endOffset": 6440,
              "count": 1
            },
            {
              "startOffset": 6440,
              "endOffset": 6567,
              "count": 7
            },
            {
              "startOffset": 6567,
              "endOffset": 6581,
              "count": 1
            },
            {
              "startOffset": 6583,
              "endOffset": 7360,
              "count": 1
            },
            {
              "startOffset": 6684,
              "endOffset": 6739,
              "count": 0
            },
            {
              "startOffset": 6785,
              "endOffset": 6806,
              "count": 0
            },
            {
              "startOffset": 6808,
              "endOffset": 6864,
              "count": 0
            },
            {
              "startOffset": 6910,
              "endOffset": 6934,
              "count": 0
            },
            {
              "startOffset": 6936,
              "endOffset": 6991,
              "count": 0
            },
            {
              "startOffset": 7040,
              "endOffset": 7061,
              "count": 0
            },
            {
              "startOffset": 7063,
              "endOffset": 7118,
              "count": 0
            },
            {
              "startOffset": 7168,
              "endOffset": 7223,
              "count": 0
            },
            {
              "startOffset": 7360,
              "endOffset": 7949,
              "count": 6
            },
            {
              "startOffset": 7752,
              "endOffset": 7843,
              "count": 0
            },
            {
              "startOffset": 7949,
              "endOffset": 8164,
              "count": 7
            },
            {
              "startOffset": 8164,
              "endOffset": 8663,
              "count": 32
            },
            {
              "startOffset": 8470,
              "endOffset": 8653,
              "count": 122
            },
            {
              "startOffset": 8653,
              "endOffset": 8663,
              "count": 31
            },
            {
              "startOffset": 8663,
              "endOffset": 8991,
              "count": 6
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 8062,
              "endOffset": 8077,
              "count": 37
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "calculateMultiplierForTransition",
          "ranges": [
            {
              "startOffset": 9019,
              "endOffset": 9335,
              "count": 1
            },
            {
              "startOffset": 9241,
              "endOffset": 9247,
              "count": 0
            },
            {
              "startOffset": 9292,
              "endOffset": 9298,
              "count": 0
            }
          ],
          "isBlockCoverage": true
        }
      ]
    },
    {
      "scriptId": "325",
      "url": "file:///home/asigator/fitness2025/backend/src/database/db.ts",
      "functions": [
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 0,
              "endOffset": 28100,
              "count": 1
            },
            {
              "startOffset": 450,
              "endOffset": 498,
              "count": 0
            },
            {
              "startOffset": 593,
              "endOffset": 606,
              "count": 0
            },
            {
              "startOffset": 1192,
              "endOffset": 1219,
              "count": 0
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "initializeSchema",
          "ranges": [
            {
              "startOffset": 784,
              "endOffset": 917,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "isInitialized",
          "ranges": [
            {
              "startOffset": 941,
              "endOffset": 1168,
              "count": 1
            },
            {
              "startOffset": 1131,
              "endOffset": 1166,
              "count": 0
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "calculateOneRepMax",
          "ranges": [
            {
              "startOffset": 6163,
              "endOffset": 6234,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "calculateVolumeAdjustment",
          "ranges": [
            {
              "startOffset": 6277,
              "endOffset": 6481,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "executeWithTiming",
          "ranges": [
            {
              "startOffset": 6516,
              "endOffset": 6775,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "transaction",
          "ranges": [
            {
              "startOffset": 6804,
              "endOffset": 6848,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "batchInsert",
          "ranges": [
            {
              "startOffset": 6877,
              "endOffset": 7049,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "closeDatabase",
          "ranges": [
            {
              "startOffset": 7080,
              "endOffset": 7152,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 7173,
              "endOffset": 7203,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 7227,
              "endOffset": 7278,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 7303,
              "endOffset": 7354,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        }
      ]
    }
  ],
  "timestamp": 15376.633249,
  "source-map-cache": {
    "file:///home/asigator/fitness2025/backend/src/services/programService.ts": {
      "lineLengths": [
        39,
        30,
        81,
        79,
        81,
        84,
        89,
        83,
        2,
        55,
        37,
        54,
        5,
        34,
        34,
        34,
        34,
        12,
        96,
        95,
        96,
        97,
        98,
        98,
        96,
        96,
        97,
        98,
        98,
        97,
        97,
        96,
        96,
        98,
        98,
        97,
        96,
        96,
        98,
        98,
        98,
        98,
        6,
        2,
        46,
        48,
        31,
        46,
        87,
        28,
        7,
        116,
        56,
        49,
        76,
        25,
        7,
        33,
        49,
        111,
        58,
        9,
        54,
        95,
        31,
        7,
        68,
        43,
        155,
        9,
        46,
        49,
        71,
        46,
        74,
        50,
        7,
        57,
        25,
        7,
        27,
        1,
        40,
        29,
        77,
        5,
        36,
        1,
        43,
        29,
        72,
        5,
        31,
        1,
        54,
        29,
        10,
        11,
        30,
        22,
        17,
        29,
        45,
        31,
        27,
        5,
        34,
        1,
        70,
        33,
        69,
        5,
        80,
        64,
        5,
        42,
        78,
        51,
        23,
        70,
        9,
        54,
        21,
        29,
        36,
        35,
        64,
        39,
        13,
        69,
        40,
        13,
        72,
        39,
        13,
        72,
        39,
        13,
        50,
        39,
        13,
        18,
        93,
        13,
        9,
        14,
        38,
        54,
        55,
        57,
        57,
        14,
        64,
        31,
        75,
        13,
        40,
        54,
        9,
        129,
        33,
        51,
        32,
        91,
        35,
        96,
        47,
        77,
        53,
        35,
        13,
        9,
        120,
        16,
        42,
        32,
        48,
        48,
        10,
        7,
        21,
        1,
        63,
        26,
        17,
        17,
        18,
        21,
        6,
        54,
        50,
        33,
        1,
        31592
      ],
      "data": {
        "version": 3,
        "file": "/home/asigator/fitness2025/backend/src/services/programService.ts",
        "sources": [
          "file:///home/asigator/fitness2025/backend/src/services/programService.ts"
        ],
        "names": [],
        "mappings": "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",
        "sourcesContent": [
          "/**\n * Program Service\n *\n * Manages training program creation and configuration.\n * Provides default 6-day Renaissance Periodization split for new users.\n */\n\nimport { db } from '../database/db.js';\nimport type { Statement } from 'better-sqlite3';\n\n/**\n * Program day configuration\n */\ninterface ProgramDay {\n  day_of_week: number;\n  day_name: string;\n  day_type: 'strength' | 'vo2max';\n}\n\n/**\n * Exercise configuration for program\n */\ninterface ProgramExercise {\n  program_day_id: number;\n  exercise_id: number;\n  order_index: number;\n  sets: number;\n  reps: string;\n  rir: number;\n}\n\n/**\n * Stored program from database\n */\nexport interface Program {\n  id: number;\n  user_id: number;\n  name: string;\n  created_at: number;\n}\n\n/**\n * Program day from database\n */\nexport interface ProgramDayRecord {\n  id: number;\n  program_id: number;\n  day_of_week: number;\n  day_name: string;\n  day_type: 'strength' | 'vo2max';\n}\n\n/**\n * Program exercise with exercise details\n */\nexport interface ProgramExerciseWithDetails {\n  id: number;\n  program_day_id: number;\n  exercise_id: number;\n  order_index: number;\n  sets: number;\n  reps: string;\n  rir: number;\n  exercise_name: string;\n  muscle_groups: string;\n  equipment: string;\n}\n\n/**\n * Default 6-day program structure\n */\nconst DEFAULT_PROGRAM_DAYS: ProgramDay[] = [\n  { day_of_week: 1, day_name: 'Push A (Chest-Focused)', day_type: 'strength' },\n  { day_of_week: 2, day_name: 'Pull A (Lat-Focused)', day_type: 'strength' },\n  { day_of_week: 3, day_name: 'VO2max A (Norwegian 4x4)', day_type: 'vo2max' },\n  { day_of_week: 4, day_name: 'Push B (Shoulder-Focused)', day_type: 'strength' },\n  { day_of_week: 5, day_name: 'Pull B (Rhomboid/Trap-Focused)', day_type: 'strength' },\n  { day_of_week: 6, day_name: 'VO2max B (30/30 or Zone 2)', day_type: 'vo2max' },\n];\n\n/**\n * Default exercise template for 6-day split\n * Exercise IDs are from the pre-seeded exercises table\n */\nconst getProgramExerciseTemplate = (programDayIds: number[]): ProgramExercise[] => {\n  // Ensure we have all 6 program day IDs\n  if (programDayIds.length !== 6) {\n    throw new Error('Expected 6 program day IDs');\n  }\n\n  const day1 = programDayIds[0]!;\n  const day2 = programDayIds[1]!;\n  // day3 and day6 are VO2max days with no exercises, so we don't need them here\n  const day4 = programDayIds[3]!;\n  const day5 = programDayIds[4]!;\n\n  return [\n    // Day 1: Push A (Chest-Focused)\n    { program_day_id: day1, exercise_id: 25, order_index: 1, sets: 3, reps: '6-8', rir: 3 }, // Barbell Back Squat\n    { program_day_id: day1, exercise_id: 1, order_index: 2, sets: 4, reps: '6-8', rir: 3 }, // Barbell Bench Press\n    { program_day_id: day1, exercise_id: 5, order_index: 3, sets: 3, reps: '8-10', rir: 2 }, // Incline Dumbbell Press\n    { program_day_id: day1, exercise_id: 7, order_index: 4, sets: 3, reps: '12-15', rir: 1 }, // Cable Flyes\n    { program_day_id: day1, exercise_id: 20, order_index: 5, sets: 4, reps: '12-15', rir: 1 }, // Lateral Raises\n    { program_day_id: day1, exercise_id: 49, order_index: 6, sets: 3, reps: '15-20', rir: 0 }, // Tricep Pushdown\n\n    // Day 2: Pull A (Lat-Focused)\n    { program_day_id: day2, exercise_id: 68, order_index: 1, sets: 3, reps: '5-8', rir: 3 }, // Conventional Deadlift\n    { program_day_id: day2, exercise_id: 14, order_index: 2, sets: 4, reps: '5-8', rir: 3 }, // Pull-Ups\n    { program_day_id: day2, exercise_id: 10, order_index: 3, sets: 4, reps: '8-10', rir: 2 }, // Barbell Row\n    { program_day_id: day2, exercise_id: 13, order_index: 4, sets: 3, reps: '12-15', rir: 1 }, // Seated Cable Row\n    { program_day_id: day2, exercise_id: 16, order_index: 5, sets: 3, reps: '15-20', rir: 0 }, // Face Pulls\n    { program_day_id: day2, exercise_id: 39, order_index: 6, sets: 3, reps: '8-12', rir: 1 }, // Barbell Curl\n\n    // Day 3: VO2max A (Norwegian 4x4) - no exercises\n\n    // Day 4: Push B (Shoulder-Focused)\n    { program_day_id: day4, exercise_id: 27, order_index: 1, sets: 3, reps: '8-12', rir: 3 }, // Leg Press\n    { program_day_id: day4, exercise_id: 18, order_index: 2, sets: 4, reps: '5-8', rir: 3 }, // Overhead Press\n    { program_day_id: day4, exercise_id: 4, order_index: 3, sets: 3, reps: '8-12', rir: 2 }, // Dumbbell Bench Press\n    { program_day_id: day4, exercise_id: 21, order_index: 4, sets: 4, reps: '15-20', rir: 0 }, // Cable Lateral Raises\n    { program_day_id: day4, exercise_id: 22, order_index: 5, sets: 3, reps: '15-20', rir: 0 }, // Rear Delt Flyes\n    { program_day_id: day4, exercise_id: 46, order_index: 6, sets: 3, reps: '8-10', rir: 2 }, // Close-Grip Bench Press\n\n    // Day 5: Pull B (Rhomboid/Trap-Focused)\n    { program_day_id: day5, exercise_id: 26, order_index: 1, sets: 3, reps: '6-8', rir: 3 }, // Front Squat\n    { program_day_id: day5, exercise_id: 10, order_index: 2, sets: 4, reps: '6-8', rir: 3 }, // Barbell Row\n    { program_day_id: day5, exercise_id: 12, order_index: 3, sets: 3, reps: '10-12', rir: 2 }, // Lat Pulldown (wide grip)\n    { program_day_id: day5, exercise_id: 62, order_index: 4, sets: 4, reps: '12-15', rir: 1 }, // Barbell Shrugs\n    { program_day_id: day5, exercise_id: 22, order_index: 5, sets: 3, reps: '15-20', rir: 0 }, // Rear Delt Flyes\n    { program_day_id: day5, exercise_id: 41, order_index: 6, sets: 3, reps: '10-15', rir: 1 }, // Hammer Curl\n\n    // Day 6: VO2max B (30/30 or Zone 2) - no exercises\n  ];\n};\n\n/**\n * Create default 6-day Renaissance Periodization program for a new user\n *\n * @param userId - The user ID to create the program for\n * @returns The created program ID\n * @throws Error if program creation fails\n */\nexport function createDefaultProgram(userId: number): number {\n  // Execute as a single transaction for atomicity\n  const createProgram = db.transaction(() => {\n    const now = Date.now();\n\n    // 1. Create the program\n    const stmtCreateProgram: Statement = db.prepare(`\n      INSERT INTO programs (user_id, name, mesocycle_week, mesocycle_phase, created_at)\n      VALUES (?, ?, ?, ?, ?)\n    `);\n\n    const programResult = stmtCreateProgram.run(\n      userId,\n      'Renaissance Periodization 6-Day Split',\n      1,\n      'mev',\n      now\n    );\n\n    const programId = programResult.lastInsertRowid as number;\n\n    // 2. Create the 6 program days\n    const stmtCreateProgramDay: Statement = db.prepare(`\n      INSERT INTO program_days (program_id, day_of_week, day_name, day_type)\n      VALUES (?, ?, ?, ?)\n    `);\n\n    const programDayIds: number[] = [];\n\n    for (const day of DEFAULT_PROGRAM_DAYS) {\n      const dayResult = stmtCreateProgramDay.run(\n        programId,\n        day.day_of_week,\n        day.day_name,\n        day.day_type\n      );\n      programDayIds.push(dayResult.lastInsertRowid as number);\n    }\n\n    // 3. Create program exercises for all strength days\n    const stmtCreateProgramExercise: Statement = db.prepare(`\n      INSERT INTO program_exercises (program_day_id, exercise_id, order_index, sets, reps, rir)\n      VALUES (?, ?, ?, ?, ?, ?)\n    `);\n\n    const exercises = getProgramExerciseTemplate(programDayIds);\n\n    for (const exercise of exercises) {\n      stmtCreateProgramExercise.run(\n        exercise.program_day_id,\n        exercise.exercise_id,\n        exercise.order_index,\n        exercise.sets,\n        exercise.reps,\n        exercise.rir\n      );\n    }\n\n    // 4. Create today's workout for the user\n    // Determine which day of week it is (0=Sunday, 1=Monday, ..., 6=Saturday)\n    const dayOfWeek = new Date().getDay();\n\n    // Map day of week to program_day_id\n    // Sunday (0) -> Saturday's workout (index 5, VO2max B)\n    // Monday (1) -> Push A (index 0)\n    // etc.\n    const dayMapping = [5, 0, 1, 2, 3, 4, 5]; // Sunday maps to Saturday's workout\n    const todayProgramDayId = programDayIds[dayMapping[dayOfWeek]!]!;\n\n    const stmtCreateWorkout: Statement = db.prepare(`\n      INSERT INTO workouts (user_id, program_day_id, date, status, synced)\n      VALUES (?, ?, date('now'), 'not_started', 0)\n    `);\n\n    stmtCreateWorkout.run(userId, todayProgramDayId);\n\n    return programId;\n  });\n\n  return createProgram();\n}\n\n/**\n * Get program details for a user\n *\n * @param userId - The user ID\n * @returns Program details or null if no program exists\n */\nexport function getUserProgram(userId: number): Program | null {\n  const stmt = db.prepare(`\n    SELECT * FROM programs WHERE user_id = ? ORDER BY created_at DESC LIMIT 1\n  `);\n\n  return (stmt.get(userId) as Program | undefined) || null;\n}\n\n/**\n * Get program days for a program\n *\n * @param programId - The program ID\n * @returns Array of program days\n */\nexport function getProgramDays(programId: number): ProgramDayRecord[] {\n  const stmt = db.prepare(`\n    SELECT * FROM program_days WHERE program_id = ? ORDER BY day_of_week\n  `);\n\n  return stmt.all(programId) as ProgramDayRecord[];\n}\n\n/**\n * Get exercises for a program day\n *\n * @param programDayId - The program day ID\n * @returns Array of program exercises with exercise details\n */\nexport function getProgramDayExercises(programDayId: number): ProgramExerciseWithDetails[] {\n  const stmt = db.prepare(`\n    SELECT\n      pe.*,\n      e.name as exercise_name,\n      e.muscle_groups,\n      e.equipment\n    FROM program_exercises pe\n    JOIN exercises e ON pe.exercise_id = e.id\n    WHERE pe.program_day_id = ?\n    ORDER BY pe.order_index\n  `);\n\n  return stmt.all(programDayId);\n}\n\n/**\n * Phase transition result\n */\ninterface PhaseAdvancementResult {\n  previous_phase: string;\n  new_phase: string;\n  volume_multiplier: number;\n  exercises_updated: number;\n}\n\n/**\n * Advance program to the next mesocycle phase with automatic volume adjustment\n *\n * Phase progression cycle: mev → mav → mrv → deload → mev (repeats)\n *\n * Volume multipliers:\n * - MEV → MAV: +20% (1.2x)\n * - MAV → MRV: +15% (1.15x)\n * - MRV → Deload: -50% (0.5x)\n * - Deload → MEV: Reset to baseline (+100%, 2.0x)\n *\n * @param programId - The program ID to advance\n * @param manual - If true, requires target_phase parameter\n * @param targetPhase - Target phase for manual advancement\n * @returns Phase advancement result\n * @throws Error if program not found or invalid phase transition\n */\nexport function advancePhase(\n  programId: number,\n  manual: boolean = false,\n  targetPhase?: string\n): PhaseAdvancementResult {\n  // Validate target phase if manual\n  if (manual && !targetPhase) {\n    throw new Error('target_phase is required when manual=true');\n  }\n\n  if (targetPhase && !['mev', 'mav', 'mrv', 'deload'].includes(targetPhase)) {\n    throw new Error(`Invalid target_phase: ${targetPhase}`);\n  }\n\n  // Execute as atomic transaction\n  const advance = db.transaction(() => {\n    // 1. Get current program state\n    const programStmt = db.prepare('SELECT * FROM programs WHERE id = ?');\n    const program = programStmt.get(programId) as any;\n\n    if (!program) {\n      throw new Error(`Program with ID ${programId} not found`);\n    }\n\n    const previousPhase = program.mesocycle_phase;\n\n    // 2. Determine new phase\n    let newPhase: string;\n    let volumeMultiplier: number;\n\n    if (manual && targetPhase) {\n      // Manual phase transition\n      newPhase = targetPhase;\n\n      // Calculate multiplier based on transition\n      if (previousPhase === 'mev' && newPhase === 'mav') {\n        volumeMultiplier = 1.2;\n      } else if (previousPhase === 'mav' && newPhase === 'mrv') {\n        volumeMultiplier = 1.15;\n      } else if (previousPhase === 'mrv' && newPhase === 'deload') {\n        volumeMultiplier = 0.5;\n      } else if (previousPhase === 'deload' && newPhase === 'mev') {\n        volumeMultiplier = 2.0;\n      } else if (previousPhase === newPhase) {\n        // No change\n        volumeMultiplier = 1.0;\n      } else {\n        // For any other manual transition, calculate based on phases\n        volumeMultiplier = calculateMultiplierForTransition(previousPhase, newPhase);\n      }\n    } else {\n      // Automatic phase progression\n      const phaseProgression: Record<string, { next: string; multiplier: number }> = {\n        mev: { next: 'mav', multiplier: 1.2 },\n        mav: { next: 'mrv', multiplier: 1.15 },\n        mrv: { next: 'deload', multiplier: 0.5 },\n        deload: { next: 'mev', multiplier: 2.0 },\n      };\n\n      const progression = phaseProgression[previousPhase];\n      if (!progression) {\n        throw new Error(`Invalid current phase: ${previousPhase}`);\n      }\n\n      newPhase = progression.next;\n      volumeMultiplier = progression.multiplier;\n    }\n\n    // 3. Update all program exercises across all program days\n    const programDayIds = (\n      db.prepare('SELECT id FROM program_days WHERE program_id = ?').all(programId) as Array<{\n        id: number;\n      }>\n    ).map((row) => row.id);\n\n    let exercisesUpdated = 0;\n\n    for (const programDayId of programDayIds) {\n      const exercises = db\n        .prepare('SELECT id, sets FROM program_exercises WHERE program_day_id = ?')\n        .all(programDayId) as Array<{ id: number; sets: number }>;\n\n      const updateStmt = db.prepare('UPDATE program_exercises SET sets = ? WHERE id = ?');\n\n      for (const exercise of exercises) {\n        const newSets = Math.round(exercise.sets * volumeMultiplier);\n        updateStmt.run(newSets, exercise.id);\n        exercisesUpdated++;\n      }\n    }\n\n    // 4. Update program phase and reset week counter\n    db.prepare('UPDATE programs SET mesocycle_phase = ?, mesocycle_week = 1 WHERE id = ?').run(\n      newPhase,\n      programId\n    );\n\n    return {\n      previous_phase: previousPhase,\n      new_phase: newPhase,\n      volume_multiplier: volumeMultiplier,\n      exercises_updated: exercisesUpdated,\n    };\n  });\n\n  return advance();\n}\n\n/**\n * Calculate volume multiplier for arbitrary phase transitions\n *\n * @param fromPhase - Current phase\n * @param toPhase - Target phase\n * @returns Volume multiplier\n */\nfunction calculateMultiplierForTransition(fromPhase: string, toPhase: string): number {\n  // Define relative volumes for each phase (baseline = mev = 1.0)\n  const phaseVolumes: Record<string, number> = {\n    mev: 1.0,\n    mav: 1.2,\n    mrv: 1.38, // 1.2 * 1.15\n    deload: 0.69, // 1.38 * 0.5\n  };\n\n  const fromVolume = phaseVolumes[fromPhase] || 1.0;\n  const toVolume = phaseVolumes[toPhase] || 1.0;\n\n  return toVolume / fromVolume;\n}\n"
        ],
        "sourceRoot": ""
      }
    },
    "file:///home/asigator/fitness2025/backend/src/database/db.ts": {
      "lineLengths": [
        38,
        57,
        37,
        36,
        50,
        38,
        57,
        69,
        33,
        27,
        44,
        1,
        41,
        78,
        3,
        32,
        33,
        35,
        31,
        32,
        54,
        20,
        47,
        2,
        29,
        9,
        25,
        90,
        19,
        24,
        5,
        11,
        21,
        5,
        2,
        23,
        23,
        1,
        90,
        78,
        42,
        103,
        30,
        3,
        75,
        45,
        70,
        36,
        3,
        49,
        38,
        17,
        55,
        21,
        22,
        3,
        58,
        38,
        17,
        55,
        53,
        22,
        3,
        51,
        17,
        88,
        14,
        3,
        55,
        17,
        24,
        14,
        3,
        46,
        37,
        3,
        59,
        14,
        22,
        41,
        35,
        3,
        38,
        104,
        36,
        3,
        48,
        37,
        13,
        42,
        24,
        23,
        3,
        47,
        52,
        3,
        47,
        45,
        3,
        45,
        41,
        3,
        56,
        36,
        69,
        53,
        3,
        36,
        3,
        59,
        36,
        32,
        3,
        51,
        31,
        64,
        49,
        3,
        33,
        3,
        57,
        52,
        3,
        46,
        8,
        11,
        69,
        13,
        40,
        75,
        17,
        17,
        3,
        44,
        8,
        38,
        29,
        13,
        40,
        42,
        21,
        35,
        44,
        15,
        15,
        3,
        50,
        8,
        75,
        31,
        102,
        15,
        19,
        3,
        48,
        49,
        3,
        51,
        42,
        84,
        3,
        27,
        3,
        51,
        24,
        65,
        19,
        3,
        51,
        47,
        3,
        46,
        78,
        24,
        3,
        50,
        26,
        19,
        25,
        9,
        3,
        58,
        44,
        2,
        58,
        25,
        22,
        24,
        30,
        24,
        31,
        22,
        2,
        48,
        29,
        24,
        40,
        23,
        96,
        5,
        18,
        2,
        36,
        32,
        2,
        47,
        46,
        35,
        27,
        9,
        7,
        20,
        2,
        36,
        15,
        46,
        2,
        26,
        20,
        3,
        28,
        20,
        20,
        3,
        29,
        20,
        20,
        3,
        18,
        20724
      ],
      "data": {
        "version": 3,
        "file": "/home/asigator/fitness2025/backend/src/database/db.ts",
        "sources": [
          "file:///home/asigator/fitness2025/backend/src/database/db.ts"
        ],
        "names": [],
        "mappings": "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",
        "sourcesContent": [
          "/**\n * Backend Database Initialization\n *\n * Initializes better-sqlite3 with performance optimizations:\n * - WAL mode for concurrent reads\n * - 64MB cache for query performance\n * - 256MB memory-mapped I/O\n * - Prepared statements for common queries\n */\n\nimport Database, { Statement } from 'better-sqlite3';\nimport { readFileSync, mkdirSync, existsSync } from 'fs';\nimport { join, dirname } from 'path';\nimport { fileURLToPath } from 'url';\n\n// Get the directory of this module file\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\n\n// Database file path - from dist/database to backend root\nconst DB_PATH = join(__dirname, '../../data/fitflow.db');\nconst SCHEMA_PATH = join(__dirname, '../../src/database/schema.sql');\n\n// Ensure data directory exists\nconst dataDir = dirname(DB_PATH);\nif (!existsSync(dataDir)) {\n  mkdirSync(dataDir, { recursive: true });\n}\n\n// Initialize database\nexport const db: Database.Database = new Database(DB_PATH, {\n  verbose: process.env.NODE_ENV === 'development' ? console.log : undefined,\n});\n\n// Apply performance optimizations\ndb.pragma('journal_mode = WAL');\ndb.pragma('cache_size = -64000'); // 64MB cache\ndb.pragma('mmap_size = 268435456'); // 256MB memory-mapped I/O\ndb.pragma('foreign_keys = ON');\n\n// Initialize schema on first run\nconst initializeSchema = (): void => {\n  const schema = readFileSync(SCHEMA_PATH, 'utf-8');\n  db.exec(schema);\n  console.log('Database schema initialized');\n};\n\n// Check if database is initialized (check for users table)\nconst isInitialized = (): boolean => {\n  try {\n    const result = db\n      .prepare(\"SELECT name FROM sqlite_master WHERE type='table' AND name='users'\")\n      .get();\n    return !!result;\n  } catch {\n    return false;\n  }\n};\n\n// Initialize if needed\nif (!isInitialized()) {\n  initializeSchema();\n}\n\n// ============================================================================\n// Prepared Statements (Common Queries)\n// ============================================================================\n\n// User Operations\nexport const stmtGetUserByUsername: Statement = db.prepare(\n  'SELECT * FROM users WHERE username = ?'\n);\n\nexport const stmtGetUserById: Statement = db.prepare('SELECT * FROM users WHERE id = ?');\n\nexport const stmtCreateUser: Statement = db.prepare(`\n  INSERT INTO users (username, password_hash, age, weight_kg, experience_level, created_at, updated_at)\n  VALUES (?, ?, ?, ?, ?, ?, ?)\n`);\n\nexport const stmtDeleteUser: Statement = db.prepare('DELETE FROM users WHERE id = ?');\n\n// Workout Operations\nexport const stmtCreateWorkout: Statement = db.prepare(`\n  INSERT INTO workouts (user_id, program_day_id, date, status, synced)\n  VALUES (?, ?, ?, 'not_started', 1)\n`);\n\nexport const stmtGetWorkoutsByUser: Statement = db.prepare(`\n  SELECT w.*, pd.day_name, pd.day_type\n  FROM workouts w\n  LEFT JOIN program_days pd ON w.program_day_id = pd.id\n  WHERE w.user_id = ?\n  ORDER BY w.date DESC\n`);\n\nexport const stmtGetWorkoutsByUserDateRange: Statement = db.prepare(`\n  SELECT w.*, pd.day_name, pd.day_type\n  FROM workouts w\n  LEFT JOIN program_days pd ON w.program_day_id = pd.id\n  WHERE w.user_id = ? AND w.date >= ? AND w.date <= ?\n  ORDER BY w.date DESC\n`);\n\nexport const stmtUpdateWorkoutStatus: Statement = db.prepare(`\n  UPDATE workouts\n  SET status = ?, started_at = ?, completed_at = ?, total_volume_kg = ?, average_rir = ?\n  WHERE id = ?\n`);\n\nexport const stmtUpdateWorkoutProgramDay: Statement = db.prepare(`\n  UPDATE workouts\n  SET program_day_id = ?\n  WHERE id = ?\n`);\n\nexport const stmtGetWorkoutById: Statement = db.prepare(`\n  SELECT * FROM workouts WHERE id = ?\n`);\n\nexport const stmtValidateProgramDayOwnership: Statement = db.prepare(`\n  SELECT pd.id\n  FROM program_days pd\n  JOIN programs p ON pd.program_id = p.id\n  WHERE pd.id = ? AND p.user_id = ?\n`);\n\n// Set Operations\nexport const stmtLogSet: Statement = db.prepare(`\n  INSERT INTO sets (workout_id, exercise_id, set_number, weight_kg, reps, rir, timestamp, notes, synced)\n  VALUES (?, ?, ?, ?, ?, ?, ?, ?, 1)\n`);\n\nexport const stmtGetSetsByWorkout: Statement = db.prepare(`\n  SELECT s.*, e.name as exercise_name\n  FROM sets s\n  JOIN exercises e ON s.exercise_id = e.id\n  WHERE s.workout_id = ?\n  ORDER BY s.set_number\n`);\n\nexport const stmtGetSetByLocalId: Statement = db.prepare(`\n  SELECT * FROM sets WHERE id = ? AND workout_id = ?\n`);\n\nexport const stmtGetUnsyncedSets: Statement = db.prepare(`\n  SELECT * FROM sets WHERE synced = 0 LIMIT ?\n`);\n\nexport const stmtMarkSetSynced: Statement = db.prepare(`\n  UPDATE sets SET synced = 1 WHERE id = ?\n`);\n\n// Recovery Assessment Operations\nexport const stmtCreateRecoveryAssessment: Statement = db.prepare(`\n  INSERT INTO recovery_assessments (\n    user_id, date, sleep_quality, muscle_soreness, mental_motivation,\n    total_score, volume_adjustment, timestamp, synced\n  )\n  VALUES (?, ?, ?, ?, ?, ?, ?, ?, 1)\n`);\n\nexport const stmtGetRecoveryAssessmentByDate: Statement = db.prepare(`\n  SELECT * FROM recovery_assessments\n  WHERE user_id = ? AND date = ?\n`);\n\n// VO2max Session Operations\nexport const stmtCreateVO2maxSession: Statement = db.prepare(`\n  INSERT INTO vo2max_sessions (\n    workout_id, protocol, duration_seconds, intervals_completed,\n    average_hr, peak_hr, estimated_vo2max, synced\n  )\n  VALUES (?, ?, ?, ?, ?, ?, ?, 1)\n`);\n\nexport const stmtGetVO2maxSessionByWorkout: Statement = db.prepare(`\n  SELECT * FROM vo2max_sessions WHERE workout_id = ?\n`);\n\n// Analytics Queries\nexport const stmt1RMProgression: Statement = db.prepare(`\n  SELECT\n    w.date,\n    MAX(s.weight_kg * (1 + (s.reps - s.rir) / 30.0)) as estimated_1rm\n  FROM sets s\n  JOIN workouts w ON s.workout_id = w.id\n  WHERE w.user_id = ? AND s.exercise_id = ? AND w.date >= ? AND w.date <= ?\n  GROUP BY w.date\n  ORDER BY w.date\n`);\n\nexport const stmtVolumeTrends: Statement = db.prepare(`\n  SELECT\n    strftime('%Y-%W', w.date) as week,\n    COUNT(s.id) as total_sets\n  FROM sets s\n  JOIN workouts w ON s.workout_id = w.id\n  JOIN exercises e ON s.exercise_id = e.id\n  WHERE w.user_id = ?\n    AND w.date >= ? AND w.date <= ?\n    AND e.muscle_groups LIKE '%' || ? || '%'\n  GROUP BY week\n  ORDER BY week\n`);\n\nexport const stmtConsistencyMetrics: Statement = db.prepare(`\n  SELECT\n    COUNT(CASE WHEN status = 'completed' THEN 1 END) as completed_workouts,\n    COUNT(*) as total_workouts,\n    AVG(CASE WHEN completed_at IS NOT NULL THEN completed_at - started_at END) as avg_session_duration\n  FROM workouts\n  WHERE user_id = ?\n`);\n\n// Active Session Operations\nexport const stmtGetActiveSession: Statement = db.prepare(`\n  SELECT * FROM active_sessions WHERE user_id = ?\n`);\n\nexport const stmtCreateActiveSession: Statement = db.prepare(`\n  INSERT OR REPLACE INTO active_sessions (\n    user_id, workout_id, current_exercise_index, started_at, last_activity_at, state\n  )\n  VALUES (?, ?, ?, ?, ?, ?)\n`);\n\nexport const stmtUpdateActiveSession: Statement = db.prepare(`\n  UPDATE active_sessions\n  SET current_exercise_index = ?, last_activity_at = ?, state = ?\n  WHERE user_id = ?\n`);\n\nexport const stmtDeleteActiveSession: Statement = db.prepare(`\n  DELETE FROM active_sessions WHERE user_id = ?\n`);\n\n// Audit Log Operations\nexport const stmtCreateAuditLog: Statement = db.prepare(`\n  INSERT INTO audit_logs (user_id, event_type, ip_address, timestamp, details)\n  VALUES (?, ?, ?, ?, ?)\n`);\n\nexport const stmtGetAuditLogsByUser: Statement = db.prepare(`\n  SELECT * FROM audit_logs\n  WHERE user_id = ?\n  ORDER BY timestamp DESC\n  LIMIT ?\n`);\n\n// ============================================================================\n// Helper Functions\n// ============================================================================\n\n/**\n * Calculate estimated 1RM using Epley formula with RIR adjustment\n * Formula: 1RM = weight × (1 + (reps - rir) / 30)\n */\nexport const calculateOneRepMax = (weight: number, reps: number, rir: number): number => {\n  return weight * (1 + (reps - rir) / 30);\n};\n\n/**\n * Calculate recovery score auto-regulation adjustment\n * Ranges: 12-15 = none, 9-11 = reduce_1_set, 6-8 = reduce_2_sets, 3-5 = rest_day\n */\nexport const calculateVolumeAdjustment = (\n  totalScore: number\n): 'none' | 'reduce_1_set' | 'reduce_2_sets' | 'rest_day' => {\n  if (totalScore >= 12) return 'none';\n  if (totalScore >= 9) return 'reduce_1_set';\n  if (totalScore >= 6) return 'reduce_2_sets';\n  return 'rest_day';\n};\n\n/**\n * Execute query with performance timing\n */\nexport const executeWithTiming = <T>(name: string, fn: () => T): T => {\n  const start = Date.now();\n  const result = fn();\n  const duration = Date.now() - start;\n\n  if (duration > 5) {\n    console.warn(`[PERFORMANCE WARNING] Query \"${name}\" took ${duration}ms (target: <5ms)`);\n  }\n\n  return result;\n};\n\n// ============================================================================\n// Transaction Helpers\n// ============================================================================\n\n/**\n * Execute function within transaction\n */\nexport const transaction = <T>(fn: () => T): T => {\n  return db.transaction(fn)();\n};\n\n/**\n * Batch insert with transaction\n */\nexport const batchInsert = <T>(stmt: Database.Statement, records: T[]): void => {\n  const insert = db.transaction((items: T[]) => {\n    for (const item of items) {\n      stmt.run(item);\n    }\n  });\n\n  insert(records);\n};\n\n// ============================================================================\n// Cleanup\n// ============================================================================\n\n/**\n * Close database connection\n */\nexport const closeDatabase = (): void => {\n  db.close();\n  console.log('Database connection closed');\n};\n\n// Handle process termination\nprocess.on('exit', () => {\n  closeDatabase();\n});\n\nprocess.on('SIGINT', () => {\n  closeDatabase();\n  process.exit(0);\n});\n\nprocess.on('SIGTERM', () => {\n  closeDatabase();\n  process.exit(0);\n});\n\nexport default db;\n"
        ],
        "sourceRoot": ""
      }
    }
  }
}
